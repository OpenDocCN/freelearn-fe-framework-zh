["```js\nimport { HttpModule } from '@angular/http';\n```", "```js\n// app.module.ts\n@NgModule({\nimports: [\nBrowserModule,\nHttpModule,\n],\n})\n```", "```js\nng new [project name]\n```", "```js\nnpm install express body-parser cors\n```", "```js\n// server.js\nconst express = require('express');\nconst path = require('path');\nconst http = require('http');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst app = express();\n// Get API routes\nconst route = require('./routes/index');\n// Parser for POST data\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n// Use CORS\napp.use(cors());\n// Declare API routes\napp.use('/api', route);\n/**\n* Get port from environment. Default is 3000\n*/\nconst port = process.env.PORT || '3000';\n/**\n* Create HTTP server.\n*/\nconst server = http.createServer(app);\n/**\n* Listen on port\n*/\napp.listen(port, function () {\nconsole.log(`API running on port ${port}`)\n} );\n```", "```js\n// routes/index.js\nconst express = require('express');\n// create a new router object\nconst router = express.Router();\n/* GET api listing. */\nrouter.get('/', (req, res) => {\nres.send('api works');\n});\nmodule.exports = router;\n```", "```js\nnode server.js\n```", "```js\nnpm install diskdb\n```", "```js\n// routes/index.js\nconst express = require('express');\nconst router = express.Router();\n// require diskdb\nconst db = require('diskdb');\ndb.connect(__dirname, ['todos']);\n// store Todo\nrouter.post('/todo', function(req, res, next) {\nvar todo = req.body;\nif (!todo.action || !(todo.isDone + '')) {\nres.status(400);\nres.json({\nerror: 'bad data'\n});\n} else {\ndb.todos.save(todo);\nres.json(todo);\n}\n});\n// get Todos\nrouter.get('/todos', function(req, res, next) {\nconst todos = db.todos.find();\nres.json(todos);\n});\n// update Todo\nrouter.put('/todo/:id', function(req, res, next) {\nconst todo = req.body;\ndb.todos.update({_id: req.params.id}, todo);\nres.json({ msg: `${req.params.id} updated`});\n});\n// delete Todo\nrouter.delete('/todo/:id', function(req, res, next) {\ndb.todos.remove({\n_id: req.params.id\n});\nres.json({ msg: `${req.params.id} deleted` });\n});\nmodule.exports = router;\n```", "```js\n[{\n\"action\":\"write more code\",\n\"isDone\":false,\"\n_id\":\"97a8ee67b6064e06aac803662d98a46c\"\n},{\n\"action\":\"help the old lady\",\n\"isDone\":false,\"\n_id\":\"3d14ad8d528549fc9819d8b54e4d2836\"\n},{\n\"action\":\"study\",\n\"isDone\":true,\"\n_id\":\"e77cb6d0efcb4b5aaa6f16f7adf41ed6\"\n}]\n```", "```js\nng generate component todos\n```", "```js\n// app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { TodosComponent } from './todos/todos.component';\n@NgModule({\ndeclarations: [\nAppComponent,\nTodosComponent\n],\nimports: [\nBrowserModule\n],\nproviders: [],\nbootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\n<!-- index.html -->\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Data</title>\n<base href=\"/\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n<app-root></app-root>\n</body>\n</html>\n```", "```js\nimport { RouterModule } from '@angular/router';\n...\nimports: [\n...\nRouterModule.forRoot(ROUTES)\n],\n```", "```js\nconst ROUTES = [\n{\npath: '',\nredirectTo: 'todos',\npathMatch: 'full'\n},\n{\npath: 'todos',\ncomponent: TodosComponent\n}\n]\n```", "```js\n<div style=\"text-align:center\">\n<h1>\nWelcome to {{ title }}!\n</h1>\n<router-outlet></router-outlet>\n```", "```js\nng generate service todos\n```", "```js\nimport {TodosService} from './todos.service';\n...\nproviders: [TodosService],\n...\n})\nexport class AppModule { }\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Http, Headers} from '@angular/http';\nimport 'rxjs/add/operator/map';\n@Injectable()\nexport class TodosService {\n// constructor and methods to execute the crud operations will go in here\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\n@Injectable()\nexport class TodosService {\nconstructor(private http: Http) {}\n}\nNext, we will define a method that will fetch all todos from the API. Updating todos.service.ts:\n// todo.service.ts\n...\nexport class TodosService {\nisDone: false;\nconstructor(private http: Http) {}\n// Get all todos\ngetTodos() {\nreturn this.http\n.get('http://localhost:3000/api/todos')\n.map(res => res.json());\n}\n}\n```", "```js\n// todo.service.ts\n...\naddTodos(todo) {\nlet headers = new Headers();\nheaders.append('Content-Type', 'application/json');\nreturn this.http\n.post('http://localhost:3000/api/todo', JSON.stringify(todo), { headers })\n.map(res => res.json());\n}\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\n@Injectable()\nexport class TodosService {\nconstructor(private http: Http) {}\ngetTodos() {\nreturn this.http\n.get('http://localhost:3000/api/todos')\n.map(res => res.json());\n}\naddTodos(todo) {\nlet headers = new Headers();\nheaders.append('Content-Type', 'application/json');\nreturn this.http\n.post('http://localhost:3000/api/todo', JSON.stringify(todo), { headers })\n.map(res => res.json());\n}\ndeleteTodo(id) {\nreturn this.http\n.delete(`http://localhost:3000/api/todo/${id}`)\n.map(res => res.json());\n}\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\n@Injectable()\nexport class TodosService {\nisDone: false;\nconstructor(private http: Http) {}\ngetTodos() {\nreturn this.http\n.get('http://localhost:3000/api/todos')\n.map(res => res.json());\n}\naddTodos(todo) {\nlet headers = new Headers();\nheaders.append('Content-Type', 'application/json');\nreturn this.http\n.post('http://localhost:3000/api/todo', JSON.stringify(todo), { headers })\n.map(res => res.json());\n}\ndeleteTodo(id) {\nreturn this.http\n.delete(`http://localhost:3000/api/todo/${id}`)\n.map(res => res.json());\n}\nupdateStatus(todo) {\nlet headers = new Headers();\nheaders.append('Content-Type', 'application/json');\nreturn this.http\n.put('http://localhost:3000/api/todo/' + todo._id, JSON.stringify(todo), {\nheaders: headers\n})\n.map(res => res.json());\n}\n}\n```", "```js\nimport {HttpModule} from '@angular/http';\n...\nimports: [\nHttpModule,\nBrowserModule,\nRouterModule.forRoot(ROUTES)\n],\n...\n```", "```js\nimport {TodosService} from '../todos.service';\n```", "```js\nconstructor(private todoService: TodosService) { }\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { TodosService } from '../todos.service';\n@Component({\nselector: 'app-todos',\ntemplateUrl: './todos.component.html',\nstyleUrls: ['./todos.component.css']\n})\nexport class TodosComponent implements OnInit {\n//define data types\ntodos: any = [];\ntodo: any;\naction: any;\nname: any;\nisDone: boolean;\nconstructor(private todoService: TodosService) {}\nngOnInit() {\nthis.todoService.getTodos().subscribe(todos => {\nthis.todos = todos;\n});\n}\naddTodos(event) {\nevent.preventDefault();\nlet newTodo = {\nname: this.name,\naction: this.action,\nisDone: false\n};\nthis.todoService.addTodos(newTodo).subscribe(todo => {\nthis.todos.push(todo);\nthis.name = '';\nthis.action = '';\n});\n}\ndeleteTodo(id) {\nlet todos = this.todos;\nthis.todoService.deleteTodo(id).subscribe(data => {\nconst index = this.todos.findIndex(todo => todo._id == id);\ntodos.splice(index, 1)\n});\n}\nupdateStatus(todo) {\nvar _todo = {\n_id: todo._id,\naction: todo.action,\nisDone: !todo.isDone\n};\nthis.todoService.updateStatus(_todo).subscribe(data => {\nconst index = this.todos.findIndex(todo => todo._id == _todo._id)\nthis.todos[index] = _todo;\n});\n}\nchoice(todo) {\nconsole.log(todo);\nreturn todo.isDone;\n}\n}\n```", "```js\n<div class=\"container\">\n<form (submit) = \"addTodos($event)\">\n<input type=\"text\"\nclass=\"form-control\" placeholder=\"action\"\n[(ngModel)] =\"action\" name=\"action\">\n<button type=\"submit\"><h4>Submit</h4></button>\n</form>\n<div *ngFor=\"let todo of todos\">\n<div class=\"container\">\n<p (click)=\"updateStatus(todo)\" [ngStyle]=\"{ 'text-decoration': todo.isDone ? 'line-through' : ''}\" >Action: {{todo.action}}</p>\n{{todo.isDone}}\n<button (click) =\"deleteTodo(todo._id)\" >Delete</button>\n</div>\n</div>\n</div>\n```", "```js\n<!-- Index.html --&gt;\n<!doctype html>\n<html lang=\"en\">\n<head>\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\" integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\" crossorigin=\"anonymous\">\n<meta charset=\"utf-8\">\n<title>Data</title>\n<base href=\"/\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n<app-root></app-root>\n</body>\n</html>\n```", "```js\n<form (submit) = \"addTodos($event)\">\n<input type=\"text\" class=\"form-control\" placeholder=\"action\" [(ngModel)] =\"action\" name=\"action\">\n<button class=\"btn btn-primary\" type=\"submit\"><h4>Submit</h4></button>\n</form>\n<div class=\"card pos\" style=\"width: 20rem;\" *ngFor=\"let todo of todos\">\n<div class=\"card-body\">\n<h4 class=\"card-title\" (click)=\"updateStatus(todo)\" [ngStyle]=\"{ 'text-decoration': todo.isDone ? 'line-through' : ''}\">{{todo.action}}</h4>\n<p class=\"card-text\">{{todo.isDone}}</p>\n<button (click) =\"deleteTodo(todo._id)\" class=\"btn btn-danger\">Delete</button>\n</div>\n</div>\nWe'll also update app.component.css file to add some optional extra styling.\n// app.component.css\n.isDone{\ntext-decoration: line-through;\n}\n.pos{\nmargin-left: 40%;\nmargin-top: 10px;\n}\n```", "```js\nng new user\n```", "```js\nnpm install express body-parser cors --save\n```", "```js\n// Require dependencies\nconst express = require('express');\nconst path = require('path');\nconst http = require('http');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\n// Get our API routes\nconst route = require('./route');\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n// Use CORS\napp.use(cors());\n// Set our api routes\napp.use('/api', route);\n/**\n* Get port from environment.\n*/\nconst port = process.env.PORT || '3000';\n/**\n* Create HTTP server.\n*/\nconst server = http.createServer(app);\n//Listen on provided port\napp.listen(port);\nconsole.log('server is listening');\n```", "```js\nnpm install diskdb\n```", "```js\n[{\"name\": \"Marcel\", \"email\": \"test1@gmail.com\", \"phone_number\":\"08012345\", \"isOnline\":false}]\n```", "```js\nroute.js\nconst express = require('express');\nconst router = express.Router();\nconst db = require('diskdb');\ndb.connect(__dirname, ['users']);\n//save\nrouter.post('/users', function(req, res, next) {\nvar user = req.body;\nif (!user.name && !(user.email + '') && !(user.phone_number + '') && !(user.isActive + '')) {\nres.status(400);\nres.json({\nerror: 'error'\n});\n} else {\nconsole.log('ds');\ndb.users.save(todo);\nres.json(todo);\n}\n});\n//get\nrouter.get('/users', function(req, res, next) {\nvar foundUsers = db.users.find();\nconsole.log(foundUsers);\nres.json(foundUsers);\nfoundUsers = db.users.find();\nconsole.log(foundUsers);\n});\n//updateUsers\nrouter.put('/user/:id', function(req, res, next) {\nvar updUser = req.body;\nconsole.log(updUser, req.params.id)\ndb.users.update({_id: req.params.id}, updUser);\nres.json({ msg: req.params.id + ' updated' });\n});\n//delete\nrouter.delete('/user/:id', function(req, res, next) {\nconsole.log(req.params);\ndb.users.remove({\n_id: req.params.id\n});\nres.json({ msg: req.params.id + ' deleted' });\n});\nmodule.exports = router;\n```", "```js\nnode server.js\n```", "```js\nng g component user\n```", "```js\n<div style=\"text-align:center\">\n<app-user></app-user>\n</div>\n```", "```js\nng generate service user\n```", "```js\nImport rxjs/add/operator/map in the imports section.\nimport { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nWithin the UserService class, define a constructor and pass in the angular 2 HTTP service.\nimport { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\n@Injectable()\nexport class UserService {\nconstructor(private http: Http) {}\n}\n```", "```js\ngetUser() {\nreturn this.http\n.get('http://localhost:3000/api/users')\n.map(res => res.json());\n}\n```", "```js\naddUser(newUser) {\nvar headers = new Headers();\nheaders.append('Content-Type', 'application/json');\nreturn this.http\n.post('http://localhost:3000/api/user', JSON.stringify(newUser), {\nheaders: headers\n})\n.map(res => res.json());\n}\n```", "```js\ndeleteUser(id) {\nreturn this.http\n.delete('http://localhost:3000/api/user/' + id)\n.map(res => res.json());\n}\n```", "```js\nupdateUser(user) {\nvar headers = new Headers();\nheaders.append('Content-Type', 'application/json');\nreturn this.http\n.put('http://localhost:3000/api/user/' + user._id, JSON.stringify(user), {\nheaders: headers\n})\n.map(res => res.json());\n}\n```", "```js\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n.....\nimports: [\n.....\nHttpModule,\nFormsModule\n]\n```", "```js\nImport UserService in user.component.ts.\nimport {UserService} from '../user.service';\nNext, include the service class in the user component constructor.\nconstructor(private userService: UserService) { }.\nJust below the exported UserComponent class, add the following properties and define their data types:\nusers: any = [];\nuser: any;\nname: any;\nemail: any;\nphone_number: any;\nisOnline: boolean;\n```", "```js\nngOnInit() {\nthis.userService.getUser().subscribe(users => {\nconsole.log(users);\nthis.users = users;\n});\n}\n```", "```js\naddUser(event) {\nevent.preventDefault();\nvar newUser = {\nname: this.name,\nemail: this.email,\nphone_number: this.phone_number,\nisOnline: false\n};\nthis.userService.addUser(newUser).subscribe(user => {\nthis.users.push(user);\nthis.name = '';\nthis.email = '';\nthis.phone_number = '';\n});\n}\n```", "```js\ndeleteUser(id) {\nvar users = this.users;\nthis.userService.deleteUser(id).subscribe(data => {\nconsole.log(id);\nconst index = this.users.findIndex(user => user._id == id);\nusers.splice(index, 1)\n});\n}\n```", "```js\nupdateUser(user) {\nvar _user = {\n_id: user._id,\nname: user.name,\nemail: user.email,\nphone_number: user.phone_number,\nisActive: !user.isActive\n};\nthis.userService.updateUser(_user).subscribe(data => {\nconst index = this.users.findIndex(user => user._id == _user._id)\nthis.users[index] = _user;\n});\n}\n```", "```js\n<!doctype html>\n<html lang=\"en\">\n<head>\n//bootstrap CDN\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\" integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\" crossorigin=\"anonymous\">\n<meta charset=\"utf-8\">\n<title>User</title>\n<base href=\"/\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n<app-root></app-root>\n</body>\n</html>\n```", "```js\n<form class=\"form-inline\" (submit) = \"addUser($event)\">\n<div class=\"form-row\">\n<div class=\"col\">\n<input type=\"text\" class=\"form-control\" [(ngModel)] =\"name\" name=\"name\">\n</div>\n<div class=\"col\">\n<input type=\"text\" class=\"form-control\" [(ngModel)] =\"email\" name=\"email\">\n</div>\n<div class=\"col\">\n<input type=\"text\" class=\"form-control\" [(ngModel)] =\"phone_number\" name=\"phone_number\">\n</div>\n</div> <br>\n<button class=\"btn btn-primary\" type=\"submit\" (click) = \"addUser($event)\"><h4>Add User</h4></button>\n</form>\n<table class=\"table table-striped\" >\n<thead>\n<tr>\n<th>Name</th>\n<th>Email</th>\n<th>Phone_Number</th>\n<th>Active</th>\n</tr>\n</thead>\n<tbody *ngFor=\"let user of users\">\n<tr>\n<td>{{user.name}}</td>\n<td>{{user.email}}</td>\n<td>{{user.phone_number}}</td>\n<td>{{user.isActive}}</td>\n<td><input type=\"submit\" class=\"btn btn-warning\" value=\"Update Status\" (click)=\"updateUser(user)\" [ngStyle]=\"{ 'text-decoration-color:': user.isActive ? 'blue' : ''}\"></td>\n<td><button (click) =\"deleteUser(user._id)\" class=\"btn btn-danger\">Delete</button></td>\n</tr>\n</tbody>\n</table>\n```", "```js\nform{\nmargin-top: 20px;\nmargin-left: 20%;\nsize: 50px;\n}\ntable{\nmargin-top:20px;\nheight: 50%;\nwidth: 50%;\nmargin-left: 20%;\n}\nbutton{\nmargin-left: 20px;\n}\n```"]