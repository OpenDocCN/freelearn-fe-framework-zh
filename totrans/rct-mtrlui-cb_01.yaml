- en: Grids - Placing Components on the Page
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格 - 在页面上放置组件
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Understanding breakpoints
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解断点
- en: Filling space
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充空间
- en: Abstracting containers and items
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象容器和项目
- en: Fixed column layout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定列布局
- en: Column direction
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列方向
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Material-UI grids are used to control the layout of screens in your app. Rather
    then implement your own styles to manage the layout of your Material-UI components,
    you can leverage the `Grid` component. Behind the scenes, it uses CSS flexbox
    properties to handle flexible layouts.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI网格用于控制应用中屏幕的布局。而不是实现自己的样式来管理Material-UI组件的布局，你可以利用`Grid`组件。在幕后，它使用CSS
    flexbox属性来处理灵活布局。
- en: Applying breakpoints
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用断点
- en: A **breakpoint** is used by Material-UI to determine at what point to break the
    flow of content on the screen and continue it on the next line. Understanding
    how to apply breakpoints with `Grid` components is fundamental to implementing
    layouts in Material-UI applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**断点**被Material-UI用于确定在屏幕上何时打断内容流并继续到下一行。了解如何使用`Grid`组件应用断点是实现Material-UI应用程序布局的基本。'
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have four elements that you want to lay out on the screen
    so that they''re evenly spaced and occupy all available horizontal space. The
    code for this is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要在屏幕上均匀分布四个元素，并占据所有可用的水平空间。相应的代码如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This renders four `Paper` components. The labels indicate the values used for
    the `xs`, `sm`, and `md` properties. Here''s what the result looks like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将渲染四个`Paper`组件。标签指示了`xs`、`sm`和`md`属性使用的值。以下是结果的外观：
- en: '![](img/4166f31b-0b88-4774-af95-babd5cc17fe1.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4166f31b-0b88-4774-af95-babd5cc17fe1.png)'
- en: How it works...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Each of the breakpoint properties that you can pass to `Grid` components correspond
    to screen widths, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以传递给`Grid`组件的每个断点属性都对应于屏幕宽度，如下所示：
- en: '`xs >= 0px`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xs >= 0px`'
- en: '`sm >= 600px`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sm >= 600px`'
- en: '`md >= 960px`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`md >= 960px`'
- en: '`lg >= 1280px`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lg >= 1280px`'
- en: '`xl >= 1920px`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xl >= 1920px`'
- en: The screen shown previously had a pixel width of 725, which means that the `Grid`
    components used the `sm` breakpoint. The value passed to this property was `6`.
    This can be a number from `1` to `12` and defines how many items will fit into
    the grid. This can be confusing, so it's helpful to think of these numbers in
    terms of percentages. For example, `6` would be 50% and, as the preceding screenshot
    shows, the `Grid` items take up 50% of the width.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 之前显示的屏幕像素宽度为725，这意味着`Grid`组件使用了`sm`断点。传递给此属性的值是`6`。这个值可以是`1`到`12`之间的数字，它定义了将有多少个项目放入网格中。这可能会令人困惑，因此将这些数字视为百分比可能会有所帮助。例如，`6`将是50%，正如前面的截图所示，`Grid`元素占据了50%的宽度。
- en: 'For example, let''s say that you want the width of each `Grid` item to take
    up 75% of the screen width when the small breakpoint is active. You could set
    the `sm` value to `9` (9/12 = 0.75), as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你希望在小型断点激活时，每个`Grid`元素的宽度占屏幕宽度的75%。你可以将`sm`值设置为`9`（9/12 = 0.75），如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s the result when the screen width is still at 725 pixels:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕宽度仍然是725像素时，这是结果：
- en: '![](img/89aa03ef-cb04-4303-9ed6-4216bcacd3ec.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/89aa03ef-cb04-4303-9ed6-4216bcacd3ec.png)'
- en: This combination of screen width and breakpoint value isn't optimal – there's
    a lot of wasted space to the right. By experimenting, you could make the `sm`
    value greater so that there's less wasted space, or you could make the value smaller
    so that more items fit on the row. For example, `6` looked better because exactly
    2 items fit on the screen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种屏幕宽度和断点值的组合并不理想——右侧有大量的空间被浪费了。通过实验，你可以使`sm`值更大，以减少浪费的空间，或者你可以减小值，以便更多项目能适应一行。例如，`6`看起来更好，因为正好有2个项目适合屏幕。
- en: 'Let''s take the screen width down to 575 pixels. This will activate the `xs`
    breakpoint with a value of `12` (100%):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将屏幕宽度降低到575像素。这将激活`xs`断点，其值为`12`（100%）：
- en: '![](img/79154e2a-360c-4e92-b737-da8c73bf1667.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/79154e2a-360c-4e92-b737-da8c73bf1667.png)'
- en: This layout works on smaller screens, because it doesn't try to fit too many
    grid items on one row.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种布局适用于较小的屏幕，因为它不会试图在一行中放置过多的网格项目。
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can use the `auto` value for every breakpoint value if you''re unsure of
    which value to use:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定使用哪个值，可以为每个断点值使用`auto`：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will try to fit as many items as possible on each row. As the screen size
    changes, items are rearranged so that they fit on the screen accordingly. Here''s
    what this looks like at a screen width of 725 pixels:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将尝试在每一行中尽可能多地放置项目。当屏幕尺寸变化时，项目会重新排列，以便相应地适应屏幕。以下是在屏幕宽度为725像素时的样子：
- en: '![](img/986c227b-d321-4c86-8596-2245a15d1ff1.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/986c227b-d321-4c86-8596-2245a15d1ff1.png)'
- en: I would recommend replacing `auto` with a value from `1`–`12` at some point.
    The `auto` value is good enough that you can get started on other things without
    worrying too much about layout, but it's far from perfect for your production
    app. At least by setting up `auto` this way, you have all of your `Grid` components
    and breakpoint properties in place. You just need to play with the numbers until
    everything looks good.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在某个时候将`auto`替换为`1`至`12`之间的一个值。`auto`的值已经足够好，你可以开始做其他事情，而不必过多担心布局，但它对你的生产应用来说远非完美。至少通过这样设置`auto`，你所有的`Grid`组件和断点属性都已经就位。你只需要调整数字，直到一切看起来都很好。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid` API 文档：[https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid` 演示：[https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
- en: Breakpoint documentation: [https://material-ui.com/layout/breakpoints/](https://material-ui.com/layout/breakpoints/)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断点文档：[https://material-ui.com/layout/breakpoints/](https://material-ui.com/layout/breakpoints/)
- en: Filling space
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充空间
- en: With some layouts, it is impossible to have your grid items occupy the entire
    width of the screen. Using the `justify` property, you can control how grid items
    fill the available space in the row.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些布局，让你的网格项占据整个屏幕宽度是不可能的。使用`justify`属性，你可以控制网格项如何填充行中的可用空间。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Let's say that you have four `Paper` components to render in a grid. Inside
    each of these `Paper` components, you have three `Chip` components, which are
    **nested grid items**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要在网格中渲染四个`Paper`组件。在每个`Paper`组件内部，你有三个`Chip`组件，它们是**嵌套的网格项**。
- en: 'Here''s what the code looks like:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码看起来是这样的：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `justify` property is specified on `container Grid` components. In this
    example, it''s the `container` that contains the `Chip` components as items. Each
    `container` is using the flex-start value, which will align the `Grid` items at
    the start of the `container`. The result is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`justify`属性是在`container Grid`组件上指定的。在这个例子中，包含`Chip`组件作为项的`container`。每个`container`都使用`flex-start`值，这将使`Grid`项对齐到`container`的起始位置。结果是：'
- en: '![](img/fa417c9a-0f7e-4925-8507-2944ccc9453d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa417c9a-0f7e-4925-8507-2944ccc9453d.png)'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The flex-start value of the `justify` property aligns all of the `Grid` items
    at the start of the `container`. In this case, the three `Chip` components in
    each of the four containers are all crammed to the left of the row. None of the
    space to the left of the items is filled. Instead of changing the breakpoint property
    values of these items, which results in changed widths, you can change the `justify`
    property value to tell the `Grid` container how to fill empty spaces.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`justify`属性的`flex-start`值将所有`Grid`项对齐到`container`的起始位置。在这种情况下，四个容器中的每个容器中的三个`Chip`组件都挤在行的左侧。项目左侧的空间没有被填充。你不必更改这些项目的断点属性值，这会导致宽度变化，你可以更改`justify`属性值来告诉`Grid`容器如何填充空隙。'
- en: 'For example, you could use the `center` value to align `Grid` items in the
    `center` of the `container` as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用`center`值来将`Grid`项对齐到`container`的中心，如下所示：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows what this change to the `justify` property value
    results in:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了将`justify`属性值更改后的结果：
- en: '![](img/59e234b3-9ebd-443b-8c2b-fa95eaac2d4e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59e234b3-9ebd-443b-8c2b-fa95eaac2d4e.png)'
- en: 'This does a good job of evenly distributing the empty space to the left and
    right of the `Grid` items. But the items still feel crowded because there''s no
    space in between them. Here''s what it looks like if you use the `space-around`
    value of the `justify` property:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将空隙均匀分布到`Grid`项的左右两侧。但是，由于它们之间没有空间，项目仍然显得拥挤。如果你使用`justify`属性的`space-around`值，它看起来是这样的：
- en: '![](img/1aa41ca1-2bcb-48fc-ae77-35888c221572.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1aa41ca1-2bcb-48fc-ae77-35888c221572.png)'
- en: This value does the best job of filling all the available space in the `Grid
    container`, without having to change the width of the `Grid` items.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值在填充`Grid`容器中所有可用空间方面做得最好，而无需更改`Grid`项的宽度。
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'A variation on the `space-around` value is the `space-between` value. The two
    are similar in that they''re effective at filling all of the space in the row.
    Here''s what the example in the preceding section looks like using `space-between`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`space-around`值的一个变体是`space-between`值。这两个值在填充行中所有空间方面是相似的。以下是前一个示例部分使用`space-between`的效果：'
- en: '![](img/cdf33225-b0c3-49df-84c5-36ec90787630.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cdf33225-b0c3-49df-84c5-36ec90787630.png)'
- en: All of the excess space in the row goes in between the `Grid` items instead
    of around them. In other words, use this value when you want to make sure that
    there's no empty space to the left and right of each row.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 行中所有的多余空间都放在`Grid`项目之间，而不是周围。换句话说，当你想要确保每行左右没有空隙时，使用这个值。
- en: See also
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid`演示：[https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid` API文档：[https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
- en: Abstracting containers and items
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象容器和项目
- en: You have lots of screens in your app, each with lots of `Grid` components, used
    to create complex layouts. Trying to read source code that has a ton of `<Grid>`
    elements in it can be daunting. Especially when a `Grid` component is used for
    both containers and for items.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用中，你有许多屏幕，每个屏幕都有许多`Grid`组件，用于创建复杂的布局。试图阅读包含大量`<Grid>`元素的源代码可能会令人望而却步。特别是当`Grid`组件既用于容器又用于项目时。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The `container` or the `item` property of `Grid` components determines the
    role of the element. You can create two components that use these properties and
    create an element name that''s easier to read when you have lots of layout components:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Grid`组件的`container`或`item`属性决定了元素的角色。你可以创建两个使用这些属性的组件，并在有大量布局组件时创建一个更容易阅读的元素名称：'
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s what the resulting layout looks like:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结果布局的外观：
- en: '![](img/302cc8cd-072f-40af-8b58-9d59d6558d1a.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/302cc8cd-072f-40af-8b58-9d59d6558d1a.png)'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s take a closer look at the `Container` and `Item` components:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看`Container`和`Item`组件：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `Container` component renders a `Grid` component with the `container` property
    set to true, and the `Item` component does the same, except with the `item` property
    set to true. Each component passes any additional properties to the `Grid` component,
    such as `xs` and `sm` breakpoints.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Container`组件渲染一个具有`container`属性设置为true的`Grid`组件，而`Item`组件做同样的事情，只是将`item`属性设置为true。每个组件将任何额外的属性传递给`Grid`组件，例如`xs`和`sm`断点。'
- en: When you have lots of `Grid` containers and items that make up your layout,
    being able to see the difference between `<Container>` and `<Item>` elements makes
    your code that much easier to read. Contrast this with having `<Grid>` elements
    everywhere.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有大量的`Grid`容器和组成你的布局的项目时，能够看到`<Container>`和`<Item>`元素之间的区别会使你的代码更容易阅读。与此相对的是，在所有地方都有`<Grid>`元素。
- en: There's more...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If you find that you''re using the same breakpoints over and over in your layouts,
    you can include them in in your higher-order `Item` component. Let''s rewrite
    the example so that, in addition to the `Item` property, the `xs`, `sm`, and `md`
    properties are included as well:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现你在布局中反复使用相同的断点，你可以在你的高阶`Item`组件中包含它们。让我们重写示例，以便除了`Item`属性外，还包括`xs`、`sm`和`md`属性：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, instead of four instances of `<Item xs={12} sm={6} md={3}>`, you have four
    instances of `<Item>`. Component abstractions are a great tool for removing excess
    syntax from your **JavaScript XML** (**JSX**) markup.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你不再有四个`<Item xs={12} sm={6} md={3}>`实例，而是有四个`<Item>`实例。组件抽象是移除你的**JavaScript
    XML**（**JSX**）标记中多余语法的优秀工具。
- en: Any time you need to override any of the breakpoint properties that you've set
    in the `Item` component, you just need to pass the property to `Item`. For example,
    if you have a specific case where you need `md` to be `6`, you can just write
    `<Item md={6}>`. This works because, in the `Item` component, `{...props}` is
    passed after the default values, meaning that they override any properties with
    the same name.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 任何需要覆盖你在`Item`组件中设置的任何断点属性的时候，你只需要将属性传递给`Item`。例如，如果你有一个特定的案例需要`md`为`6`，你只需写`<Item
    md={6}>`。这之所以有效，是因为在`Item`组件中，`{...props}`是在默认值之后传递的，这意味着它们覆盖了具有相同名称的任何属性。
- en: See also
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid`演示：[https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid` API文档：[https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
- en: Fixed column layout
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定列布局
- en: When you use `Grid` components to build your layout, they often result in changes
    to your layout, depending on your breakpoint settings and the width of the screen.
    For example, if the user makes the browser window smaller, your layout might change
    from two columns to three. There might be times, however, when you would prefer
    a fixed number of columns, and that the width of each column changes in response
    to the screen size.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`Grid`组件构建布局时，它们通常会根据你的断点设置和屏幕宽度发生变化。例如，如果用户将浏览器窗口缩小，你的布局可能会从两列变为三列。然而，有时你可能更喜欢固定列数，并且每列的宽度会根据屏幕大小变化。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have eight `Paper` components that you want to render,
    but you also want to make sure that there are no more than four columns. Use the
    following code to do this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要渲染八个`Paper`组件，但你还想确保不超过四列。使用以下代码来完成此操作：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s what the result looks like with a pixel width of 725:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在像素宽度为725时的结果：
- en: '![](img/1336ef23-2c32-431e-b075-ee5d19fdf17d.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1336ef23-2c32-431e-b075-ee5d19fdf17d.png)'
- en: 'Here''s what the result looks like with a pixel width of 350:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在像素宽度为350时的结果：
- en: '![](img/a441903d-bb1f-43b2-ab95-e591f9d05dcd.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a441903d-bb1f-43b2-ab95-e591f9d05dcd.png)'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you want a fixed number of columns, you should only specify the `xs` breakpoint
    property. In this example, `3` is 25% of the screen width – or 4 columns. This
    will never change because `xs` is the smallest breakpoint there is. Anything larger
    is applied to `xs` as well, unless you specify a larger breakpoint.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要固定列数，你应该只指定`xs`断点属性。在这个例子中，`3`是屏幕宽度的25%——或者4列。这永远不会改变，因为`xs`是最小的断点。任何更大的断点都会应用到`xs`上，除非你指定更大的断点。
- en: 'Let''s say that you want two columns. You can set the `xs` value to `6` as
    follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要两列。你可以将`xs`值设置为`6`，如下所示：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s what the result looks like at a pixel screen width of 960:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在像素屏幕宽度为960时的结果：
- en: '![](img/c1b1ba9a-072d-49a2-ae51-55260c5a6523.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1b1ba9a-072d-49a2-ae51-55260c5a6523.png)'
- en: Because you've set the `xs` value to `6` (50%), these `Grid` items will only
    ever use two columns. The items themselves will change their width to accommodate
    the screen width, rather than changing the number of items per row.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你已经将`xs`值设置为`6`（50%），这些`Grid`组件将始终只使用两列。项目本身将改变其宽度以适应屏幕宽度，而不是改变每行的项目数。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can combine different widths in a fixed way. For example, you could have
    header and footer `Grid` items that use a full-width layout, while the `Grid`
    items in between use two columns:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以固定方式组合不同的宽度。例如，你可以有使用全宽布局的页眉和页脚`Grid`组件，而中间的`Grid`组件使用两列：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first and last `Grid` components have an `xs` value of `12` (100%), while
    the other `Grid` items have `xs` values of `6` (50%) for a two-column layout.
    Here''s what the result looks like at a pixel width of 725:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行和最后一行的`Grid`组件具有`xs`值为`12`（100%），而其他`Grid`组件的`xs`值为`6`（50%），以实现两列布局。以下是在像素宽度为725时的结果：
- en: '![](img/aa8f6e9e-1b0c-44a4-8bcb-56ca6b6ef0d8.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa8f6e9e-1b0c-44a4-8bcb-56ca6b6ef0d8.png)'
- en: See also
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid`演示：[https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid` API文档：[https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
- en: Changing column direction
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变列方向
- en: When using a fixed number of columns for your layout, content flows from left
    to right. The first grid item goes in the first column, the second item in the
    second column, and so on. There could be times when you need better control over
    which grid items go into which columns.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用固定列数进行布局时，内容从左到右流动。第一个网格项位于第一列，第二个项位于第二列，依此类推。有时你可能需要更好地控制哪些网格项进入哪些列。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have a four-column layout, but you want the first and second
    items to go in the first column, the third and fourth items in the second, and
    so on. This involves using nested `Grid` containers, and changing the `direction`
    property, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个四列布局，但你希望第一和第二项位于第一列，第三和第四项位于第二列，依此类推。这涉及到使用嵌套的 `Grid` 容器，并更改 `direction`
    属性，如下所示：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here''s what the result looks like at a pixel width of 725:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在像素宽度为 725 时的结果如下：
- en: '![](img/6ca3a21a-b31e-4078-8d8d-f5da126ce7a9.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ca3a21a-b31e-4078-8d8d-f5da126ce7a9.png)'
- en: Instead of values flowing from left to right, you have complete control over
    which column the item is placed in.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与从左到右流动的值不同，你可以完全控制项目放置在哪个列中。
- en: You might have noticed that the font looks different, compared to other examples
    in this chapter. This is because of the `Typography` component used to style the
    text and apply Material-UI theme styles. Most Material-UI components that display
    text don't require you to use `Typography`, but `Paper` does.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，与本章中的其他示例相比，字体看起来不同。这是因为使用了 `Typography` 组件来设置文本样式并应用 Material-UI 主题样式。大多数
    Material-UI 组件在显示文本时不需要你使用 `Typography`，但 `Paper` 组件需要。
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There''s a lot going on with this example, so let''s start by taking a look
    at just the first item in the `Grid` code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例中有很多内容，所以让我们先看看 `Grid` 代码中的第一个项目：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Grid` item is using an `xs` value of `4`, to create the four-column layout.
    Essentially, these items are columns. Next, you have a nested `Grid` `container`.
    This `container` has a `direction` property value of `column`. This is where you
    can place the `Grid` items that belong in this `column`, and they'll flow from
    top to bottom, instead of from left to right. Each column in this grid follows
    this pattern.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`Grid` 项目使用 `xs` 值为 `4` 来创建四列布局。本质上，这些项目是列。接下来，你有一个嵌套的 `Grid` 容器。这个 `container`
    的 `direction` 属性值为 `column`。这是你可以放置属于此列的 `Grid` 项的地方，并且它们将从上到下流动，而不是从左到右。这个网格中的每一列都遵循这个模式。'
- en: There's more...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There might be times when hiding the rightmost column makes more sense than
    trying to accommodate it with the screen width. You can use the `Hidden` component
    for this. It''s already imported in the example, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，隐藏最右侧的列比尝试适应屏幕宽度更有意义。你可以使用 `Hidden` 组件来实现这一点。它已经在示例中导入，如下所示：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To use it, you wrap the last `column` with it. For example, here''s what the
    last `column` looks like now:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，你需要用它包裹最后一个 `column`。例如，以下是最后一个 `column` 现在的样子：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you want to hide this `column` at a certain breakpoint, you can wrap the
    `column` with `Hidden`, like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在某个断点隐藏这个 `column`，你可以用 `Hidden` 包裹这个 `column`，如下所示：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `smDown` property tells the `Hidden` component to hide its children when
    the `sm` breakpoint or lower is reached. Here''s what the result looks like at
    a pixel width of 1000:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`smDown` 属性指示 `Hidden` 组件在达到 `sm` 断点或更低时隐藏其子元素。以下是在像素宽度为 1000 时的结果：'
- en: '![](img/ac6cfb19-c2f1-415b-b07a-545dd145cce0.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac6cfb19-c2f1-415b-b07a-545dd145cce0.png)'
- en: 'The last column is displayed because the `sm` breakpoint is smaller than the
    screen size. Here''s the result at a pixel screen width of 550, without the last
    column displayed:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一列被显示出来，因为 `sm` 断点比屏幕尺寸小。以下是在像素屏幕宽度为 550，且不显示最后一列的结果：
- en: '![](img/0d81b5f0-af8b-4bfd-88eb-9833b391ec2b.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d81b5f0-af8b-4bfd-88eb-9833b391ec2b.png)'
- en: See also
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid` 示例：[https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid` API 文档：[https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
- en: '`Hidden` API documentation: [https://material-ui.com/api/hidden/](https://material-ui.com/api/hidden/)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hidden` API 文档：[https://material-ui.com/api/hidden/](https://material-ui.com/api/hidden/)'
