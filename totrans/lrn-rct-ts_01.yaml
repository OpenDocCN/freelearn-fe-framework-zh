- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook has become an incredibly popular app. As its popularity has grown,
    so has the demand for new features. **React** is Facebook’s answer to helping
    more people work on the code base and deliver features more quickly. React has
    worked so well for Facebook that Meta eventually made it open source. Today, React is
    a mature library for building component-based frontends that is extremely popular
    and has a massive community and ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeScript** is also a popular, mature library maintained by another big
    company, Microsoft. It allows users to add a rich type system to their JavaScript
    code, helping them be more productive, particularly in large code bases.'
  prefs: []
  type: TYPE_NORMAL
- en: This book will teach you how to use both of these awesome libraries to build
    robust frontends that are easy to maintain. The first two chapters in the book
    will introduce React and TypeScript separately. You’ll then learn how to use React
    and TypeScript together to compose robust components with strong typing. The book
    covers key topics you’ll need to build a web frontend, such as styling, forms,
    and data fetching.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce React and understand the benefits it brings.
    We will then build a simple React component, learning about the JSX syntax and
    component props. After that, we will learn how to make a component interactive
    using component state and events. Along the way, we will also learn how to structure
    code in JavaScript modules.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this first chapter, you’ll be able to create simple React components
    and will be ready to learn how to strongly type them with TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the benefits of React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding imports and exports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use the following tools in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser**: A modern browser such as Google Chrome.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Babel REPL**: We’ll use this online tool to briefly explore JSX. It can be
    found at  [https://babeljs.io/repl](https://babeljs.io/repl).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CodeSandbox**: We’ll use this online tool to build a React component. This
    can be found at [https://codesandbox.io/](https://codesandbox.io/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter1/](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter1/).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the benefits of React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start creating our first React component, in this section, we will
    understand what React is and explore some of its benefits.
  prefs: []
  type: TYPE_NORMAL
- en: React is incredibly popular. We have already mentioned that Meta uses React
    for Facebook, but many other famous companies use it, too, such as Netflix, Uber,
    and Airbnb. React’s popularity has resulted in a huge ecosystem surrounding it
    that includes great tools, popular libraries, and many experienced developers.
  prefs: []
  type: TYPE_NORMAL
- en: A reason for React’s popularity is that it is simple. This is because it focuses
    on doing one thing very well – providing a powerful mechanism for building UI
    components. Components are pieces of the UI that can be composed together to create
    a frontend. Furthermore, components can be reusable so that they can be used on
    different screens or even in other apps.
  prefs: []
  type: TYPE_NORMAL
- en: React’s narrow focus means it can be incorporated into an existing app, even
    if it uses a different framework. This is because it doesn’t need to take over
    the whole app to run; it is happy to run as part of an app’s frontend.
  prefs: []
  type: TYPE_NORMAL
- en: React components are displayed performantly using a **virtual DOM** (**Document
    Object Model**). You may be familiar with the real DOM – it provides the structure
    for a web page. However, changes to the real DOM can be costly, leading to performance
    problems in an interactive app. React solves this performance problem by using
    an in-memory representation of the real DOM called a virtual DOM. Before React
    changes the real DOM, it produces a new virtual DOM and compares it against the
    current virtual DOM to calculate the minimum amount of changes required to the
    real DOM. The real DOM is then updated with those minimum changes.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that Meta uses React for Facebook is a major benefit because it ensures
    that it is of the highest quality – React breaking Facebook is not good for Meta!
    It also means a lot of thought and care goes into ensuring new versions of React
    are cheap to adopt, which helps reduce the maintenance costs of an app.
  prefs: []
  type: TYPE_NORMAL
- en: React’s simplicity means it is easy and quick to learn. There are many great
    learning resources, such as this book. There is also a range of tools that make
    it very easy to scaffold a React app – one such tool is called **Create React
    App**, which we will learn about in [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting up React* *and TypeScript*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are starting to understand React, let’s dig deeper in the next section
    to understand how a React component defines what to display.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JSX** is the syntax we use in a React component to define what the component
    should display. JSX stands for **JavaScript XML**, which starts to give us a clue
    as to what it is. We will start to learn about JSX in this section and write some
    JSX in an online playground.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is a React component with its JSX highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can see that JSX looks a bit like HTML. However, it isn’t HTML because an
    HTML `div` element doesn’t contain a `className` attribute, and there is no such
    element name as `Alert`. The JSX is also embedded directly within a JavaScript
    function, which is a little strange because a `script` element is normally used
    to place JavaScript inside HTML.
  prefs: []
  type: TYPE_NORMAL
- en: JSX is a JavaScript syntax extension. This means that it doesn’t execute directly
    in the browser – it needs to be transpiled to JavaScript first. A popular tool
    that can transpile JSX is called Babel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to write your first piece of JSX in the Babel
    playground:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a browser, go to [https://babeljs.io/repl](https://babeljs.io/repl), and
    enter the following JSX in the left-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following appears in the right-hand pane, which is what our JSX has compiled
    down to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that it compiles down to a `React.createElement` function call,
    which has three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The element type can be an HTML element name (such as `"span"`), a React component
    type, or a React fragment type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An object containing the properties to be applied to the element. Here, `null`
    is passed because there are no properties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content of the element. Note that the element’s content is often referred
    to as **children** in React.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The right-hand panel may also contain a `"use strict"` statement at the top
    to specify that the JavaScript will be run in **strict mode**. Strict mode is
    where the JavaScript engine throws an error when it encounters problematic code
    rather than ignoring it. See the following link for more information on the strict
    mode in JavaScript: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).'
  prefs: []
  type: TYPE_NORMAL
- en: You may also see `/*#__PURE__*/` comments in the right-hand panel. These comments
    help bundlers such as webpack remove redundant code in the bundling process. We
    will learn about webpack in [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072), *Setting
    up React* *and TypeScript*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s expand our example by putting a `div` element around the `span` element,
    as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This now transpiles to two function calls to `React.createElement`, with `span` being
    passed in as a child to `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can also see a `className` property, with the `"title"` value passed with
    the `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that React uses a `className` attribute rather than `class` for
    CSS class references. This is because `class` is a keyword in JavaScript, and
    using that would cause an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do something really interesting now. Let’s embed some JavaScript within
    the JSX. So, make the following highlighted changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We declared a `title` JavaScript variable, assigned it `"Oh no!"`, and embedded
    it within the `span` element.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `title` variable is placed in curly braces inside the element.
    Any piece of JavaScript can be embedded within JSX by surrounding it in curly
    braces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our code now transpiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To further illustrate the use of JavaScript in JSX, let’s use a JavaScript
    ternary expression inside the `span` element. Add the following ternary expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A ternary expression is an inline conditional statement in JavaScript. The
    expression starts with the condition followed by `?`, then what returns when the
    condition is true followed by `:`, and finally, what returns when the condition
    is false. For more information on ternary expressions, see the following link:
    [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We see that the nested call to `React.createElement` uses the ternary expression
    as the child of `span`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This completes our exploration of JSX in the Babel playground.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, JSX can be thought of as a mix of HTML and JavaScript to specify
    the output of a React component. JSX needs to be transpiled into JavaScript using
    a tool such as Babel. For more information on JSX, see the following link: [https://reactjs.org/docs/introducing-jsx.html](https://reactjs.org/docs/introducing-jsx.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand a little more about JSX, we will create our first React
    component in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a React project using an online tool called
    CodeSandbox. We will take time to understand the entry point of a React app and
    how components are structured in a project before creating a basic React component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CodeSandbox project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The great thing about CodeSandbox is that we can create a React project at the
    click of a button in a web browser and then focus on how to create a React component.
    Note that we will learn how to create React projects in a code editor on your
    local computer in [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072), *Setting up
    React and TypeScript*. Our focus is learning about the React fundamentals in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let’s carry out the following steps to create a React component in
    CodeSandbox:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://codesandbox.io/](https://codesandbox.io/) in a browser and click
    the **Create Sandbox** button found on the right hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can create a CodeSandbox account if you want, but you can also create a
    React project as an anonymous user.
  prefs: []
  type: TYPE_NORMAL
- en: A list of project templates appears. Click the **React** template (don’t choose
    the **React TypeScript** template because we are focusing solely on React in this
    chapter).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a few seconds, a React project will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – React project in CodeSandbox](img/B19051_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – React project in CodeSandbox
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main panels in the CodeSandbox editor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Files** panel: This is usually on the left-hand side and contains all
    the files in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Code editor** panel: This is usually the middle panel, and it contains
    the code. This is where we will write our React component code. Clicking a file
    in the **Files** panel will open it in the code editor panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Browser** panel: This displays a preview of the running app and is usually
    on the right-hand side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have created a React project, we will take some time to understand
    the app’s entry point.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the React entry point
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The entry point of this React app is in the `index.js` file. Open this file
    by clicking on it in the **Files** panel and inspect its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'There is quite a lot going on in this code. Here’s an explanation of each line
    of the code (don’t worry if you don’t fully understand it all at this point in
    the book, you will soon!):'
  prefs: []
  type: TYPE_NORMAL
- en: The first statement imports a `StrictMode` component from React. This means
    that the `StrictMode` component from the `react` library will be used later in
    the code in this file. We will cover import statements in detail in the next section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second statement imports a `createRoot` function from React.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third import statement imports an `App` component from the `App.js` file
    in our project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `rootElement` variable is then assigned to a DOM element with an `id` of `"root"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React’s `createRoot` function takes in a DOM element and returns a variable
    that can be used to display a React component tree. The `rootElement` variable
    is then passed into `createRoot`, and the result is assigned to a `root` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `render` function is called on the `root` variable, passing in JSX containing
    the `StrictMode` component with the `App` component nested inside. The `render`
    function displays the React components on the page. This process is often referred
    to as **rendering**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `StrictMode` component will check the content inside it for potential problems
    and report them in the browser’s console. This is often referred to as React’s
    strict mode. The strict mode in React is different from the strict mode in JavaScript,
    but their purpose of eliminating bad code is the same.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the code in `index.js` renders the `App` component in React’s strict
    mode in a DOM element with an `id` of `"root"`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take some time to understand the React component tree and the
    `App` component that is referenced in `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the React component tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A React app is structured in a tree of components and DOM elements. The root
    component is the component at the top of the tree. In our CodeSandbox project,
    the root component is the `StrictMode` component.
  prefs: []
  type: TYPE_NORMAL
- en: React components can be nested inside another React component. The `App` component
    is nested inside the `StrictMode` component in the CodeSandbox project. This is
    a powerful way of putting components together because any component can be placed
    inside `StrictMode` – it doesn’t necessarily need to be `App`.
  prefs: []
  type: TYPE_NORMAL
- en: 'React components can reference one or more other components, and even DOM elements,
    in their JSX. Open the `App.js` file and observe that it references DOM elements
    `div`, `h1`, and `h2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The component tree in the CodeSandbox project is constructed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In summary, a React app is structured in a tree of React components and DOM
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Next, it is time to create a React component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we are going to create a component that displays an alert, which we will
    simply call `Alert`. It will consist of an icon, a heading, and a message.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'A React component name must start with a capital letter. If a component name
    starts with a lowercase letter, it is treated as a DOM element and won’t render
    properly. See the following link in the React documentation for more information:
    [https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized](https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create the component in the CodeSandbox project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src` folder and choose **Create File** in the menu that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cursor is placed in a new file, ready for you to enter the component filename.
    Enter `Alert.js` as the filename and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The filename for component files isn’t important to React or the React transpiler.
    It is common practice to use the same name as the component, either in Pascal
    or snake case. However, the file extension must be `.js` or `.jsx` for React transpilers
    to recognize these as React components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Alert.js` file automatically opens in the code editor panel. Enter the
    following code into this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that the code snippets are available online to copy. The link to the
    preceding snippet can be found at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section3-Creating-a-component/Alert.js](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section3-Creating-a-component/Alert.js).
  prefs: []
  type: TYPE_NORMAL
- en: 'The component renders the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: A warning icon (note that this is a warning emoji).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A title, *Oh no!*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A message, *Something isn’t quite* *right …*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `role` and `aria-label` attributes have been added to the `span` element
    containing the warning icons to help screen readers understand that this is an
    image with a title of warning.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `img` role, see [https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/img_role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/img_role).
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `aria-label` attribute, see [https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, a React component can be implemented using arrow function syntax.
    The following code snippet is an arrow syntax version of the `Alert` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There aren’t any significant differences between arrow functions and normal
    functions in the context of React function components. So, it is down to personal
    preference which one you choose. This book generally uses regular function syntax
    because it has fewer characters to type, however, if you wish, you can find more
    information on JavaScript arrow functions here: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations, you have created your first React component. Let’s quickly
    recap the key points in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: The entry point in a React app is usually `index.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React’s `createRoot` function allows a React component tree to be rendered inside
    a DOM element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A React component is a JavaScript function whose name starts with a capital
    letter. The function returns what should be displayed using JSX syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may have noticed that the alert component doesn’t appear in the `import`
    and `export` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding imports and exports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`import` and `export` statements allow JavaScript to be structured into modules.'
  prefs: []
  type: TYPE_NORMAL
- en: This section will start by covering why JavaScript modules are important and
    then how to define and use them using `import` and `export` statements. We will
    then use that knowledge to add the alert component to the React component tree
    in the CodeSandbox project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the importance of modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, JavaScript code executes in what is called the **global scope**.
    This means code from one file is automatically available in another file. Unfortunately,
    this means that the functions we implement can overwrite functions in other files
    if the names are the same. You can imagine how this structure quickly becomes
    challenging and risky to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, JavaScript has a modules feature. A module’s functions and variables
    are isolated, so functions with the same name in different modules won’t collide.
    This is a much safer way to structure code and is common practice when structuring
    React apps.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about how to define modules.
  prefs: []
  type: TYPE_NORMAL
- en: Using export statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A module is a file with at least one `export` statement. An `export` statement
    references members that are available to other modules. Think of this as making
    members publically available. A member can be a function, a class, or a variable
    within the file. Members not contained within the `export` statement are private
    and not available outside the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code statement is an example of a module with its `export` statement
    highlighted. This is called a **named export statement** because the public members
    are explicitly named:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the example, the `myFunc1` and `myFunc3` functions are public, and `myFunc2`
    is private.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the `export` keyword can be added before the `function` keyword
    on the public functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We will use the `export` keyword approach in this book because it is immediately
    apparent which function is public. With the single `export` statement at the bottom
    of the file, you have to keep going to the bottom of the file to find out whether
    a function is public.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `export` statement is defined at the bottom of the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `default` keyword signifies that the export is a default `export` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second variant is where the `export` and `default` keywords are added in
    front of the member:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This book will generally use named exports rather than default exports.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about `import` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Using import statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using an `import` statement allows public members from a module to be used.
    Like an `export` statement, there are `import` statements. A default `import`
    statement can only be used to reference a default `export` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a default `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The default exported member from the `myModule.js` file is imported and named
    `myFunc1`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The name of an imported default member doesn’t necessarily need to match the
    name of the default exported member, but it is common practice to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a named `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `myFunc1` and `myFunc3` named exported members from the `myModule.js`
    file are imported.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Unlike default imports, the names of imported members must match the exported
    members.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to structure JavaScript code into modules, we will
    use this knowledge to add the alert component in the CodeSandbox project to the
    React component tree.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Alert to the App component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Going back to the `Alert` component in our CodeSandbox project, we will reference
    `Alert` in the `App` component. To do this, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to export the `Alert` component. Open `Alert.js` and add the
    `export` keyword before the `Alert` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is common practice to have each React component in a separate file and, therefore,
    a separate module. This prevents files from becoming too large and helps the readability
    of the code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can import `Alert` into the `App.js` file. Open `App.js` and add the
    highlighted `import` statement at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now reference `Alert` in the `App` component’s JSX. Add the highlighted
    line inside the `div` element, replacing its existing content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The component will display the following in the **Browser** panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The alert component in the Browser panel](img/B19051_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The alert component in the Browser panel
  prefs: []
  type: TYPE_NORMAL
- en: Nice! If you have noticed that the alert component isn’t styled nicely, don’t
    worry – we will learn how to style it in [*Chapter 4*](B19051_04.xhtml#_idTextAnchor100),
    *Approaches to Styling* *React Frontends*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a recap of a couple of key points in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: React apps are structured using JavaScript modules to help the code base be
    maintainable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally, a React component is structured in its own module and so needs to
    be exported and imported before being referenced in another React component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will learn how to make the alert component a little more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Using props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, the alert component is pretty inflexible. For example, the alert
    consumer can’t change the heading or the message. At the moment, the heading or
    the message needs to be changed within `Alert` itself. **Props** solve this problem,
    and we will learn about them in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Props is short for *properties*. The React community often refers to them as
    props, so we will do so in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`props` is an optional parameter that is passed into a React component. This
    parameter is an object containing the properties of our choice. The following
    code snippet shows a `props` parameter in a `ContactDetails` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The `props` parameter contains the `name` and `email` properties in the preceding
    code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The parameter doesn’t have to be named `props`, but it is common practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Props are passed into a component in JSX as attributes. The prop names must
    match what is defined in the component. Here is an example of passing props into
    the preceding `ContactDetails` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: So, props make the component output flexible. Consumers of the component can
    pass appropriate props into the component to get the desired output.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add some props to the alert component we have been working on.
  prefs: []
  type: TYPE_NORMAL
- en: Adding props to the alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the CodeSandbox project, carry out the following steps to add props to the
    alert component to make it more flexible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `alert.js` and add a `props` parameter to the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will define the following properties for the alert:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`type`: This will either be `"information"` or `"warning"` and will determine
    the icon in the alert.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`heading`: This will determine the heading of the alert.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`children`: This will determine the content of the alert. The `children` prop
    is actually a special prop used for the main content of components.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update the alert component’s JSX to use the props as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the `App` component isn’t passing any props to `Alert` yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The alert component only showing the information icon](img/B19051_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – The alert component only showing the information icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.js` and update the `Alert` component in the JSX to pass in props
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that the `Alert` component is no longer self-closing so that `Everything
    is really good!` can be passed into its content. The content is passed to the
    `children` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Browser** panel now displays the configured alert component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The configured alert component in the browser panel](img/B19051_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The configured alert component in the browser panel
  prefs: []
  type: TYPE_NORMAL
- en: We can clean up the alert component code a little by destructuring the `props`
    parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Destructuring is a JavaScript feature that allows properties to be unpacked
    from an object. For more information, see the following link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Alert.js` again, destructure the `function` parameter, and use the unpacked
    props as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This is a little cleaner because we use the unpacked props directly rather than
    having to reference them through the `props` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want the `type` prop to default to `"information"`. Define this default
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That completes the implementation of the props in the alert component for now.
    Here’s a quick recap on props:'
  prefs: []
  type: TYPE_NORMAL
- en: Props allow a component to be configured by the consuming JSX and are passed
    as JSX attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Props are received in the component definition in an object parameter and can
    then be used in its JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will continue to make the alert component more sophisticated by allowing
    it to be closed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Using state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The component **state** is a special variable containing information about the
    component’s current situation. For example, a component may be in a *loading*
    state or an *error* state.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll learn about state and use it within our alert component
    in the CodeSandbox project. We will use state to allow the alert to be closed
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There isn’t a predefined list of states; we define what’s appropriate for a
    given component. Some components won’t even need any state; for example, the `App`
    and `Alert` components in our CodeSandbox project haven’t required state for the
    requirements so far.
  prefs: []
  type: TYPE_NORMAL
- en: However, state is a key part of making a component interactive. When a user
    interacts with a component, the component’s output may need to change. For example,
    clicking on a component may need to make an element in the component invisible.
    A change to a component state causes the component to refresh, more often referred
    to as **re-rendering**. So, a user could click on a component causing a state
    change, resulting in an element in the component becoming invisible.
  prefs: []
  type: TYPE_NORMAL
- en: State is defined using a `useState` function from React. The `useState` function
    is one of React’s **hooks**. React hooks were introduced to React in version 16.8
    and give function components powerful capabilities such as state. There is a whole
    chapter on React hooks in [*Chapter 4*](B19051_04.xhtml#_idTextAnchor100), *Using*
    *React Hooks*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for `useState` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the key points:'
  prefs: []
  type: TYPE_NORMAL
- en: The initial state value is passed into `useState`. If no value is passed, it
    will initially be `undefined`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useState` returns a tuple containing the current state value and a function
    to update the state value. The tuple is destructured in the preceding code snippet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The state variable name is `state` in the preceding code snippet, but we can
    choose any meaningful name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also choose the state setter function name, but it is common practice
    to use the same name as the state variable preceded by `set`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multiple states can be defined by defining multiple instances of `useState`.
    For example, here are definitions for loading and error states:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we will implement state in the alert component to determine whether it
    is visible or not.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a visible state in the alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will begin by implementing a feature in the alert component that allows the
    user to close it. A key part of that feature is controlling the alert’s visibility,
    which we will do with a `visible` state. This state will either be `true` or `false`
    and it will initially be set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to implement a `visible` state in `Alert`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Alert.js` in the CodeSandbox project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `import` statement at the top of the file to import the `useState`
    hook from React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `visible` state as follows in the component definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the state declaration, add a condition that returns `null` if the `visible`
    state is `false`. This means nothing will be rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component will render in the `visible` state is `true`. Try changing the
    initial state value to `false`, and you will see it disappear in the **Browser**
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the alert component is making use of the `visible` state’s value
    by not rendering anything if it is `false`. However, the component isn’t updating
    the `visible` state yet – that is, `setVisible` is unused at the moment. We will
    update the `visible` state after implementing a `close` button, which we will
    do next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a close button to Alert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add a close button to the alert component to allow the user to close
    it. We will make this configurable so that the alert consumer can choose whether
    the close button is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening `Alert.js` and add a `closable` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The consumer of the alert component will use the `closable` prop to specify
    whether the close button appears.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a close button between the heading and content as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that the `span` element that contains the close icon is given an `"img"`
    role and a `"Close"` label to help screen readers. Likewise, the button is also
    given a `"Close"` label to help screen readers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `close` button appears in the alert component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The close button in the alert component](img/B19051_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – The close button in the alert component
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, the close button will always render rather than just when the
    `closable` prop is `true`. We can use a JavaScript logical `AND` short circuit
    expression (represented by the `&&` characters) to render the `close` button conditionally.
    To do this, make the following highlighted changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If `closable` is a `closable` is **truthy**, the button will be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following link for more information about logical `AND` short-circuit
    expressions: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND).'
  prefs: []
  type: TYPE_NORMAL
- en: See the following link for JavaScript’s falsy values, [https://developer.mozilla.org/en-US/docs/Glossary/Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy),
    and [https://developer.mozilla.org/en-US/docs/Glossary/Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy)
    for truthy values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.js` and pass the `closable` prop into `Alert`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that a value hasn’t been explicitly defined on the `closable` attribute.
    We could have passed the value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: However, there is no need to pass the value on a boolean attribute. If the boolean
    attribute is present on an element, its value is automatically `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the `closable` attribute is specified, the `close` button appears in the
    alert component as it did before in *Figure 1**.5*. But when the `closable` attribute
    isn’t specified, the close button doesn’t appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – The close button not in the alert component when closable is
    not specified](img/B19051_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – The close button not in the alert component when closable is not
    specified
  prefs: []
  type: TYPE_NORMAL
- en: Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick recap of what we have learned so far about React state:'
  prefs: []
  type: TYPE_NORMAL
- en: State is defined using React’s `useState` hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial value of the state can be passed into the `useState` hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useState` returns a state variable that can be used to render elements conditionally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useState` also returns a function that can be used to update the value of
    the state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may have noticed that the `close` button doesn’t actually close the alert.
    In the next section, we will rectify this as we learn about events in React.
  prefs: []
  type: TYPE_NORMAL
- en: Using events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Events** are another key part of allowing a component to be interactive.
    In this section, we will understand what React events are and how to use events
    on DOM elements. We will also learn how to create our own React events.'
  prefs: []
  type: TYPE_NORMAL
- en: We will continue to expand the alert component’s functionality as we learn about
    events. We will start by finishing the close button implementation before creating
    an event for when the alert has been closed.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browser events happen as the user interacts with DOM elements. For example,
    clicking a button raises a `click` event from that button.
  prefs: []
  type: TYPE_NORMAL
- en: Logic can be executed when an event is raised. For example, an alert can be
    closed when its close button is clicked. A function called an **event handler**
    (sometimes referred to as an **event listener**) can be registered for an element
    event that contains the logic to execute when that event happens.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following link for more information on browser events: [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events).'
  prefs: []
  type: TYPE_NORMAL
- en: Events in React events are very similar to browser native events. In fact, React
    events are a wrapper on top of the browser’s native events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Event handlers in React are generally registered to an element in JSX using
    an attribute. The following code snippet registers a `click` event handler called
    `handleClick` on a `button` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will return to our alert component and implement a `click` handler
    on the close button that closes the alert.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a close button click handler in the alert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the moment, our alert component contains a close button, but nothing happens
    when it is clicked. The alert also contains a `visible` state that dictates whether
    the alert is shown. So, to finish the close button implementation, we need to
    add an event handler when it is clicked that sets the `visible` state to `false`.
    Carry out the following steps to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Alert.js` and register a `click` handler on the close button as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have registered a `click` handler called `handleCloseClick` on the close
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to implement the `handleCloseClick` function in the component.
    Create an empty function to start with, just above the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This may seem a little strange because we have put the `handleCloseClick` function
    inside another function, `Alert`. The handler needs to be inside the `Alert` function;
    otherwise, the alert component won’t have access to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrow function syntax can be used for event handlers if preferred. An arrow
    function version of the handler is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Event handlers can also be added directly to the element in JSX as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: In the alert component, we will stick to the named `handleCloseClick` event
    handler function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use the `visible` state setter function to make the `visible` state
    `false` in the event handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you click the close button in the **Browser** panel, the alert disappears.
    Nice!
  prefs: []
  type: TYPE_NORMAL
- en: 'The refresh icon can be clicked to make the component reappear in the **Browser**
    panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The Browser panel refresh option](img/B19051_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – The Browser panel refresh option
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will extend the close button to raise an event when the alert closes.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an alert close event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now create a custom event in the alert component. The event will be
    raised when the alert is closed so that consumers can execute logic when this
    happens.
  prefs: []
  type: TYPE_NORMAL
- en: A custom event in a component is implemented by implementing a prop. The prop
    is a function that is called to raise the event.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement an alert close event, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening `Alert.js` and add a prop for the event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have called the prop `onClose`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is common practice to start an event prop name with `on`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `handleCloseClick` event handler, raise the close event after the `visible`
    state is set to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we only invoke `onClose` if it is defined and passed as a prop by
    the consumer. This means that we aren’t forcing the consumer to handle this event.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now handle when an alert is closed in the `App` component. Open `App.js`
    and add the following event handler to `Alert` in the JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have used an inline event handler this time.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Browser** panel, if you click the close button and look at the console,
    you will see that **closed** has been output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The Browser panel closed console output](img/B19051_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – The Browser panel closed console output
  prefs: []
  type: TYPE_NORMAL
- en: That completes the close event and the implementation of the alert for this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what we have learned about React events:'
  prefs: []
  type: TYPE_NORMAL
- en: Events, along with state, allow a component to be interactive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event handlers are functions that are registered on elements in JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A custom event can be created by implementing a function prop and invoking it
    to raise the event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The component we created in this chapter is a function component. You can also
    create components using classes. For example, a class component version of the
    alert component is at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Class-component/Alert.js](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Class-component/Alert.js).
    However, function components are dominant in the React community because of the
    following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, they require less code to implement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logic inside the component can be more easily reused
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation is very different
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For these reasons, we will focus solely on function components in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will summarize what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now understand that React is a popular library for creating component-based
    frontends. In this chapter, we created an alert component using React.
  prefs: []
  type: TYPE_NORMAL
- en: Component output is declared using a mix of HTML and JavaScript called JSX.
    JSX needs to be transpiled into JavaScript before it can be executed in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Props can be passed into a component as JSX attributes. This allows consumers
    of the component to control its output and behavior. A component receives props
    as an object parameter. The JSX attribute names form the object parameter property
    names. We implemented a range of props in this chapter in the alert component.
  prefs: []
  type: TYPE_NORMAL
- en: Events can be handled to execute logic when the user interacts with the component.
    We created an event handler for the close button click event in the alert component.
  prefs: []
  type: TYPE_NORMAL
- en: State can be used to re-render a component and update its output. State is defined
    using the `useState` hook. State is often updated in event handlers. We have created
    state for whether the alert is visible.
  prefs: []
  type: TYPE_NORMAL
- en: Custom events can be implemented as a function prop. This allows consumers of
    the component to execute logic as the user interacts with it. We implemented a
    close event on the alert component.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce ourselves to TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to reinforce what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is wrong with the following component definition?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A component with a prop is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The value of the prop isn’t output though. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: 'Component props are passed into a component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The component is then defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: The name `Fred` isn’t output though. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: 'What is wrong with how the `click` event is handled in the following JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What is the initial value of the `loading` state defined here?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What is wrong with how the state is set in the following component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following component implements an optional `Agree` event. What is wrong
    with this implementation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the answers to the questions on what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem with the component definition is that its name is lowercase. React
    functions must be named with an uppercase first character:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The problem is that the `name` variable inside the `div` element isn’t enclosed
    in curly brackets. So, the word `name` will be output rather than the value of
    the `name` prop. Here’s the corrected version of the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The problem is that a `name` prop is passed rather than `firstName`. Here’s
    the corrected JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The problem is that a `click` prop is passed rather than `onClick`. Here’s
    the corrected JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The initial value of the `loading` state is `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The state isn’t updated using the state setter function. Here’s the corrected
    version of the state being set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The problem is that clicking the button will cause an error if `onAgree` isn’t
    passed because it will be `undefined`. Here’s the corrected version of the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
