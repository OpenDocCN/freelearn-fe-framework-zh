- en: Setting Up a Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to being a new syntax for OCaml, Reason is a toolchain that makes
    it easy to get started. In this chapter, we''ll do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about the Reason toolchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure our editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `bsb` to start a pure Reason project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about `bsconfig.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write an example pure Reason application that manipulates the DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `bsb` to start a ReasonReact project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get comfortable using `webpack` within a Reason project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To follow along, clone this book''s GitHub repository and start from this chapter''s
    directory. You''re also welcome to start from a blank project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This chapter is meant to get you comfortable with the Reason toolchain. We'll
    have separate development environments for the pure Reason project and the ReasonReact
    one. After following along, you'll be comfortable enough to tweak the development
    environment to your liking. Don't worry about messing anything up, since we'll
    start fresh in [Chapter 3](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml), *Creating
    ReasonReact Components*, from another directory.
  prefs: []
  type: TYPE_NORMAL
- en: The Reason toolchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, the Reason toolchain is essentially BuckleScript—Reason's
    partner project—and the familiar JavaScript toolchain, namely `npm` and `webpack`
    (or another JavaScript module bundler).
  prefs: []
  type: TYPE_NORMAL
- en: There's no longer a need for `babel`, since BuckleScript compiles to the ES5
    version of JavaScript. The compiled output can be configured to use either the
    CommonJS, AMD, or ES module formats. Reason's powerful static-type system replaces
    the need for Flow and ESlint. Additionally, Reason's editor plugins all come with
    `refmt`, which is essentially `prettier` for Reason.
  prefs: []
  type: TYPE_NORMAL
- en: Installing BuckleScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'BuckleScript is a compiler that takes the OCaml AST and emits clean, readable,
    and performant JavaScript. It can be installed via `npm`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing `bs-platform` provides a binary called `bsb`, which is BuckleScript's
    build system.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, the Reason toolchain will make it much easier to target native
    platforms as well as JavaScript. Currently, Reason compiles to native by using
    a fork of `bsb`, called `bsb-native`.
  prefs: []
  type: TYPE_NORMAL
- en: Editor configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reason supports a variety of editors, including VSCode, Sublime Text, Atom,
    Vim, and Emacs. VSCode is the recommended editor. To configure VSCode, simply
    install the `reason-vscode` extension. That's it!
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for editor-specific instructions.
  prefs: []
  type: TYPE_NORMAL
- en: The Reason editor support documentation can be found at [https://reasonml.github.io/docs/editor-plugins.](https://reasonml.github.io/docs/editor-plugins)
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a pure Reason project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `bsb` binary includes a project generator. We''ll use it to create a pure
    Reason project using the `basic-reason` theme. Run `bsb -themes` to see all available
    project templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since BuckleScript works with both OCaml and Reason, some themes are only for
    OCaml projects. That being said, feel free to mix OCaml's `.ml` files with Reason's
    `.re` files within any BuckleScript project.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll focus on using the `basic-reason` and `react` templates.
    If you're curious, the `react-lite` theme is like the `react` one, except `webpack`
    is replaced with a simpler, faster, and more reliable module bundler that is intended
    only for development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create a pure Reason project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we open the project in our editor, we see the following project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Overall, there isn''t much here, which is kind of refreshing coming from JavaScript.
    In `node_modules`, we see `bs-platform` along with some binaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bsb`: The build system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bsc`: The compiler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bsrefmt`: This is essentially JavaScript''s `prettier`, but for Reason'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we'll soon see, the `bsb` binary is used within `npm` scripts. This `bsc` binary
    is rarely used directly. The `bsrefmt` binary is used by editor plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Demo.re`, we see a simple log message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`package.json` looks somewhat familiar. The `scripts` field shows our currently
    available `npm` scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run `npm run build` to compile `Demo.re` to JavaScript. By default, the compiled
    output appears right beside the source file as `Demo.bs.js`. How does it know
    which files to compile, and where to output them? That's where `bsconfig.json`
    comes in.
  prefs: []
  type: TYPE_NORMAL
- en: The bsconfig.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `bsconfig.json` file is a required file for all BuckleScript projects.
    Let''s explore it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll soon be changing some of these defaults to get more comfortable with
    BuckleScript''s configuration file. Let''s first add the following code to `Demo.re`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `switch` expression isn''t handling all possible cases
    of `decision`. Running `npm run build` results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The warnings field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To turn all warnings into errors, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For a complete list of warning numbers, check out [https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281](https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281) (scroll
    down a bit).
  prefs: []
  type: TYPE_NORMAL
- en: The package-specs field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `package-specs` field contains two fields: `module` and `in-source`.
  prefs: []
  type: TYPE_NORMAL
- en: The `module` field controls the JavaScript module format. The default is `commonjs`, and
    other available options include `amdjs`, `amdjs-global`, `es6`, and `es6-global`.
    The `-global` part tells BuckleScript to resolve `node_modules` to relative paths
    for browsers.
  prefs: []
  type: TYPE_NORMAL
- en: The `in-source` field controls the destination of the generated JavaScript files; `true` results
    in the generated files being placed along side source files, and `false` results
    in the generated files being placed in `lib/js`. Setting `in-source` to `false` is
    useful when using Reason within an existing JavaScript project so that the existing
    build pipeline can be used without having to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the `"es6"` module format for now, and place our compiled assets
    in `lib/js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The suffix field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `suffix` field configures the extension of the generated JavaScript files.
    It's generally best to keep the `".bs.js"` suffix since this helps `bsb` better
    track the generated artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: The sources field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'BuckleScript knew to look in the `src` directory because of the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If `subdirs` were `false`, any `.re` and `.ml` files located in subdirectories
    of `src` wouldn't be compiled.
  prefs: []
  type: TYPE_NORMAL
- en: For more information regarding `bsconfig.json`, see the following section of
    the BuckleScript documentation: [https://bucklescript.github.io/docs/build-configuration](https://bucklescript.github.io/docs/build-configuration).
  prefs: []
  type: TYPE_NORMAL
- en: Working with DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try working with the DOM in pure Reason before jumping into ReasonReact.
    We''ll write a module that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a DOM element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the `innerText` of that element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appends that element to the body of the document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create an `index.html` file in the project''s root with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `type="module"` attribute on the `script` tag. If all module dependencies
    are **ES Module** (**ESM**) compliant, and they are all available from within
    the browser, you don't need a module bundler to get started (assuming you're using
    a browser that supports ES modules).
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Greeting.re`, add the following greeting function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And in `Demo.re`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using BuckleScript's powerful interoperability features (which we will dive
    into in [Chapter 4](201d7348-8175-4caf-b4f3-285b669b9cf1.xhtml), *BuckleScript,
    Belt and Interoperability*) the preceding code binds to existing browser APIs,
    namely `document.createElement`, `innerText`, and `document.body.appendChild`,
    and then uses those bindings to create a `div` with some text that is appended
    to the body of the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `npm run build`, start a server (perhaps with `php -S localhost:3000` in
    a new console tab) at the root of the project, and then navigate to `http://localhost:3000` to
    see our newly-created DOM element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b54adea-c4aa-49c7-8222-63c1556608c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The takeaway is that having to work with the DOM in this way is really tedious.
    It''s hard to type DOM APIs due to JavaScript''s dynamic nature. For example,
    `Element.innerText` is used both to get and set an element''s `innerText`, depending
    on how it''s used, which therefore would result in two different type signatures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Luckily, we have React, which largely abstracts the DOM for us. Using React,
    we don't need to worry about typing the DOM APIs. It's nice to know that when
    we want to interact with various browser APIs, BuckleScript has the tools we need
    to get the job done. While it's certainly possible to write frontend web applications
    in pure Reason, it's a much more pleasant experience when using ReasonReact, especially
    when first getting started with Reason.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a ReasonReact project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new ReasonReact project, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After opening our text editor, we see that a couple of things have changed.
    The `package.json` file lists the relevant React and webpack dependencies. Let''s
    install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have the following webpack-related npm scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In `bsconfig.json`, we have a new field that turns on JSX for ReasonReact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a simple `webpack.config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note how the configured entry point is `"./src/Index.bs.js"`, which makes sense
    since, by default, `"in-source"` is set to `true` in `bsconfig.json`. The rest
    is just normal webpack stuff.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this project, we need to run both `bsb` and `webpack`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Since the `index.html` file is located within the `src` directory, we visit
    `http://localhost:3000/src` to see the default application.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the developer experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve seen how the toolchain works at a basic level, let''s improve
    our developer experience so that we can start our project with just one command.
    We''ll need to install a couple of dependencies, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can update our npm scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, to get `webpack-dev-server` to serve the `index.html` file on `http://localhost:3000`
    instead of `http://localhost:3000/src`, we need to install and configure `HtmlWebpackPlugin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We can remove the default `<script src="img/Index.js"></script>` tag in `src/index.html`,
    since `HTMLWebpackPlugin` will insert the script tag automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also remove the `publicPath` setting so that the default path of `"/"` will
    be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, we run `npm start` and visit `http://localhost:3000` to see the same ReasonReact
    application running.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw just how easy it is to get started with Reason. In [Chapter
    3](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml), *Creating ReasonReact Components*,
    we'll start to build a ReasonReact application that we'll use throughout this
    book. This application will help to provide context as we learn more about Reason
    semantics, BuckleScript interoperability, and ReasonReact specifics.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry if you don't yet understand everything within these generated projects.
    By the end of [Chapter 3](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml), *Creating
    ReasonReact Components*, you'll be a lot more comfortable. However, if you have
    questions along the way, please don't hesitate to reach out on Reason's Discord
    channel for real-time assistance: [https://discord.gg/reasonml](https://discord.gg/reasonml).
  prefs: []
  type: TYPE_NORMAL
- en: I hope you'll find the Reason community as welcoming and helpful as I have.
  prefs: []
  type: TYPE_NORMAL
