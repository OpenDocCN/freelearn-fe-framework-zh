["```js\nif(window.Worker){\n    let my_worker=new Worker(\"my_worker.js\")\n    ...\n}\n```", "```js\nlet my_worker=new Worker(\"my_worker.js\")\nmy_worker.onmessage=event=>{\n    // process message here\n    console.log(event.data)\n}\nmy_worker.onerror=err=>{\n    //process error here\n}\nmy_worker.postMessage(\"Hello from parent process\");\n```", "```js\nself.onmesssage=event=>{\n    console.log(event.data)\n})\nsetTimeout(()=>{\n    self.postMessage(\"Hello from the worker\")\n},3000)\n```", "```js\nimport MyWorker from \"my_worker.js?worker\"\nconst _myWorker=new MyWorker()\n_myWorker.postMessage(\"Hi there!\")\n_myWorker.onmessage=(event)=>{...}\n```", "```js\nimport WebWorker from \"../webworker/index.js?worker\"\nconst _worker = new WebWorker()                               //1\nconst service = {\n    queue:{},                                                 //2\n    request(command, payload = {}) {                          //3\n        return new Promise((resolve, reject) => {             //4\n        let message = {\n            id: crypto.randomUUID(),\n            command,\n            payload\n        }\n        service.queue[message.id]={resolve, reject}           //5\n        _worker.postMessage(message);                         //6\n        })\n    },\n    processMessage(data) {\n        let id=data.id\n        if(data.success){\n            service.queue[id].resolve(data.payload)           //7\n        }else{\n            service.queue[id].reject(data.payload)\n        }\n        delete service.queue[id];                             //8\n    }\n}\n_worker.onmessage = (event) => {\n    service.processMessage(event.data);                      //9\n}\nexport default service;                                      //10\n```", "```js\nimport testService from \"./services/test\"\nconst services=[testService]                                //1\nfunction sendRequest(id, success=false, payload={}){\n    self.postMessage({id, success, payload})                //2\n}\nself.onmessage=(event)=>{                                   //3\n    const data=event.data;\n    services.forEach(service=>{                             //4\n        if(service[data.command]){                          //5\n        service[data.command](data.payload)                 //6\n                .then(result=>{\n                    sendRequest(data.id, true, result)      //7\n                }, err=>{\n                    sendRequest(data.id, false, err)\n            })\n        }\n    })\n}\n```", "```js\nconst service={\n   test(){\n      return new Promise((resolve, reject)=>{\n         setTimeout(()=>{\n            resolve(\"Worker alive and working!\")\n         }, 3000)\n      })\n   }\n}\nexport default service;\n```", "```js\nimport webWorker from \"./services/WebWorker.js\"\nwebWorker.request(\"test\").then(data=>{...}, err=>{...})\n```", "```js\n$ npm install dexie\n```", "```js\n<script setup>\nimport webWorker from \"../services/WebWorker\"                 //1\nimport { ref } from \"vue\"\nconst _notes=ref([]),_note=ref({}),_selected=ref({})          //2\nloadNotes()\nfunction saveNote(){                                          //3\n   if(_note.value.title && _note.value.text){\n      webWorker\n         .request(\"addNote\", JSON.stringify(_note.value))\n         .then(id=>{loadNotes()},err=>{...})\n         .finally(()=>{_note.value={}})\n   }\n}\nfunction deleteNote(id){                                      //4\n   WebWorker\n      .request(\"deleteNote\", {id})\n      .finally(()=>{loadNotes()})\n}\nfunction openNote(note){_selected.value=note;}                //5\nfunction loadNotes(){                                         //6\n   webWorker\n      .request(\"getNotes\",[])\n      .then(data=>{_notes.value=data;},\n            ()=>{_notes.value=]})\n}\n</script>\n<template>\n<div>\n   <section>\n      <h3>New note</h3>\n      <input type=\"text\"\n            v-model=\"_note.title\"\n            placeholder=\"Title\">\n      <textarea v-model=\"_note.text\"\n            placeholder=\"Note text...\"></textarea>\n      <button @click=\"saveNote()\">Save</button>\n   </section>\n   <section>\n      <h3>Notes</h3>\n      <div v-for=\"n in _notes\" :key=\"n.id\">\n         <a @click=\"openNote(n)\">{{ n.title }}</a>\n         <a @click=\"deleteNote(n.id)\">[X]</a>\n      </div>\n   </section>\n   <section>\n      <h3>Selected note</h3>\n      <strong>{{ _selected.title }}</strong>\n      <p>{{ _selected.text }}</p>\n   </section>\n</div>\n</template>\n```", "```js\nimport Dexie from \"dexie\"\nconst db=new Dexie(\"Notes\")                                 //1\ndb.version(1).stores({notes: \"++id,title\"});                //2\nconst service={\naddNote(note={}){                                           //3\n  return new Promise(async (resolve, reject)=>{\n    try{\n      let result_id=await db.notes.add(JSON.parse(note))    //4\n      resolve({id:result_id})\n    }catch(err){reject({})}\n})},\ngetNotes(){\n  return new Promise(async (resolve, reject)=>{\n    try{\n      let result=await db.notes.toArray();                  //5\n      resolve(result)\n    }catch{reject([])}\n})},\ndeleteNote({id}){\n  return new Promise(async (resolve, reject)=>{\n    try{\n      await db.notes.delete(id)                             //6\n      resolve({})\n    }catch{reject({})}\n})}}\nexport default service;\n```", "```js\nimport dbService from \"./services/dbService\";\nconst services=[dbService, testService];\n```", "```js\n$ npm install axios\n```", "```js\nimport axios from \"axios\"\naxios.defaults.baseURL=\"http://localhost:3000\"\nconst service={\n   GET(payload={}){\n     return new Promise((resolve, reject)=>{\n       axios\n         .get(payload.url,{params:{data:payload.data}})\n         .then(result=>{\n             if(result.status>=200 && result.status<300){\n                  resolve(result.data)\n             }else{reject()}\n         }).catch(()=>{reject()})\n  })},\n  POST(payload={}){\n    return new Promise((resolve, reject)=>{\n      axios\n         .post(payload.url,{data:payload.data})\n         .then(result=>{\n           if(result.status>=200 && result.status<300){\n                resolve(result.data)\n           }else{reject()}})\n         .catch(()=>{reject()})\n})}}\nexport default service;\n```", "```js\nimport netService from \"./services/network\"\nconst services=[dbService, netService, testService]\n```", "```js\n<script setup>\nimport webWorker from \"../services/WebWorker\"\nimport { ref } from \"vue\"\nconst\n    _data_to_send = ref(\"\"),\n    _data_received = ref(\"\"),\n    _method = ref(\"GET\")\nfunction sendData(){\n    webWorker\n        .request(_method.value,                              //1\n            {url:\"/api/test\", data: _data_to_send.value})\n        .then(reply=>{_data_received.value=reply},\n        ()=>{_data_received.value=\"Error\"\n        })\n}\n</script>\n<template>\n    <div>\n       <section>\n           <h4>Text to send</h4>\n           <div>\n               <label>\n                    <input\n                        type=\"radio\"\n                        value=\"GET\"\n                        name=\"method\"\n                        v-model=\"_method\">\n                    <span>GET Method</span>\n               </label>\n               <label>\n                    <input\n                        type=\"radio\"\n                        value=\"POST\"\n                        name=\"method\"\n                        v-model=\"_method\">\n                    <span>POST Method</span>\n               </label>\n           </div>\n               <input type=\"text\" v-model=\"_data_to_send\">\n               <button @click=\"sendData()\">Send</button>\n       </section>\n       <section>\n           <h4>Data received from server</h4>\n               {{ _data_received }}\n       </section>\n    </div>\n</template>\n```", "```js\n$ npm init\n```", "```js\n$ npm install express cors\n```", "```js\nconst express = require(\"express\")                     //1\nconst cors=require(\"cors\")                             //2\nconst app=express()                                    //3\nconst PORT=3000\napp.use(cors())                                        //4\napp.use(express.json())                                //5\napp.get(\"/api/test\", (req, res)=>{                     //6\n    const data=req.query                               //7\n    res.jsonp(data)                                    //8\n})\napp.post(\"/api/test\", (req, res)=>{\n    const data=req.body                                //9\n    res.jsonp(data)\n})\napp.listen(PORT, ()=>{                                 //10\n    console.log(\"Server listening on port \" + PORT)\n})\n```"]