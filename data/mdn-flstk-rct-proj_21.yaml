- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Getting Started with Next.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Next.js
- en: Up until now, we have been using various libraries and tools to develop full-stack
    web applications. Now, we introduce Next.js as an enterprise-ready full-stack
    web application framework for React. Next.js combines all the functions and tools
    you need for full-stack web development in one package. In this book, we use Next.js
    because it is currently the most popular framework supporting all new React features,
    such as React Server Components and Server Actions, which are the future of full-stack
    React development. However, there are other frameworks for full-stack React, such
    as Remix, which have recently also started supporting the new React features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用各种库和工具来开发全栈Web应用程序。现在，我们介绍Next.js作为一款企业级全栈Web应用程序框架，适用于React。Next.js将您需要的所有全栈Web开发功能和工具集成在一个包中。在这本书中，我们使用Next.js，因为它是目前最受欢迎的框架，支持所有新的React特性，例如React
    Server Components和Server Actions，这些是全栈React开发的未来。然而，还有其他全栈React框架，如Remix，最近也开始支持新的React特性。
- en: In this chapter, we will learn how Next.js works and what its advantages are.
    Then, we will re-create our blog project in Next.js to highlight the differences
    between using a simple bundler such as Vite, and a full framework such as Next.js.
    Along the way, we will learn how the Next.js App Router works. Finally, we are
    going to re-create our (static) blog app by creating components and pages and
    then defining links between them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Next.js的工作原理及其优势。然后，我们将使用Next.js重新创建我们的博客项目，以突出使用简单的打包器（如Vite）和全框架（如Next.js）之间的差异。在这个过程中，我们将学习Next.js
    App Router的工作原理。最后，我们将通过创建组件和页面以及定义它们之间的链接来重新创建我们的（静态）博客应用程序。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What is Next.js?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Next.js？
- en: Setting up Next.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Next.js
- en: Introducing the App Router
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍App Router
- en: Creating static components and pages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建静态组件和页面
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before we start, please install all the requirements from [*Chapter 1*](B19385_01.xhtml#_idTextAnchor016)*,
    Preparing for Full-Stack Development*, and [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028)*,
    Getting to Know Node.js* *and MongoDB*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请安装从[*第1章*](B19385_01.xhtml#_idTextAnchor016)*，准备全栈开发*和[*第2章*](B19385_02.xhtml#_idTextAnchor028)*，了解Node.js*和MongoDB*中提到的所有要求。
- en: The versions listed in those chapters are the ones used in the book. While installing
    a newer version should not be an issue, please note that certain steps might work
    differently on a newer version. If you are having an issue with the code and steps
    provided in this book, please try using the versions mentioned in *Chapters 1*
    and *2*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那些章节中列出的版本是本书中使用的版本。虽然安装较新版本不应有问题，但请注意，某些步骤在较新版本上可能有所不同。如果您在使用本书中提供的代码和步骤时遇到问题，请尝试使用*第1章*和*第2章*中提到的版本。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch16](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch16).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码：[https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch16](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch16)。
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/jQFCZqCspoc](https://youtu.be/jQFCZqCspoc).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的CiA视频可在以下链接找到：[https://youtu.be/jQFCZqCspoc](https://youtu.be/jQFCZqCspoc)。
- en: What is Next.js?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Next.js？
- en: 'Next.js is a React framework that puts together everything you need to create
    a full-stack web application with React. Its main features are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js是一个React框架，它将您创建全栈Web应用程序所需的一切整合在一起。其主要特性如下：
- en: Good developer experience out of the box, including hot module reloading, error
    handling, and more.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生提供良好的开发者体验，包括热模块重载、错误处理等。
- en: File-based routing and nested layouts, route handlers to define API endpoints,
    all from Next.js.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于文件的路由和嵌套布局，使用Next.js定义API端点的路由处理器。
- en: '**Internationalization** (**i18n**) support in routing, allowing us to create
    internationalized routes.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在路由中支持**国际化**（**i18n**），允许我们创建国际化路由。
- en: Enhanced server-side and client-side data fetching with caching out of the box.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生支持增强的服务端和客户端数据获取，带有缓存功能。
- en: Middleware to run code before requests are completed.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间件，在请求完成前运行代码。
- en: Options to run API endpoints on serverless runtimes.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在无服务器运行时上运行API端点的选项。
- en: Out-of-the-box support for static generation of pages.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生支持页面静态生成。
- en: Dynamic streaming of components when they are needed, allowing us to show an
    initial page quickly, and then load other components later.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件需要时动态流式传输组件，使我们能够快速显示初始页面，然后稍后加载其他组件。
- en: Advanced client and server rendering, allowing us to not only render React components
    on the server side (**server-side rendering** (**SSR**)) but also make use of
    **React Server Components**, which allow us to render React components exclusively
    on the server without sending additional JavaScript to the client.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级客户端和服务器渲染，使我们不仅能够在服务器端渲染React组件（**服务器端渲染**（**SSR**）），还可以使用**React Server Components**，这允许我们在服务器端专门渲染React组件，而不需要向客户端发送额外的JavaScript。
- en: '**Server Actions** to progressively enhance forms and actions sent from the
    client to the server, allowing us to submit forms even without JavaScript on the
    client.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器操作**用于逐步增强从客户端发送到服务器的表单和操作，使我们能够在客户端没有JavaScript的情况下提交表单。'
- en: Built-in optimizations for images, fonts, and scripts to improve Core Web Vitals.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置对图像、字体和脚本的优化，以改善Core Web Vitals。
- en: Additionally, Next.js provides a platform to easily deploy our apps on – Vercel.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，Next.js提供了一个平台，使我们能够轻松地将我们的应用部署到 – Vercel。
- en: All in all, Next.js puts together everything we have learned about full-stack
    development throughout this book, refines each concept and makes it more advanced
    and customizable, and provides all of that in one single package. We are now going
    to re-create the blog application from earlier chapters, but from scratch with
    Next.js. Doing so will allow us to see the differences between developing an app
    with and without a full-stack framework.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Next.js将本书中学到的所有全栈开发知识整合在一起，对每个概念进行精炼，使其更加高级和可定制，并将所有这些内容封装在一个单独的包中。我们现在将从头开始使用Next.js重新创建之前章节中的博客应用。这样做将使我们能够看到使用和未使用全栈框架开发应用之间的差异。
- en: Setting up Next.js
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Next.js
- en: 'We are now going to set up a new project using the `create-next-app` tool,
    which sets up everything automatically for us. Follow these steps to get started:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用`create-next-app`工具设置一个新的项目，该工具会自动为我们设置一切。按照以下步骤开始：
- en: 'Open a new Terminal window. Make sure you are outside of any project folders.
    Run the following command to create a new folder and initialize a Next.js project
    there:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口。确保您不在任何项目文件夹中。运行以下命令以创建一个新的文件夹并在其中初始化一个Next.js项目：
- en: '[PRE0]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When asked if it’s **Ok to proceed?**, press **y** and confirm by pressing *Return/Enter*.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及是否**可以继续**时，按**y**键并按*Return/Enter*键确认。
- en: Give the project a name, such as **ch16**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目起一个名字，例如**ch16**。
- en: 'Answer the questions as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式回答问题：
- en: '**Would you like to use** **TypeScript?**: **No**'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您想使用TypeScript吗？**：**否**'
- en: '**Would you like to use** **ESLint?**: **Yes**'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您想使用ESLint吗？**：**是**'
- en: '**Would you like to use Tailwind** **CSS?**: **No**'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您想使用Tailwind CSS吗？**：**否**'
- en: '**Would you like to use `src/`** **directory?**: **Yes**'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您想使用`src/`目录吗？**：**是**'
- en: '**Would you like to use App** **Router?**: **Yes**'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您想使用App Router吗？**：**是**'
- en: '**Would you like to customize the default import** **alias?**: **No**'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您想自定义默认导入别名吗？**：**否**'
- en: 'After answering all the questions, a new Next.js app will be created in the
    **ch16** folder. The output should look as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在回答完所有问题后，将在**ch16**文件夹中创建一个新的Next.js应用。输出结果应如下所示：
- en: '![Figure 16.1 – Creating a new Next.js project](img/B19385_16_1.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图16.1 – 创建新的Next.js项目](img/B19385_16_1.jpg)'
- en: Figure 16.1 – Creating a new Next.js project
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – 创建新的Next.js项目
- en: Open the newly created **ch16** folder in VS Code.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开新创建的**ch16**文件夹。
- en: 'In the new VS Code window, open a Terminal and run the project with the following
    command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的VS Code窗口中，打开一个终端并使用以下命令运行项目：
- en: '[PRE1]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open **http://localhost:3000** in your browser to see the Next.js app running!
    The app should look as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开**http://localhost:3000**以查看运行的Next.js应用！应用应如下所示：
- en: '![Figure 16.2 – Our newly created Next.js app running in the browser](img/B19385_16_2.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图16.2 – 在浏览器中运行的我们新创建的Next.js应用](img/B19385_16_2.jpg)'
- en: Figure 16.2 – Our newly created Next.js app running in the browser
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – 在浏览器中运行的我们新创建的Next.js应用
- en: 'Unfortunately, **create-next-app** does not set up Prettier for us, so let’s
    quickly do that now. Install Prettier by running the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不幸的是，**create-next-app**没有为我们设置Prettier，所以让我们现在快速设置一下。通过运行以下命令安装Prettier：
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new **.prettierrc.json** file in the root of the project, with the
    following contents:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中创建一个新的**.prettierrc.json**文件，内容如下：
- en: '[PRE3]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Edit the existing **.eslintrc.json** to extend from **prettier**, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑现有的 **.eslintrc.json** 文件，以便从 **prettier** 扩展，如下所示：
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Go to the VS Code workspace settings, change the **Editor: Default Formatter**
    setting to **Prettier**, and check the checkbox for **Editor: Format** **On Save**.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '前往 VS Code 工作区设置，将 **Editor: Default Formatter** 设置更改为 **Prettier**，并勾选 **Editor:
    Format** **On Save** 复选框。'
- en: Now we have successfully created a new Next.js project with ESLint and Prettier!
    We could still set up Husky and lint-staged, just like we have done before, but
    for now, we are going to stick with this simple setup. Next, we are going to learn
    more about how apps are structured in Next.js.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了一个新的 Next.js 项目，并集成了 ESLint 和 Prettier！我们仍然可以设置 Husky 和 lint-staged，就像我们之前做的那样，但现在我们将坚持这个简单的设置。接下来，我们将学习更多关于
    Next.js 中应用程序结构的内容。
- en: Introducing the App Router
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 App Router
- en: Next.js comes with a special paradigm for structuring applications called the
    App Router. The App Router makes use of the folder structure in the `src/app/`
    folder to create routes for our apps. The root folder (`/` path) is `src/app/`.
    If we want to define a path, such as `/posts`, we need to create a `src/app/posts/`
    folder. To make this folder a valid route, we need to put a `page.js` file inside
    it, which contains the page component that will be rendered when visiting that
    route.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js 携带一种特殊的结构化应用程序的范式，称为 App Router。App Router 利用 `src/app/` 文件夹中的文件夹结构来为我们的应用程序创建路由。根文件夹（`/`
    路径）是 `src/app/`。如果我们想定义一个路径，例如 `/posts`，我们需要创建一个 `src/app/posts/` 文件夹。为了使这个文件夹成为一个有效的路由，我们需要在其中放置一个
    `page.js` 文件，该文件包含在访问该路由时将被渲染的页面组件。
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Alternatively, we can put a **route.js** file into a folder to turn it into
    an API route instead of rendering a page. We are going to learn more about API
    routes in [*Chapter 18*](B19385_18.xhtml#_idTextAnchor321)*, Advanced Next.js
    Concepts* *and Optimizations*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将一个 **route.js** 文件放入一个文件夹中，将其转换为 API 路由而不是渲染页面。我们将在 [*第 18 章*](B19385_18.xhtml#_idTextAnchor321)
    *高级 Next.js 概念和优化* 中了解更多关于 API 路由的内容。
- en: Additionally, Next.js allows us to define a `layout.js` file, which will be
    used as the layout for a certain path. The layout component accepts children,
    which can contain other layouts or pages. This flexibility allows us to define
    nested routes with sub-layouts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Next.js 允许我们定义一个 `layout.js` 文件，它将被用作特定路径的布局。布局组件接受子组件，可以包含其他布局或页面。这种灵活性允许我们定义带有子布局的嵌套路由。
- en: There are other special files in the App Router paradigm, such as the `error.js`
    file, which will be rendered when there is an error on the page, and the `loading.js`
    file, which will be rendered while the page is loading (using React Suspense).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 App Router 范式中还有其他特殊文件，例如 `error.js` 文件，当页面发生错误时将被渲染，以及 `loading.js` 文件，在页面加载时（使用
    React Suspense）将被渲染。
- en: 'Take a look at the following example of a folder structure with the App Router:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下带有 App Router 的文件夹结构示例：
- en: '![Figure 16.3 – Example of a folder structure with the App Router](img/B19385_16_3.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.3 – 带有 App Router 的文件夹结构示例](img/B19385_16_3.jpg)'
- en: Figure 16.3 – Example of a folder structure with the App Router
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3 – 带有 App Router 的文件夹结构示例
- en: In the preceding example, we have a `dashboard/settings/` route, defined by
    the `dashboard` and `settings` folders. The `dashboard` folder does not have a
    `page.js` file, so going to `dashboard/` will result in a `404 Not Found` error.
    However, the `dashboard` folder has a `layout.js` file, which defines the main
    layout of the dashboard. The `settings` folder has another `layout.js` file, which
    defines the layout of the settings page on the dashboard. It also has a `page.js`
    file, which will be rendered when the `dashboard/settings/` route is visited.
    Additionally, it has a `loading.js` file, which is rendered inside the settings
    layout, while the settings page is loading. It also contains an `error.js` file,
    which is rendered inside the settings layout if there is an error while loading
    the settings page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们有一个 `dashboard/settings/` 路由，由 `dashboard` 和 `settings` 文件夹定义。`dashboard`
    文件夹没有 `page.js` 文件，所以访问 `dashboard/` 将导致 `404 Not Found` 错误。然而，`dashboard` 文件夹有一个
    `layout.js` 文件，它定义了仪表板的主要布局。`settings` 文件夹有一个另一个 `layout.js` 文件，它定义了仪表板上的设置页面布局。它还有一个
    `page.js` 文件，当访问 `dashboard/settings/` 路由时将被渲染。此外，它还有一个 `loading.js` 文件，在设置页面加载时在设置布局内部渲染。它还包含一个
    `error.js` 文件，如果在加载设置页面时发生错误，它将在设置布局内部渲染。
- en: As we can see, the App Router makes it easy to implement common use cases, such
    as nested routes, layouts, errors, and loading components. Let’s now get started
    with defining the folder structure for our blog app.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，App Router使得实现常见用例变得容易，例如嵌套路由、布局、错误和加载组件。现在让我们开始定义博客应用程序的文件夹结构。
- en: Defining the folder structure
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义文件夹结构
- en: 'Let’s recap and refine the routing structure of the blog application from previous
    chapters:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾并精炼博客应用程序从上一章中的路由结构：
- en: '**/** – the index page of our blog, containing a list of posts'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/** – 我们博客的首页，包含文章列表'
- en: '**/login** – the login page to login to an existing account'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/login** – 登录现有账户的登录页面'
- en: '**/signup** – the signup page to create a new account'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/signup** – 创建新账户的注册页面'
- en: '**/create** – a page to create a new blog post (this route is new)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/create** – 创建新博客文章的页面（此路由为新）'
- en: '**/posts/:id** – a page to view a single blog post'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/posts/:id** – 查看单个博客文章的页面'
- en: All of these pages share a common layout with a navigation bar at the top, allowing
    us to navigate between the various pages of our app.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些页面都共享一个带有顶部导航栏的通用布局，使我们能够在应用程序的各个页面之间导航。
- en: 'Let’s now create this routing structure as a folder structure in the App Router:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在创建这个路由结构作为App Router中的文件夹结构：
- en: '*Delete* the existing **src/app/** folder.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*删除*现有的**src/app/**文件夹。'
- en: 'Create a new **src/app/** folder. Inside it, create a **src/app/layout.js**
    file with the following contents:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/app/**文件夹。在其内部，创建一个**src/app/layout.js**文件，内容如下：
- en: '[PRE5]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `metadata` object is a special exported object in Next.js used to provide
    meta tags, such as the `<title>` and `<meta` `name="description">` tags.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`metadata`对象是Next.js中一个特殊的导出对象，用于提供元标签，如`<title>`和`<meta name="description">`标签。'
- en: The default export of files in the App Router needs to be the component that
    should be rendered for the respective layout/page.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: App Router中文件的默认导出需要是应该为相应布局/页面渲染的组件。
- en: 'Create a new **src/app/page.js** file, with the following placeholder contents:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/app/page.js**文件，内容如下：
- en: '[PRE6]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new **src/app/login/** folder. Inside it, create a **src/app/login/page.js**
    file with the following placeholder contents:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/app/login/**文件夹。在其内部，创建一个**src/app/login/page.js**文件，内容如下：
- en: '[PRE7]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a new **src/app/signup/** folder. Inside it, create a **src/app/signup/page.js**
    file with the following placeholder contents:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/app/signup/**文件夹。在其内部，创建一个**src/app/signup/page.js**文件，内容如下：
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new **src/app/create/** folder. Inside it, create a **src/app/create/page.js**
    file with the following placeholder contents:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/app/create/**文件夹。在其内部，创建一个**src/app/create/page.js**文件，内容如下：
- en: '[PRE9]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create a new **src/app/posts/** folder. Inside it, create a new **src/app/posts/[id]/**
    folder. This is a special folder containing a route parameter **id**, which we
    can use when rendering the page.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/app/posts/**文件夹。在其内部，创建一个新的**src/app/posts/[id]/**文件夹。这是一个特殊的文件夹，包含一个路由参数**id**，我们可以在渲染页面时使用它。
- en: 'Create a new **src/app/posts/[id]/page.js** file with the following placeholder
    contents:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/app/posts/[id]/page.js**文件，内容如下：
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, we are getting the `id` from the `params` object provided by
    Next.js.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，我们从Next.js提供的`params`对象中获取`id`。
- en: 'If it’s not running anymore, start the Next.js dev server with the following
    command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它已经停止运行，请使用以下命令启动Next.js开发服务器：
- en: '[PRE11]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then go to **http://localhost:3000/** (or refresh the page) in your browser
    to see the main route working. Go to the different routes, such as **/login**
    and **/posts/123**, to see the different pages being rendered and the **route**
    param working!
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在浏览器中转到**http://localhost:3000/**（或刷新页面）以查看主路由是否正常工作。转到不同的路由，如**/login**和**/posts/123**，以查看不同页面被渲染以及**路由**参数是否正常工作！
- en: Now that we defined the folder structure for our project, let’s continue by
    creating static components and pages.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了项目的文件夹结构，让我们继续创建静态组件和页面。
- en: Creating static components and pages
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建静态组件和页面
- en: For the components in our blog, we can reuse a lot of the code we wrote in previous
    chapters, as it is not that much different in Next.js than it is in plain React.
    Only specific components, such as the navigation bar, will be different, because
    Next.js has its own router. We are going to create most of our components in a
    separate `src/components/` folder. This folder will only contain React components
    that can be reused across multiple pages. All page and layout components will
    still be in `src/app/`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们博客的组件，我们可以重用前几章中编写的大部分代码，因为Next.js与纯React相比并没有太大的不同。只有特定的组件，如导航栏，会有所不同，因为Next.js有自己的路由器。我们将大多数组件创建在单独的`src/components/`文件夹中。这个文件夹将只包含可以在多个页面之间重用的React组件。所有页面和布局组件仍然在`src/app/`。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In Next.js, it is also possible to co-locate regular components with the page
    and layout components, which should be done in large-scale projects for components
    that are only used on those specific pages. In small projects, it does not really
    matter as much, and we can just put all our regular components in a separate folder
    to make them easier to distinguish from page and layout components.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在Next.js中，也可以将常规组件与页面和布局组件一起放置，对于仅在特定页面上使用的组件，在大规模项目中应该这样做。在小项目中，这并不是很重要，我们只需将所有常规组件放在一个单独的文件夹中，以便更容易地将它们与页面和布局组件区分开来。
- en: Defining components
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义组件
- en: 'Let’s now get started with creating the components for our blog app:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始创建我们博客应用的组件：
- en: Create a new **src/components/** folder.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/components/**文件夹。
- en: 'Create a new **src/components/Login.jsx** file. Inside it, define a **<form>**
    with a **username** field, a **password** field, and a submit button:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/components/Login.jsx**文件。在其中，定义一个包含**用户名**字段、**密码**字段和提交按钮的**<form>**：
- en: '[PRE12]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We use uncontrolled input fields (so, no **useState** hooks) here on purpose,
    as it is not necessary to make controlled input fields for submitting forms with
    Server Actions, which we are going to learn about in the next chapter, [*Chapter
    17*](B19385_17.xhtml#_idTextAnchor303)*, Introducing React Server Components*.
    However, it is important to properly define the **name** property of input fields,
    as that is what will be used to identify the field when the form is submitted.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意使用非受控输入字段（因此，没有**useState**钩子），因为在下一章将要学习的使用服务器操作的表单中，没有必要创建受控输入字段，我们将学习的内容是[*第17章*](B19385_17.xhtml#_idTextAnchor303)*，介绍React
    Server Components*。然而，正确定义输入字段的**name**属性很重要，因为当表单提交时，将使用该属性来识别字段。
- en: 'In a similar fashion, create a new **src/components/Signup.jsx** file and define
    a form with the same fields:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以类似的方式，创建一个新的**src/components/Signup.jsx**文件，并定义具有相同字段的表单：
- en: '[PRE13]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a new **src/components/CreatePost.jsx** file and define a form with
    a required **title** input field, a **textarea** to define the **contents**, and
    a submit button:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/components/CreatePost.jsx**文件，并定义一个包含必需的**标题**输入字段、用于定义**内容**的**textarea**和一个提交按钮的表单：
- en: '[PRE14]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new **src/components/Post.jsx** file. As an improvement over the structure
    from previous chapters, the **Post** component will be used in the **PostList**,
    and only show the **title** and **author** of a blog post, with a link to the
    full post:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/components/Post.jsx**文件。作为对前几章结构的改进，**Post**组件将在**PostList**中使用，并且只显示博客文章的**标题**和**作者**，以及一个链接到完整文章：
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We also need to define **propTypes**. In this case, we will use a structure
    similar to the result from a database query, as we will be able to directly use
    database results when we introduce React Server Components in the next chapter:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要定义**propTypes**。在这种情况下，我们将使用类似于数据库查询结果的架构，因为我们将在下一章介绍React Server Components时能够直接使用数据库结果：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a new **src/components/PostList.jsx** file. Here, we are going to reuse
    the **propTypes** from the **Post** component, so let’s also import the **Post**
    component:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/components/PostList.jsx**文件。在这里，我们将重用**Post**组件的**propTypes**，所以让我们也导入**Post**组件：
- en: '[PRE17]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we define the **PostList** component, which renders each blog post with
    the **Post** component:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义**PostList**组件，它使用**Post**组件渲染每个博客文章：
- en: '[PRE18]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is best practice to use a unique ID for the **key** prop, such as a database
    ID, so that React can keep track of items changing in a list.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用唯一的ID作为**key**属性是一个最佳实践，例如数据库ID，这样React可以跟踪列表中变化的项目。
- en: 'We now define the **propTypes** for the **PostList** component by making use
    of the existing **Post.propTypes**:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在通过使用现有的**Post.propTypes**来定义**PostList**组件的**propTypes**：
- en: '[PRE19]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly, we create a new **src/components/FullPost.jsx** file, in which we display
    the full post with all its contents:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个新的**src/components/FullPost.jsx**文件，在其中显示包含所有内容的完整帖子：
- en: '[PRE20]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Instead of reusing **propTypes** from the **Post** component, we are redefining
    them here, because the **FullPost** component needs different props than the **Post**
    component (it does not have the **_id** prop, but instead has the **contents**
    prop):'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不是从**Post**组件中重用**propTypes**，而是在这里重新定义它们，因为**FullPost**组件需要与**Post**组件不同的属性（它没有**_id**属性，而是有**contents**属性）：
- en: '[PRE21]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we have defined all the components we are going to need for our blog
    app, let’s move on to properly defining the page components.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们博客应用所需的全部组件，让我们继续正确地定义页面组件。
- en: Defining pages
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义页面
- en: 'After creating various components that we are going to need for our blog app,
    let’s now replace the placeholder page components with proper pages that render
    the appropriate components. Follow these steps to get started:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们博客应用所需的各个组件后，现在让我们用适当的页面替换占位符页面组件，这些页面将渲染适当的组件。按照以下步骤开始：
- en: 'Edit **src/app/login/page.js** and import the **Login** component, then render
    it:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑**src/app/login/page.js**并导入**Login**组件，然后渲染它：
- en: '[PRE22]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember when we set up Next.js and were asked if we wanted to customize the
    default import alias? This import alias allows us to reference the **src/** folder
    of our project, making our imports absolute rather than relative. By default,
    this is done using the **@** alias. So, we can now just import from **@/components/Login**
    to import from the **src/components/Login.jsx** file, instead of having to import
    from **../../components/Login.jsx**. Absolute imports with import aliases become
    especially useful in large projects and make it easy to re-structure projects
    later.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 记得当我们设置Next.js时，是否被问及是否想要自定义默认导入别名吗？这个导入别名允许我们引用项目的**src/**文件夹，使我们的导入是绝对的而不是相对的。默认情况下，这是使用**@**别名完成的。因此，我们现在可以从**@/components/Login**导入，而不是必须从**../../components/Login.jsx**导入。在大型项目中，使用导入别名进行绝对导入变得特别有用，并且可以轻松地在以后重构项目。
- en: 'Edit **src/app/signup/page.js** and, in a similar fashion, import and render
    the **Signup** component:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑**src/app/signup/page.js**，以类似的方式导入并渲染**Signup**组件：
- en: '[PRE23]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Repeat the process by editing the **src/app/create/page.js** file as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过编辑**src/app/create/page.js**文件重复此过程：
- en: '[PRE24]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, edit the **src/app/posts/[id]/page.js** file and import the **FullPost**
    component:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑**src/app/posts/[id]/page.js**文件并导入**FullPost**组件：
- en: '[PRE25]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, define a sample **post** object:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个示例**post**对象：
- en: '[PRE26]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Render the **FullPost** component, as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式渲染**FullPost**组件：
- en: '[PRE27]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Lastly, edit **src/app/page.js** by importing the **PostList** component, creating
    an example **posts** array, and rendering the **PostList** component:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过导入**PostList**组件、创建一个示例**posts**数组并渲染**PostList**组件来编辑**src/app/page.js**：
- en: '[PRE28]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Go to **http://localhost:3000/posts/123** to see the **FullPost** component
    being rendered with the **id** param in the title. Feel free to change the **id**
    in the URL to see how the title changes. The following screenshot shows the **FullPost**
    component being rendered on the **/****posts/123** path:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**http://localhost:3000/posts/123**查看使用标题中的**id**参数渲染的**FullPost**组件。您可以随意更改URL中的**id**以查看标题如何变化。以下截图显示了在**/****posts/123**路径上渲染的**FullPost**组件：
- en: '![Figure 16.4 – Rendering the FullPost component with a Next.js route param
    in the title](img/B19385_16_4.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图16.4 – 使用Next.js路由参数在标题中渲染FullPost组件](img/B19385_16_4.jpg)'
- en: Figure 16.4 – Rendering the FullPost component with a Next.js route param in
    the title
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4 – 使用Next.js路由参数在标题中渲染FullPost组件
- en: After successfully defining all our pages, we still need a way to navigate between
    them, so let’s continue by adding links between pages.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功定义所有页面后，我们仍然需要一个在它们之间导航的方法，所以让我们继续通过在页面之间添加链接来继续：
- en: Adding links between pages
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在页面之间添加链接
- en: 'As mentioned earlier in this chapter, Next.js provides its own routing solution
    – the App Router. The routes are defined by the folder structure in the `src/app/`
    directory, and they all work already. All that’s left to do now is to add links
    between them. To do this, we need to use the `Link` component from `next/link`.
    Follow these steps to get started with implementing a navigation bar:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面所述，Next.js提供了自己的路由解决方案——App Router。路由由`src/app/`目录中的文件夹结构定义，并且它们都已经准备好了。现在我们唯一要做的就是添加它们之间的链接。为此，我们需要使用来自`next/link`的`Link`组件。按照以下步骤开始实现导航栏：
- en: 'Create a new **src/components/Navigation.jsx** file, where we import the **Link**
    component and **PropTypes**:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**src/components/Navigation.jsx**文件，其中我们导入**Link**组件和**PropTypes**：
- en: '[PRE29]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Define a **UserBar** component, which will be rendered when the user is logged
    in and allow a user to access the **Create Post** page and log out:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个**UserBar**组件，当用户登录时将被渲染，并允许用户访问**创建帖子**页面和注销：
- en: '[PRE30]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, define a **LoginSignupLinks** component, which will be rendered when
    the user is not logged in yet. It provides links to the **/login** and **/signup**
    pages to allow users to sign up and log in to our app:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个**LoginSignupLinks**组件，当用户尚未登录时将被渲染。它提供了链接到**/login**和**/signup**页面，允许用户在我们的应用中注册和登录：
- en: '[PRE31]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, define a **Navigation** component, which adds a link to the home page,
    and then conditionally renders either the **UserBar** component, or the **LoginSignupLinks**
    component, depending on whether the user is logged in or not:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义一个**Navigation**组件，它添加了一个链接到主页，然后根据用户是否登录有条件地渲染**UserBar**组件或**LoginSignupLinks**组件：
- en: '[PRE32]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now we just need to render the **Navigation** component. To make sure it appears
    on all pages of our blog app, we are going to put it in the root layout. Edit
    **src/app/layout.js** and import the **Navigation** component:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需要渲染**Navigation**组件。为了确保它在博客应用的所有页面上显示，我们将它放在根布局中。编辑**src/app/layout.js**并导入**Navigation**组件：
- en: '[PRE33]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, define a sample **user** object to simulate a user being logged in:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个示例**user**对象来模拟用户登录：
- en: '[PRE34]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Render the **Navigation** component, as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式渲染**Navigation**组件：
- en: '[PRE35]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We still need to add a link from a single post in the list to the full post
    page. Edit **src/components/Post.jsx** and import the **Link** component:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要从列表中的单个帖子添加一个链接到完整的帖子页面。编辑**src/components/Post.jsx**并导入**Link**组件：
- en: '[PRE36]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, add a link to the title, as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加一个链接到标题，如下所示：
- en: '[PRE37]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Go to **http://localhost:3000/** and you will see the navigation bar being rendered
    with the **UserBar** component.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问**http://localhost:3000/**，您将看到渲染了**UserBar**组件的导航栏。
- en: Click on the **Create Post** link to go to the corresponding page, then go back
    using the **Home** link. Also, try going to the full post page by clicking on
    the title of the blog post on the home page.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建帖子**链接进入相应的页面，然后使用**主页**链接返回。也可以尝试通过点击主页上的博客帖子标题来访问完整的帖子页面。
- en: 'The following screenshot shows the **Home** page being rendered after we added
    the navigation bar:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在添加了导航栏后渲染的**主页**：
- en: '![Figure 16.5 – Our (static) blog app re-created in Next.js!](img/B19385_16_5.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图16.5 – 在Next.js中重新创建的我们的（静态）博客应用！](img/B19385_16_5.jpg)'
- en: Figure 16.5 – Our (static) blog app re-created in Next.js!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – 在Next.js中重新创建的我们的（静态）博客应用！
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we first learned what Next.js is and how it can be useful for
    full-stack development. Then, we set up a new Next.js project and learned about
    the App Router paradigm. Finally, we re-created the blog app in Next.js by creating
    components, pages, and a navigation bar, making use of the Next.js `Link` component
    to navigate between the different pages in our app.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了Next.js是什么以及它如何对全栈开发有用。然后，我们设置了一个新的Next.js项目，并了解了App Router范式。最后，我们通过创建组件、页面和导航栏，利用Next.js的`Link`组件在应用的不同页面间导航，重新创建了Next.js中的博客应用。
- en: In the next chapter, [*Chapter 17*](B19385_17.xhtml#_idTextAnchor303)*, Introducing
    React Server Components*, we are going to learn how to make our blog app interactive
    by creating React Server Components, which are components that run on the server
    and can, for example, execute database queries. Additionally, we are going to
    learn about Server Actions, which are used to submit forms, such as the Login,
    Signup, and Create Post forms.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章[*第17章*](B19385_17.xhtml#_idTextAnchor303)*介绍React服务器组件*中，我们将学习如何通过创建React服务器组件来使我们的博客应用变得交互式，这些组件在服务器上运行，例如可以执行数据库查询。此外，我们还将学习关于服务器操作的知识，这些操作用于提交表单，例如登录、注册和创建帖子表单。
