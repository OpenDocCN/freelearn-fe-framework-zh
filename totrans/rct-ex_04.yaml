- en: Chapter 4. Composite Dynamic Components and Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。组合动态组件和表单
- en: In the previous chapter, we saw the various life cycle methods of a React component,
    how the data flows between React components, and how to manage state and props
    in our React application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了React组件的各种生命周期方法，React组件之间的数据流，以及如何在我们的React应用程序中管理状态和属性。
- en: In this chapter, we will focus on multiple dynamic components and building forms
    using React.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于多个动态组件和构建使用React的表单。
- en: 'We will cover following points:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下要点：
- en: Multiple dynamic components with interactivity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个动态组件与交互性
- en: Controlled and uncontrolled components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受控和非受控组件
- en: Form elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单元素
- en: Form events and handlers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单事件和处理程序
- en: At the end of this chapter, we will be able to create applications containing
    complex forms using React with an understanding of the dynamic components.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将能够创建包含复杂表单的应用程序，这些应用程序使用React和动态组件的理解。
- en: Mike and Shawn are getting ready for their next project. The application is
    a prototype for an online bookstore where people can buy different books. Shawn
    is excited to work with Mike again and learn more about React. This project is
    based on React too.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克和肖恩正在为他们的下一个项目做准备。这个应用程序是一个在线书店的原型，人们可以在这里购买不同的书籍。肖恩很兴奋再次与迈克合作，并学习更多关于React的知识。这个项目也是基于React的。
- en: Forms in React
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React中的表单
- en: '"Shawn, in this project there will be many things related to placing an order,
    taking user''s shipping and billing information, and so on. We are going to deal
    with a lot of forms now." started Mike.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “肖恩，在这个项目中，将有许多与下订单、获取用户的运输和账单信息等相关的事情。我们现在将处理很多表单。”迈克开始说。
- en: '"Forms using React, right?" Shawn asked excitedly.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “使用React的表单吗？”肖恩兴奋地问道。
- en: '"Yes. That is why today we will only focus on forms. Let''s go through the
    intrinsic details of using forms using React." said Mike.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “是的。这就是为什么今天我们将只关注表单。让我们看看使用React使用表单的内在细节。”迈克说。
- en: Setting up the application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序
- en: '"Shawn, we were using JSBin up to this point. But now we will create the app
    locally. We will use the following directory structure for our code:"'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “肖恩，我们之前一直在使用JSBin。但现在我们将本地创建应用程序。我们将使用以下目录结构来存放我们的代码：”
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `src` directory will contain all of the React components
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`目录将包含所有的React组件'
- en: The `webpack.config.js` and `server.js` file will be used for setting up local
    development server using webpack.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack.config.js`和`server.js`文件将用于使用webpack设置本地开发服务器。'
- en: The `package.json` file will be used to contain information about all of the
    npm packages used by us
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`文件将用于包含我们使用的所有npm包的信息'
- en: The `index.html` file will be the starting point of the app
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`文件将是应用程序的起点'
- en: '"Let''s see our `index.html` file."'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “让我们看看我们的`index.html`文件。”
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '"We are using bootstrap CSS to beautify our app. Other than this, we are including
    the bundled JavaScript as `static/bundle.js`. Webpack will bundle the JavaScript
    code from our app and place it in `static/bundle.js`."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “我们正在使用bootstrap CSS来美化我们的应用程序。除此之外，我们还将包含打包后的JavaScript作为`static/bundle.js`。Webpack将打包我们应用程序中的JavaScript代码，并将其放置在`static/bundle.js`中。”
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Webpack is a module bundler that takes our JavaScript code and generates static
    assets representing these modules. It also has other features such as hot module
    replacement, which we will be using in this book. We will be covering webpack
    and it's configuration in more depth in [Chapter 11](ch11.html "Chapter 11. React
    Tools"), *React Tools*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是一个模块打包器，它将我们的JavaScript代码打包成代表这些模块的静态资源。它还具有其他功能，如热模块替换，我们将在本书中使用这些功能。我们将在第11章（[第11章。React工具](ch11.html
    "第11章。React工具")）中更深入地介绍webpack及其配置。
- en: '"Let''s see our `index.js` file, which will be the entry point of the JavaScript
    code."'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “让我们看看我们的`index.js`文件，它将是JavaScript代码的入口点。”
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"It will render our `BookStore` component in the root container present in
    `index.html`. Now, the only thing left to do is actually writing the code for
    our `BookStore` component. Let''s get started."'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “它将在`index.html`中的根容器中渲染我们的`BookStore`组件。现在，唯一剩下的事情就是实际编写我们的`BookStore`组件的代码。让我们开始吧。”
- en: '"Mike, in JSBin, our ES6 code was getting converted to normal JavaScript automatically.
    How will it be converted now?" asked Shawn.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “迈克，在JSBin中，我们的ES6代码会自动转换为普通JavaScript。现在会如何转换呢？”肖恩问道。
- en: '"Excellent question. I forgot to mention about using Babel. Babel is a JavaScript
    transpiler that will convert our ES6 and JSX code to normal JavaScript. I have
    already configured this app to use Babel. You can check `package.json` and `webpack.config.js`
    to see how we configured Babel to convert the ES6 code to ES5 code. But let''s
    not worry too much about it for now. We will come back to it and see how the whole
    setup works later."'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will be covering how we have used Babel and Webpack in [Chapter 11](ch11.html
    "Chapter 11. React Tools"), *React Tools*. Right now, the reader is expected to
    not worry about it and directly set up the application using the instructions
    given in source code of this chapter. You can also check [Chapter 11](ch11.html
    "Chapter 11. React Tools"), *React Tools* for more details before completing this
    chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with forms
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Forms behave slightly differently in the React world than in the normal HTML
    world. They are a bit special than the other DOM components in the React world.
    The `<input>`, `<textarea>`, and `<option>` tags are some of the common input
    components provided by React." explained Mike.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '"These form components are mutated when the user interacts with them, adds
    some text in the input, or selects an option. Therefore, we need to take care
    that we are managing those user interactions properly." Mike explained further.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s start with a simple input tag to understand the user interaction."
    informed Mike.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '"Mike, what is the meaning of import here?" asked Shawn.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '"Good catch. This is one of the ES6 features that we are going to use in this
    project. It is used to import functions defined in other modules or external scripts."'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on import can be found at [https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '"We are also using a new way of defining functions in ES6."'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '"Using this new syntax, we don''t have to write word `function` every time
    we define the function."'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '"Shawn, start our app by running `npm start`."'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"Awesome, it works because we have configured the `package.json` scripts section
    for starting the app."'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '"Let''s get back to our input box. We see a normal HTML text input with a predefined
    value, `Shawn`. All good." said Mike.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with forms](img/4730_04_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: '"Mike, I can''t edit it. Seems like the field is read-only. Also, I am seeing
    a warning in the console." informed Shawn.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with forms](img/4730_04_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Interactive props
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Right. It also says that value is a prop. Similar to value, there are some
    other props supported by the input fields." said Mike.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: value
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defaultValue
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: onChange
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"As React has warned us that we need to either provide the `defaultValue` or
    `onChange` prop to make this field mutable, let''s take care of this and add a
    `onChange` handler. The field is read-only because by setting the value `prop`,
    we have rendered a controlled component." explained Mike.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '"正如React所警告的那样，我们需要提供`defaultValue`或`onChange`属性来使这个字段可变，让我们来处理这个问题并添加一个`onChange`处理程序。由于我们设置了`value`属性，这个字段是只读的，因为我们已经渲染了一个受控组件。"
    迈克解释道。'
- en: Controlled components
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受控组件
- en: '"What is a controlled component, Mike?" asked Shawn.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，什么是受控组件？" 肖恩问道。'
- en: '"It''s an input component whose value is controlled by React. By providing
    the value prop, we are informing React that the value of this field is "Shawn".
    Once React has declared it to be "Shawn", any user input won''t have an effect
    as the value is already set in the ." explained Mike.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '"这是一个由React控制的输入组件。通过提供值`prop`，我们通知React这个字段的值是"肖恩"。一旦React将其声明为"肖恩"，任何用户输入都不会产生影响，因为值已经在."中设置。迈克解释道。'
- en: '"I think that we have to resort to `state` instead of `props`?" Shawn asked.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '"我想我们不得不求助于`state`而不是`props`？" 肖恩问道。'
- en: '"Exactly. As an user is interacting with the input field, we need to update
    the value `prop` using `state` and `onChange` event handler. Can you give it a
    try?" suggested Mike.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '"正是这样。当用户与输入字段交互时，我们需要使用`state`和`onChange`事件处理程序来更新值`prop`。你能试一试吗？" 迈克建议。'
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '"Awesome. This pattern of making the value of an input based on state and updating
    the state based on the user interaction makes it very easy to respond to user
    interactions. We can also do some housekeeping things such as validating the input."
    Mike explained further.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了。这种基于状态制作输入值并根据用户交互更新状态的模式使得对用户交互做出响应变得非常容易。我们还可以做一些家务事，比如验证输入。" 迈克进一步解释道。'
- en: '"For example, you can change the case of all the text to uppercase." Mike added.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '"例如，你可以将所有文本的格式改为大写。" 迈克补充道。'
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Uncontrolled components
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不受控组件
- en: '"React also has uncontrolled components where the `value` prop is not passed
    to the input".'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '"React还有不受控组件，其中没有将`value`属性传递给输入"。'
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '"In this case, the value entered by the user will be immediately reflected
    in the input. For setting some default initial value, we can pass the default
    `value` prop, which will act as the initial value for an uncontrolled component."'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这种情况下，用户输入的值将立即反映在输入中。为了设置一些默认的初始值，我们可以传递默认的`value`属性，这将作为不受控组件的初始值。"。'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '"Awesome. This does it."'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了。这就完成了。"'
- en: Getting started with form wizard
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用表单向导
- en: '"Shawn, our task today is to build a form wizard, modeling all the steps that
    the user will take while using the online bookstore."'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，我们今天的任务是构建一个表单向导，模拟用户在使用在线书店时将采取的所有步骤。"'
- en: We will start with a form, where the user selects the book that they want to
    buy
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将从表单开始，用户将选择他们想要购买的书籍。
- en: In the next step, the user will enter the information related to the billing
    and shipping address
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下一步中，用户将输入与账单和配送地址相关的信息。
- en: After this, the user needs to choose a delivery mechanism
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，用户需要选择一个配送方式。
- en: In the end, the user will confirm the transaction and place the order
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，用户将确认交易并下订单。
- en: '"Will we design four different forms then?" asked Shawn.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们将设计四个不同的表单吗？" 肖恩问道。'
- en: '"Yes. But all of them will be controlled by a single parent. The parent component
    will keep a track of the state that the user is in and will render a form for
    this step." explained Mike.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。但所有这些都将由一个父组件控制。父组件将跟踪用户所处的状态，并为这一步渲染一个表单。" 迈克解释道。'
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '"How will we control the step?" asked Shawn.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们将如何控制步骤？" 肖恩问道。'
- en: '"We will discuss this point later. Let''s fill in some details before that.
    Let''s add the placeholders for all of our forms." said Mike.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们稍后再讨论这个点。在那之前，让我们先填入一些细节。让我们为所有表单添加占位符。" 迈克说。'
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '"Great. Now, let''s make sure that we always start from the first step." explained
    Mike.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '"太好了。现在，让我们确保我们始终从第一步开始。" 迈克解释道。'
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"Now that we have made sure that the user will always be on the first step
    at the start, let''s go ahead and finish the book store." said Mike.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '"既然我们已经确保用户在开始时始终处于第一步，让我们继续完成书店。" 迈克说。'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"This is our static form. It doesn''t do anything on user interaction. The
    next step will be to make it respond to the events." Mike added.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '"这是我们静态的表单。它对用户交互没有任何反应。下一步将是让它对事件做出响应。" 迈克补充道。'
- en: '"Cool, I am interested in how we move to the next step." said Shawn.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '"太酷了，我对我们如何进入下一步很感兴趣。" 肖恩说。'
- en: '"We will reach there soon. Let''s finish other things first." informed Mike.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们很快就会到达那里。我们先完成其他事情。"迈克通知道。'
- en: '"OK. Before that, what''s happening here?"'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '"好的。在那之前，这里发生了什么？"'
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '"This is called as a **fat arrow syntax** to define functions. It is another
    ES6 feature. It''s a shorthand for writing functions."'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '"这被称为**箭头函数语法**来定义函数。它是ES6的另一个特性。它是编写函数的简写方式。"'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about fat arrow functions can be found at [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于箭头函数的详细信息可以在[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)找到。
- en: Form events
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单事件
- en: '"Let''s handle submitting the form now. React provides the `onSubmit` event
    for this purpose." said Mike.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在让我们处理表单的提交。React为此提供了`onSubmit`事件。"迈克说。'
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"Now, the next task is to get hold of all the books selected by the user. We
    can use `state` to achieve this." explained Mike.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，下一个任务是获取用户所选的所有书籍。我们可以使用`state`来实现这一点。"迈克解释道。'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '"We added an `onChange` handler for the checkboxes. We also provided the `value`
    prop to the checkboxes which will be name of the book. Initially, the `selectedBooks`
    state will be an empty array set through the `getInitialState` function. The `handleSelectedBooks`
    method will check whether the checkbox is checked or not. We are using the checked
    prop provided by React for checkbox inputs. Similar to value, it also gets updated
    with user interaction.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们为复选框添加了`onChange`处理程序。我们还向复选框提供了`value`prop，它将是书籍的名称。最初，`selectedBooks`状态将通过`getInitialState`函数设置为空数组。`handleSelectedBooks`方法将检查复选框是否被选中。我们使用React为复选框输入提供的checked
    prop。与value类似，它也会随着用户交互而更新。"'
- en: At the end, we are updating the state with the new value of `selectedBooks`.
    Therefore, at any point of time, we will have hold of selected books in `this.state.selectedBooks`."
    explained Mike.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`selectedBooks`的新值更新状态。因此，在任何时候，我们都会在`this.state.selectedBooks`中掌握所选书籍。"迈克解释道。
- en: '"Perfect!" said Shawn.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '"太好了！"肖恩说。'
- en: Parent Child relationship
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 父子关系
- en: '"Now after this, the next step is communicating with the parent component.
    Currently, there is no way that our child component can communicate with props.
    We want to communicate with the parent component as we want to send the selected
    books by the user to the parent component. The easiest way for a child to communicate
    with the parent is via props." Mike explained.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，接下来的步骤是与父组件通信。目前，我们的子组件没有通过props进行通信的方法。我们希望与父组件通信，因为我们想将用户所选的书籍发送到父组件。子组件与父组件通信的最简单方法是使用props。"迈克解释道。'
- en: '"But props are generally the attributes or properties that are sent to a child,
    right? How can a child communicate with the parent using them?" Shawn asked.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '"但是props通常是发送给子组件的属性或属性，对吧？子组件如何使用它们与父组件通信？"肖恩问道。'
- en: '"Remember the `{}` syntax. We can pass any valid expression as prop. We can
    pass a function callback as prop to a child component. A child can call it to
    update the state of the parent. Let''s update our `BookStore` component now."
    Mike explained.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '"记住`{}`语法。我们可以将任何有效的表达式作为prop传递。我们可以将函数回调作为prop传递给子组件。子组件可以调用它来更新父组件的状态。现在让我们更新我们的`BookStore`组件。"迈克解释道。'
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"We pass the `updateFormData` function as a prop to all the child components.
    This function will take care of updating the form data. We will also need to update
    `BookList` in order to use it."'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们将`updateFormData`函数作为prop传递给所有子组件。这个函数将负责更新表单数据。我们还需要更新`BookList`以便使用它。"'
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '"The `BookList` component now calls the `updateFormData` function and passes
    the currently selected books to it, whenever a user submits the first form," explained
    Mike.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '"每当用户提交第一个表单时，`BookList`组件现在会调用`updateFormData`函数并将当前所选书籍传递给它。"迈克解释道。'
- en: '"Therefore, every form will send its data to the parent component and we will
    use the complete data for final submission, right?" Shawn asked.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '"因此，每个表单都会将其数据发送到父组件，我们将使用完整的数据进行最终提交，对吧？"肖恩问道。'
- en: '"Exactly. We will need a way to store the incoming data in the parent component
    though."'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '"确实如此。我们还需要在父组件中存储传入的数据。"'
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '"We added state to store `formValues`. Whenever the user submits the form,
    the child form will call the parent''s `updateFormData` function. This function
    will merge the current data stored in the parent''s `formValues` with incoming
    `formData` and reset the state to the new `formValues`. In this case, we will
    get `selectedBooks` in the `formValues` object, as follows:" said Mike.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们添加了状态来存储`formValues`。每当用户提交表单时，子表单将调用父级的`updateFormData`函数。这个函数将合并存储在父级`formValues`中的当前数据与传入的`formData`，并将状态重置为新`formValues`。在这种情况下，我们将在`formValues`对象中获得`selectedBooks`，如下所示："迈克说。'
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '"Note that, we are making use of another ES6 method—`Object.assign`. The `Object.assign()`
    method is used to copy the values of all the enumerable properties from one or
    more source objects to a target object."'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '"请注意，我们正在使用另一个ES6方法——`Object.assign`。`Object.assign()`方法用于将一个或多个源对象的所有可枚举属性值复制到目标对象中。"'
- en: '"In our case, the use of `Object.assign` will merge the current state of form
    values with the new form values that are changed after some user interaction.
    We will then use this updated data to update the state of the component. We are
    using `Object.assign` instead of directly mutating the state of the component.
    We will cover why this is better than directly mutating the state of the component
    in the following chapters."'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '"在我们的情况下，使用`Object.assign`将合并表单值的当前状态与用户交互后更改的新表单值。然后我们将使用这些更新后的数据来更新组件的状态。我们使用`Object.assign`而不是直接修改组件的状态。我们将在接下来的章节中解释为什么这样做比直接修改组件的状态更好。"说迈克。'
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '"Makes sense. This takes care of updating the form data. Now, how will we go
    to the next step?" Shawn asked.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '"有道理。这处理了表单数据的更新。现在，我们如何进入下一个步骤呢？"肖恩问道。'
- en: '"That''s simple. Whenever we update the form data, we also need to update the
    `currentStep` method of the `BookStore` component. Can you give it a try?" Mike
    asked.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '"很简单。每次我们更新表单数据时，我们还需要更新`BookStore`组件的`currentStep`方法。你能试一下吗？"迈克问道。'
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '"Perfect. You have updated the step by `1` in the `updateFormData` callback.
    This will take the user to the next step." Mike.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '"太好了。你在`updateFormData`回调中更新了步骤`1`。这将把用户带到下一个步骤。"迈克说。'
- en: Form validation
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单验证
- en: '"Shawn, I think we should also add basic validation to the `BookList` component
    so that the user can''t go to the next step without selecting a book," said Mike.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，我认为我们还应该给`BookList`组件添加基本的验证，这样用户就不能在选择一本书之前进入下一个步骤了。"迈克说。'
- en: '"Agree. Let me give it a try." answered Shawn.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '"同意。让我试试。"肖恩回答。'
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '"I added the state to manage the validation error. Initially, it will be set
    to `false`. After the user submits the form, we will check whether the user has
    not selected anything and set an appropriate error message. State will be updated
    and it will display the error message accordingly. If the user has selected at
    least one book, then the error state will be set to `false` and the error message
    won''t be displayed. We get a nice error message with some help from the Bootstrap
    classes." said Shawn.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '"我为验证错误添加了状态。最初，它将被设置为`false`。当用户提交表单后，我们将检查用户是否没有选择任何内容，并设置适当的错误信息。状态将被更新，并相应地显示错误信息。如果用户至少选择了一本书，那么错误状态将被设置为`false`，错误信息将不会显示。我们在Bootstrap类的帮助下得到了一个很好的错误信息。"肖恩说。'
- en: '![Form validation](img/4730_04_03.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![表单验证](img/4730_04_03.jpg)'
- en: '"Awesome. Let''s move to the second form now. We want to accept the user''s
    shipping details such as the address and contact information." said Mike.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了。现在让我们转到第二个表单。我们希望接受用户的发货详情，如地址和联系信息。"迈克说。'
- en: Shipping details step
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发货详情步骤
- en: '"Shawn, in this step, we want to get the user''s shipping preferences. It will
    contain the shipping address and name of the customer." explained Mike.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，在这个步骤中，我们想要获取用户的发货偏好。它将包含发货地址和客户姓名。"迈克解释说。'
- en: '"We should also add a phone number." Shawn added.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们也应该添加一个电话号码。"肖恩补充说。'
- en: '"Sure thing. Here is how our shipping details form look like." informed Mike.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '"当然。这就是我们的发货详情表单看起来像。"迈克告知。'
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '"This component is using almost same code as our first form. We are showing
    textboxes for the shipping details to the user. There is validation and all the
    fields are required fields. We are syncing the data entered by the user using
    a `onChange` handler in the state of the component and passing this state to the
    `updateFormData` function of the parent component in the end." Mike explained.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '"这个组件几乎使用了与我们的第一个表单相同的代码。我们向用户显示用于配送详情的文本框。有验证，所有字段都是必填项。我们使用组件状态中的`onChange`处理程序同步用户输入的数据，并在最后将此状态传递给父组件的`updateFormData`函数。"
    迈克解释道。'
- en: '"Now, at the end of second step, we have gathered a list of books chosen by
    the user and the shipping information." said Mike.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，在第二步的结尾，我们已经收集了用户选择的书籍列表和配送信息。" 迈克说。'
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '"I can see how we are assigning the `value` prop of the input fields to it''s
    corresponding state." Shawn.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '"我可以看到我们是如何将输入字段的`value`属性分配给它对应的状态的。" 肖恩。'
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '"Yes. As we discussed earlier about the controlled and uncontrolled components,
    we are making sure that the UI reflects the latest state, based on the user interaction."
    said Mike.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。正如我们之前讨论的受控和非受控组件，我们正在确保UI反映了基于用户交互的最新状态。" 迈克说。'
- en: Delivery details step
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配送详情步骤
- en: '"Shawn, the next step is about providing various delivery options. For now,
    let''s assume that the user can choose between `Primary` delivery, meaning a next-day
    delivery, and `Normal` delivery, meaning 3 - 4 days delivery. By default, the
    `Primary` option must be selected. A user can choose the `Normal` delivery option
    too. Can you try building this last step?" Mike asked.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，下一步是提供各种配送选项。目前，让我们假设用户可以在`Primary`配送（意味着次日送达）和`Normal`配送（意味着3-4天送达）之间进行选择。默认情况下，必须选择`Primary`选项。用户也可以选择`Normal`配送选项。你能尝试构建这个最后一步吗？"
    迈克问道。'
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '"Mike, as needed, I added `Primary` as the default option through state. I
    used radio buttons and their checked prop in order to make sure that only one
    radio button is selected at any point of time. Also, the state is updated using
    the `onChange` callback to reflect the selected by option. Finally, the `updateFormData`
    function is called to update the parent''s form data." Shawn explained.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，根据需要，我通过状态添加了`Primary`作为默认选项。我使用了单选按钮及其`checked`属性，以确保在任何时候只能选择一个单选按钮。此外，使用`onChange`回调更新状态以反映所选选项。最后，调用`updateFormData`函数来更新父表单数据。"
    肖恩解释道。'
- en: '"Great, Shawn. This looks good. I think we will also have to make some changes
    to our `BookStore` component as now we want to show a confirmation page after
    the user has completed choosing delivery options."'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '"太好了，肖恩。看起来不错。我想我们可能还需要对我们的`BookStore`组件做一些修改，因为我们现在想在用户完成选择配送选项后显示一个确认页面。"
    迈克说。'
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '"We added the `Confirmation` component as the last step and also added the
    default form to be the `BookList` form, where the user can choose the books. Now,
    we just need to show all the information captured up to the last step on the **Confirmation**
    page and actually submit everything to the backend." said Mike.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们已经将`Confirmation`组件作为最后一步添加，并且将默认表单设置为`BookList`表单，用户可以在其中选择书籍。现在，我们只需要在**确认**页面上显示到最后一步所捕获的所有信息，并将一切实际提交到后端。"
    迈克说。'
- en: '"Let me update the **Confirmation** page to show the data entered by the user."
    Shawn said.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我更新一下**确认**页面，以显示用户输入的数据。" 肖恩说。'
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '"Mike, I listed all the data selected by the user and provided a button to
    place the order. It looks like this." Shawn.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，我已经列出了用户选择的所有数据，并提供了一个下单按钮。看起来是这样的。" 肖恩。'
- en: '![Delivery details step](img/4730_04_04.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![配送详情步骤](img/4730_04_04.jpg)'
- en: '"Perfect. I have the success page ready. Let''s try that." Mike.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '"太好了。我已经准备好了成功页面。让我们试试吧。" 迈克。'
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '"We will also need to update `BookStore` to show the success page," added Mike.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们还需要更新`BookStore`以显示成功页面。" 迈克补充说。'
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '"Now, the success page will be shown as the last page after the user has confirmed
    and placed the order. Our first version of the form wizard is complete." Mike
    informed.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，用户确认并下单后，将显示成功页面作为最后一页。我们的表单向导的第一个版本已经完成。" 迈克通知。'
- en: '![Delivery details step](img/4730_04_05.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![配送详情步骤](img/4730_04_05.jpg)'
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how to develop forms in React. We saw how to use
    different input types and event handlers to respond to the user interaction for
    these inputs. We used state and props to manage the flow of form data from one
    step to another. We also saw how to use dynamic components to display particular
    form to the user based on the current step that the user is present on.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何在React中开发表单。我们看到了如何使用不同的输入类型和事件处理器来响应用户对这些输入的交互。我们使用状态和属性来管理表单数据从一个步骤流向另一个步骤的流程。我们还看到了如何使用动态组件根据用户当前所在的步骤向用户显示特定的表单。
- en: In the next chapter, we will continue with the form wizard and see how mixins
    can help us in organizing the code better.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续介绍表单向导，并了解混入（mixins）如何帮助我们更好地组织代码。
