["```js\nclass Engine {...} \n\nclass Transmission {...}\n\nclass Car { \n  engine; \n  transmission;\n\n  constructor() { \n    this.engine = new Engine(); \n    this.transmission = new Transmission(); \n  } \n} \n```", "```js\nclass Engine {...} \nclass Transmission {...} \n\n@Injectable() \nclass Car { \n  engine; \n  transmission;\n\n  constructor(engine: Engine, transmission: Transmission) { \n    this.engine = engine; \n    this.transmission = transmission; \n  } \n} \n```", "```js\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport {\n  NgModule,\n  Component,\n  Inject,\n  InjectionToken,\n  Injectable\n} from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nconst BUFFER_SIZE = new InjectionToken<number>('buffer-size');\n\nclass Buffer {\n  constructor(@Inject(BUFFER_SIZE) private size: Number) {\n    console.log(this.size);\n  }\n}\n\n@Injectable()\nclass Socket {\n  constructor(private buffer: Buffer) {}\n}\n\n@Component({\n  selector: 'app',\n  template: ''\n})\nclass AppComponent {\n  constructor(private socket: Socket) {\n    console.log(socket);\n  }\n}\n\n@NgModule({\n  providers: [{ provide: BUFFER_SIZE, useValue: 42 }, Buffer, Socket],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  imports: [BrowserModule]\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```js\n42\n Socket {buffer: Buffer}\n```", "```js\n// ch6/injector-basics/forward-ref/app.ts \n\n@Injectable() \nclass Socket { \n  constructor(private buffer: Buffer) {...} \n} \n\n// undefined \nconsole.log(Buffer); \n\nclass Buffer { \n  constructor(@Inject(BUFFER_SIZE) private size: Number) {...} \n} \n\n// [Function: Buffer] \nconsole.log(Buffer); \n```", "```js\nError: Cannot resolve all parameters for Socket(?). Make sure they all have valid type or annotations.\n```", "```js\n... \nimport {forwardRef} from '@angular/core'; \n...\n\n@Injectable() \nclass Socket { \n  constructor(@Inject(forwardRef(() => Buffer)) \n    private buffer: Buffer) {} \n}\n\nclass Buffer {...} \n```", "```js\n@NgModule({\n  // ...\n  providers: [ \n    { provide: BUFFER_SIZE, useValue: 42 }, \n    { provide: Buffer, useClass: Buffer }, \n    { provide: Socket, useClass: Socket } \n  ]\n  // ...\n})\nclass AppModule {}\n```", "```js\nclass Http {...} \n\n@Injectable() \nclass UserService { \n  constructor(private http: Http) {} \n} \n\n@NgModule({\n  // ...\n  providers: [ \n    UserService, \n    Http \n  ]\n})\nclass AppModule {}\n```", "```js\nclass DummyHttp {...} \n\n// ... \n\n@NgModule({\n  // ...\n  providers: [ \n    UserService, \n    { provide: Http, useClass: DummyHttp }\n  ]\n})\nclass TestingModule {}\n```", "```js\n@NgModule({\n  // ...\n  providers: [ \n    DummyHttp, \n    { provide: Http, useExisting: DummyHttp }, \n    UserService \n  ]\n})\nclass TestingModule {}\n```", "```js\n// ch6/configuring-providers/existing/app.ts\n\n// ...\n\nconst dummyHttp = new DummyHttp();\n\n@Component(...)\nclass AppComponent {\n  constructor(private service: UserService) {\n    console.log(service.http === dummyHttp);\n  }\n}\n\n@NgModule({\n  providers: [\n    { provide: DummyHttp, useValue: dummyHttp },\n    { provide: Http, useExisting: DummyHttp },\n    UserService\n  ],\n  // ...\n})\nclass AppModule {}\n```", "```js\n@NgModule({\n  // ...\n  providers: [\n    { \n      provide: TLSConnection, \n      useFactory: function(\n        socket: Socket, certificate: Certificate, crypto: Crypto) { \n          let connection = new TLSConnection(); \n          connection.certificate = certificate; \n          connection.socket = socket; \n          connection.crypto = crypto; \n          socket.open(); \n          return connection; \n        }, \n        deps: [Socket, Certificate, Crypto] \n    }, \n    { provide: BUFFER_SIZE, useValue: 42 },\n    Buffer, \n    Socket, \n    Certificate, \n    Crypto \n  ]\n})\nclass AppModule {}\n```", "```js\n@NgModule({\n  // ...\n  providers: [\n    // ...\n    { provide: BUFFER_SIZE, useValue: 42 },\n    Buffer, \n    Socket, \n    Certificate, \n    Crypto \n  ]\n})\nclass AppModule {} \n```", "```js\nlet connection = new TLSConnection();\nconnection.certificate = certificate;\nconnection.socket = socket;\nconnection.crypto = crypto;\nsocket.open();\nreturn connection;\n```", "```js\n{\n  provide: TLSConnection,\n  useFactory: function (socket: Socket, certificate: Certificate, crypto: Crypto) { \n    // ... \n  }, \n  deps: [Socket, Certificate, Crypto] \n}\n```", "```js\nabstract class SortingAlgorithm {\n  abstract sort(collection: BaseCollection): Collection;\n}\n\nclass BaseCollection {\n  getDefaultSort(): SortingAlgorithm {\n    // get some generic sorting algorithm...\n    return null;\n  }\n}\n\nclass Collection extends BaseCollection {\n  public sort: SortingAlgorithm;\n\n  constructor(sort: SortingAlgorithm) {\n    super();\n    this.sort = sort || this.getDefaultSort();\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: \"Open your browser's console\"\n})\nclass AppComponent {\n  constructor(private collection: Collection) {\n    console.log(collection);\n  }\n}\n\n@NgModule({\n  providers: [Collection],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  imports: [BrowserModule]\n})\nclass AppModule { }\n```", "```js\n// ch6/decorators/optional/app.ts\n\n@Injectable() \nclass Collection extends BaseCollection { \n  private sort: SortingAlgorithm;\n\n  constructor(@Optional() sort: SortingAlgorithm) { \n    super(); \n    this.sort = sort || this.getDefaultSort(); \n  } \n} \n```", "```js\n// ch6/configuring-providers/multi-providers/app.ts\n\nconst VALIDATOR = new InjectionToken('validator'); \n\ninterface EmployeeValidator { \n  (person: Employee): string; \n} \n\nclass Employee {...} \n\n@NgModule({\n  providers: [\n    {\n      provide: VALIDATOR,\n      multi: true,\n      useValue: (person: Employee) => {\n        if (!person.name) {\n          return 'The name is required';\n        }\n      }\n    },\n    {\n      provide: VALIDATOR,\n      multi: true,\n      useValue: (person: Employee) => {\n        if (!person.name || person.name.length < 1) {\n          return 'The name should be more than 1 symbol long';\n        }\n      }\n    },\n    Employee\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  imports: [BrowserModule]\n})\nclass AppModule { }\n```", "```js\nclass Employee { \n  name: string;\n\n  constructor(@Inject(VALIDATOR) private validators: EmployeeValidator[]) {}\n\n  validate() { \n    return this.validators \n      .map(v => v(this)) \n      .filter(value => !!value); \n  } \n} \n```", "```js\n@;Component({\n  selector: 'app',\n  template: '...'\n})\nclass AppComponent {\n  constructor(private employee: Employee) {\n    console.log(employee);\n  }\n}\n```", "```js\n// ch6/manual-injector/instantiate.ts\n\nimport { Injector } from '@angular/core';\n\n// ...\n\nconst injector = Injector.create([\n  { provide: BUFFER_SIZE, useValue: 42 },\n  {\n    provide: Buffer,\n    deps: [BUFFER_SIZE],\n    useFactory: function (size: number) {\n      return new Buffer(size);\n    }\n  },\n  {\n    provide: Socket,\n    deps: [Buffer],\n    useFactory: function (buffer: Buffer) {\n      return new Socket(buffer);\n    }\n  }\n]);\n```", "```js\n// ch6/manual-injector/simple-example.ts\n\nclass Http { }\n\nclass UserService {\n  constructor(public http: Http) { }\n}\n\nconst parentInjector = Injector.create([{\n  provide: Http,\n  deps: [],\n  useFactory() {\n    return new Http();\n  }\n}]);\n\nconst childInjector = Injector.create([{\n  provide: UserService,\n  deps: [Http],\n  useFactory(http) {\n    return new UserService(http);\n  }\n}], parentInjector);\n\nconsole.log(childInjector.get(UserService));\nconsole.log(childInjector.get(Http) === parentInjector.get(Http));\n\n```", "```js\n// ch5/tooltip/app.ts\n\n// ... \n@Directive(...) \nexport class Tooltip { \n  @Input() saTooltip: string; \n\n  constructor(private el: ElementRef, private overlay: Overlay) { \n    this.overlay.attach(el.nativeElement); \n  } \n  // ... \n}\n\n@Component({ \n  // ... \n  providers: [Overlay]\n}) \nclass App {} \n```", "```js\n@Component({ \n  // ... \n  providers: [Overlay]\n})\nclass App {} \n```", "```js\n@Directive({ \n  selector: '[saTooltip]', \n  providers: [{ provide: Overlay, useClass: OverlayMock }] \n}) \nexport class Tooltip { \n @Input() saTooltip: string; \n\n  constructor(private el: ElementRef, private overlay: Overlay) { \n    this.overlay.attach(el.nativeElement); \n  } \n  // ... \n} \n\n// ... \n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```js\n<markdown-panel> \n  <panel-title># Title</pane-title> \n  <panel-content> \n# Content of the panel \n* First point \n* Second point \n  </panel-content> \n</markdown-panel> \n```", "```js\nimport * as markdown from 'markdown';\n\nclass Markdown { \n  toHTML(md) { \n    return markdown.toHTML(md); \n  } \n} \n```", "```js\n// ch6/directives/app.ts \n@Component({ \n  selector: 'markdown-panel', \n  viewProviders: [Markdown], \n  styles: [...], \n  template: ` \n    <div class=\"panel\"> \n      <div class=\"panel-title\"> \n        <ng-content select=\"panel-title\"></ng-content> \n      </div> \n      <div class=\"panel-content\"> \n        <ng-content select=\"panel-content\"></ng-content> \n      </div> \n    </div>` \n}) \nclass MarkdownPanel { \n  constructor(private el: ElementRef, private md: Markdown) {}\n\n  ngAfterContentInit() { \n    let el = this.el.nativeElement; \n    let title = el.querySelector('panel-title'); \n    let content = el.querySelector('panel-content'); \n    title.innerHTML = this.md.toHTML(title.innerHTML); \n    content.innerHTML = this.md.toHTML(content.innerHTML); \n  } \n} \n```", "```js\n<markdown-panel> \n  <panel-title>### Small title</panel-title> \n  <panel-content> \n    Some code \n  </panel-content> \n  <markdown-button>*Click to toggle*</markdown-button> \n</markdown-panel> \n```", "```js\n@Component({ \n  selector: 'markdown-panel', \n  viewProviders: [Markdown], \n  styles: [...], \n  template: ` \n    <div class=\"panel\"> \n      <markdown-button>*Click to toggle*</markdown-button> \n      <div class=\"panel-title\"> \n        <ng-content select=\"panel-title\"></ng-content> \n      </div> \n      <div class=\"panel-content\"> \n        <ng-content select=\"panel-content\"></ng-content> \n      </div> \n    </div>` \n}) \n// ...\n```", "```js\n@Component({\n  selector: 'markdown-panel',\n  viewProviders: [{ provide: Markdown, useValue: null }],\n  // ...\n})\nclass MarkdownPanel {\n  constructor(private el: ElementRef, private md: Markdown) { }\n\n  // ...\n}\n\n@Component({\n  selector: 'app',\n  providers: [Markdown],\n  // ...\n})\nclass App {\n  constructor() { }\n}\n```", "```js\n@Component(...)\nclass MarkdownPanel {\n  constructor(private el: ElementRef, @SkipSelf() private md: Markdown) { }\n}\n```"]