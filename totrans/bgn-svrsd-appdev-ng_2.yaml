- en: Chapter 2. Creating the Application Module and Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 创建应用程序模块和组件
- en: In this lesson, we will start by creating a `PostsModule` that contains all
    the code related to displaying the posts that come from our API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，我们将首先创建一个包含所有与显示来自我们的API的帖子相关的代码的`PostsModule`。
- en: Inside this module, we will add various components, a service, and two resolvers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模块中，我们将添加各种组件、一个服务和两个解析器。
- en: The components are used to display the data in the browser. We will go over
    their use in this lesson. The service is used to retrieve the data from the API.
    Lastly, we will add resolvers to our app; resolvers make sure the data from the
    service is available at the moment we navigate from one route to another.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 组件用于在浏览器中显示数据。在本课中，我们将介绍它们的用法。服务用于从API检索数据。最后，我们将向我们的应用程序添加解析器；解析器确保在从一个路由导航到另一个路由时，服务中的数据可用。
- en: Lesson Objectives
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程目标
- en: Explore the types of components that will be used in our app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索我们应用程序中将要使用的组件类型
- en: Create and load the PostsModule
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并加载PostsModule
- en: Create the container components, such as PostsComponent and ProfileComponent
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建容器组件，例如PostsComponent和ProfileComponent
- en: Add dummy posts and profiles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加虚拟帖子和个人资料
- en: Create a service to retrieve data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于检索数据的服务
- en: Create the presentational components, such as PostListComponent, PostItemComponent,
    and ProfileItemComponent
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建表现性组件，例如PostListComponent、PostItemComponent和ProfileItemComponent
- en: Create and import resolvers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并导入解析器
- en: Types of Components
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件类型
- en: In this section, we will take a look at how we can differentiate our components
    by making a distinction between **container** and **presentational** components.
    Sometimes, they are also called *smart* and *dumb* components, referring to how
    much *knowledge* of the world outside of the components each of them has.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何通过区分**容器**和**表现性**组件来区分我们的组件。有时，它们也被称为*智能*和*愚笨*组件，这取决于每个组件对组件外部世界的*知识*程度。
- en: 'The main difference we can make is the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做出的主要区别如下：
- en: A presentational component is responsible for *how things look*
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表现性组件负责**外观**
- en: A container component is responsible for *how things work*
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器组件负责**如何工作**
- en: We will dive into more details of why this distinction is important when we
    create them, but we can give away a few things already.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建它们时，我们将深入探讨这种区分为什么很重要，但我们可以提前透露一些信息。
- en: Presentational Components
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表现性组件
- en: 'We can say the following about presentational components:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于表现性组件，我们可以这样说：
- en: They get their data *passed in* using the `@Input()` decorator
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们使用`@Input()`装饰器将数据**传递**进来
- en: Any operations are *passed up* using the `@Output()` decorator
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何操作都是使用`@Output()`装饰器**传递**上去的
- en: They handle the markup and the styling of the application
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们处理应用程序的标记和样式
- en: They mostly just contain other presentational components
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们主要只包含其他表现性组件
- en: They have no knowledge (or dependencies) on any routes or services from the
    app
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们对任何路由或服务都没有知识（或依赖）
- en: Container Components
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器组件
- en: 'We can say the following about container components:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于容器组件，我们可以这样说：
- en: They retrieve their data from a service or a resolver
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们从服务或解析器中检索数据
- en: They handle the operations that they receive from the presentational components
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们处理从表现性组件接收到的操作
- en: They have very little markup and styling
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们具有非常少的标记和样式
- en: They will often contain both presentational and container components
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们通常会包含表现性和容器组件
- en: Folder Structure
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: 'To make the distinction clear in our project, we will use different folders
    for each type of component:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的项目中明确区分，我们将为每种类型的组件使用不同的文件夹：
- en: The `src/<module>/components` folder is where the presentational components
    live
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/<module>/components`文件夹是表现性组件所在的位置'
- en: The `src/<module>/containers` folder is where the container components live
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/<module>/containers`文件夹是容器组件所在的位置'
- en: Generate and Lazy Load the PostsModule
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成并懒加载PostsModule
- en: We will generate the `PostsModule` using the `ng` command and lazy load the
    `PostsModule` in the `AppRoutingModule`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ng`命令生成`PostsModule`，并在`AppRoutingModule`中懒加载`PostsModule`。
- en: Using the `ng generate` command, we can generate or scaffold out all sorts of
    code that can be used in our Angular application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng generate`命令，我们可以生成或构建出所有可用于我们的Angular应用程序的代码。
- en: We will use the `ng generate module` command to generate our `PostsModule`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ng generate module`命令生成我们的`PostsModule`。
- en: 'This command has one required parameter, which is the name. In our application,
    we will call this module `posts`. A second optional parameter is passed in in
    order to create a separate file to hold the routes for this module, the `PostsRoutingModule`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令有一个必需的参数，即名称。在我们的应用程序中，我们将此模块称为`posts`。还有一个可选参数被传递，以便为该模块创建一个单独的文件来保存路由，即`PostsRoutingModule`：
- en: Open your terminal and navigate to the project directory.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录内运行以下命令：
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see from the output of the command, our `PostsModule` is generated
    in the new folder `src/app/posts`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从命令输出中看到的那样，我们的`PostsModule`是在新的文件夹`src/app/posts`中生成的：
- en: '![Generate and Lazy Load the PostsModule](img/1.33.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![生成和懒加载PostsModule](img/1.33.jpg)'
- en: In contrast to how we load our `UiModule` by importing it into our `AppModule`,
    we will lazy load our `PostsModule` using our `AppRoutingModule`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们通过将`UiModule`导入到`AppModule`中来加载`UiModule`的方式不同，我们将使用`AppRoutingModule`来懒加载`PostsModule`。
- en: This is an optimization of how our application is built and it makes sure that
    our application has a smaller initial file to download by using a technology called
    **code splitting**. This basically bundles each lazy loaded module into its own
    file and the browser is instructed to download this file when needed, but not
    before.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对我们应用程序构建方式的优化，并确保我们的应用程序有一个更小的初始文件要下载，这是通过使用名为**代码拆分**的技术来实现的。这基本上是将每个懒加载的模块捆绑到其自己的文件中，浏览器被指示在需要时下载此文件，但不是在需要之前。
- en: We will add two routes to our main application file. The first route is a route
    with a blank `path` property (our default route) and its function is to redirect
    to the `/posts` route.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在主应用程序文件中添加两个路由。第一个路由具有空白的`path`属性（我们的默认路由），其功能是重定向到`/posts`路由。
- en: The second route is the `/posts` route and it lazy loads the `PostsModule`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个路由是`/posts`路由，它懒加载`PostsModule`。
- en: 'If the user navigates to the app, the first route that will be found is our
    blank redirect route. This will tell the router to navigate to `/posts`. The router
    finds the `/posts` route and navigates the user to that module:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户导航到应用程序，第一个找到的路由是我们的空白重定向路由。这将告诉路由器导航到`/posts`。路由器找到`/posts`路由并将用户导航到该模块：
- en: Open the project in your editor.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开项目。
- en: Open the `src/app/app-routing.module.ts` file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/app-routing.module.ts`文件。
- en: Locate our only existing route object that is defined in the `routes` property.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到在`routes`属性中定义的唯一现有路由对象。
- en: 'Inside this new `children` array, we create two routes that look like this:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新的`children`数组中，我们创建了两个看起来像这样的路由：
- en: '[PRE1]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here are a few things to explain how this works:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些解释这个工作原理的事情：
- en: First, we define that we want to have children to our main route. This makes
    sure that all of our children get rendered in the `<router-outlet>` that is defined
    in the `LayoutComponent` in the *Creating the LayoutComponent* section.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们定义我们想要在我们的主路由下有子路由。这确保了所有子路由都在*创建布局组件*部分中定义的`<router-outlet>`中渲染。
- en: We define our first route to respond to all paths (that's what the empty string
    does), and we tell it to redirect to the `/posts` route.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了第一个路由以响应所有路径（这就是空字符串的作用），并告诉它重定向到`/posts`路由。
- en: Lastly, we create a `posts` route and we tell it to load its children from our
    new module. The `loadChildren` property is what enables the lazy loading.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个`posts`路由，并告诉它从我们新的模块中加载其子路由。`loadChildren`属性是启用懒加载的。
- en: When we refresh our page in the browser, we can see that nothing changes in
    the app itself, but we can see that our URL has changed; it has redirected to
    `/posts`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中刷新页面时，我们可以看到应用程序本身没有任何变化，但我们可以看到我们的URL已经改变；它已经重定向到`/posts`。
- en: Let's move on to the next section to create our container components so that
    we can start seeing data!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个部分来创建我们的容器组件，这样我们就可以开始看到数据了！
- en: Creating the Container Components
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建容器组件
- en: In this section, we will use `ng generate` to create the `PostsComponent` and
    `ProfileComponent` inside the `PostsModule`, add routes to both components, and
    add dummy data that we can use to build our presentational components.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`ng generate`来在`PostsModule`内部创建`PostsComponent`和`ProfileComponent`，为这两个组件添加路由，并添加我们可以用来构建表示组件的虚拟数据。
- en: Creating PostsComponent and ProfileComponent
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建PostsComponent和ProfileComponent
- en: We will be using the `ng generate` command to create our `PostsComponent`. This
    is the component that will eventually list an overview for all our posts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ng generate` 命令创建我们的 `PostsComponent`。这是最终列出所有帖子概览的组件。
- en: The application route to this component will be `/posts:`
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件的应用程序路由将是 `/posts:`
- en: Open your terminal and navigate to the project directory.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Creating PostsComponent and ProfileComponent](img/1.35.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 PostsComponent 和 ProfileComponent](img/1.35.jpg)'
- en: Open the `src/app/posts/posts-routing.module.ts` file.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/posts-routing.module.ts` 文件。
- en: 'Import the `PostsComponent`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `PostsComponent`：
- en: '[PRE4]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following route to the `routes` array:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下路由添加到 `routes` 数组：
- en: '[PRE5]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now when we refresh the page in our app, we should see the text **posts works!**
    between our header and footer:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们刷新应用程序中的页面，我们应该在页眉和页脚之间看到文本 **posts works!**：
- en: '![Creating PostsComponent and ProfileComponent](img/1.37.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建 PostsComponent 和 ProfileComponent](img/1.37.jpg)'
- en: Very similar to how we created the PostsComponent, we will now create the `ProfileComponent`.
    This is the component that will be responsible for displaying the profile that
    made the post.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们创建 PostsComponent 的方式非常相似，我们现在将创建 `ProfileComponent`。这是负责显示发帖个人资料的组件。
- en: 'The application route to this component will be `/posts/<id>`, where `<id>`
    is the identifier of the profile we want to display:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件的应用程序路由将是 `/posts/<id>`，其中 `<id>` 是我们想要显示的个人资料标识符：
- en: Open your terminal and navigate to the project directory.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE6]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Creating PostsComponent and ProfileComponent](img/1.38.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 PostsComponent 和 ProfileComponent](img/1.38.jpg)'
- en: Open the `src/app/posts/posts-routing.module.ts` file.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/posts-routing.module.ts` 文件。
- en: 'Import the `ProfileComponent`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `ProfileComponent`：
- en: '[PRE7]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following route to the `routes` array:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下路由添加到 `routes` 数组：
- en: '[PRE8]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When our application refreshes and we navigate our browser to `http://localhost:4200/posts/1`,
    we should see the text **profile works!**:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序刷新并且我们将浏览器导航到 `http://localhost:4200/posts/1` 时，我们应该看到文本 **profile works!**：
- en: '![Creating PostsComponent and ProfileComponent](img/1.40.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![创建 PostsComponent 和 ProfileComponent](img/1.40.jpg)'
- en: Adding Dummy Post and Profile Data
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加虚拟帖子和个人资料数据
- en: 'In order to get a feel of how our application works, we will add some dummy
    data to our components so we have something to work with. We will add a service
    to retrieve the data from our API:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们的应用程序是如何工作的，我们将在我们的组件中添加一些虚拟数据，以便我们有东西可以工作。我们将添加一个服务来从我们的 API 获取数据：
- en: Open the `src/app/posts/containers/posts/posts.component.ts` file.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/containers/posts/posts.component.ts` 文件。
- en: 'Create a new property called `posts` and define it with the following structure:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `posts` 的新属性，并使用以下结构定义它：
- en: '[PRE9]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following import to the top of the file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下导入添加到文件顶部：
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `items` array inside our `posts` object is what will eventually hold our
    posts. We will use a simple loop to add a few dummy items.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们 `posts` 对象中的 `items` 数组将最终包含我们的帖子。我们将使用一个简单的循环添加一些虚拟项。
- en: 'Locate the `ngOnInit()` method and add the following code to the method body.
    This code creates 10 dummy elements in our `posts` array so we can display some
    data. The details are not relevant as this block will be obsolete in the next
    lesson when we retrieve data from our API:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到 `ngOnInit()` 方法，并将以下代码添加到方法体中。此代码在 `posts` 数组中创建 10 个虚拟元素，以便我们可以显示一些数据。这些细节并不重要，因为当我们在下一课从
    API 获取数据时，此块将变得过时：
- en: '[PRE11]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the last step, we need to update our template. Remove all the content from
    the `template` property and replace it with the following markup:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最后一步，我们需要更新我们的模板。从 `template` 属性中删除所有内容，并用以下标记替换它：
- en: '[PRE12]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The code in our template uses the `ngFor` directive to loop over the content
    of the `posts` array. For each of those items, it prints an `a` tag that links
    to the post by `id` using the `routerLink` directive. The link text is set to
    `post.text`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模板中的代码使用 `ngFor` 指令遍历 `posts` 数组的内容。对于这些项目中的每一个，它打印一个 `a` 标签，通过 `routerLink`
    指令链接到帖子 `id`。链接文本设置为 `post.text`。
- en: 'This is what we get in the browser:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们浏览器中看到的内容：
- en: '![Adding Dummy Post and Profile Data](img/1.42.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![添加虚拟帖子和个人资料数据](img/1.42.jpg)'
- en: Lastly, we will add some dummy data to our `ProfileComponent:`
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将向我们的 `ProfileComponent` 添加一些虚拟数据：
- en: Open the `src/app/posts/containers/profile/profile.component.ts` file.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/containers/profile/profile.component.ts` 文件。
- en: 'Create a new property called `profile` and define it with the following structure:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`profile`的新属性，并使用以下结构定义它：
- en: '[PRE13]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following `import` to the top of the file:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下`import`：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Locate the `constructor()` method and add the following code to the method
    parameters:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`constructor()`方法，并将以下代码添加到方法参数中：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Locate the `ngOnInit()` method and add the following code to the method body.
    This code *subscribes* to the parameters of the current route and when it changes,
    it reads the value of the `profileId` property in the URL and assigns it to the
    `id` property of `this.profile`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`ngOnInit()`方法，并将以下代码添加到方法体中。此代码*订阅*了当前路由的参数，当它改变时，它读取URL中`profileId`属性的值，并将其分配给`this.profile`的`id`属性：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For the last step, we need to update our template. Remove all the content from
    the `template` property and replace it with the following markup:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最后一步，我们需要更新我们的模板。从`template`属性中删除所有内容，并用以下标记替换：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When we go to `http://localhost:4200/posts/5`, we will see the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问`http://localhost:4200/posts/5`时，我们将看到以下内容：
- en: '![Adding Dummy Post and Profile Data](img/1.44.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![添加模拟帖子和个人资料数据](img/1.44.jpg)'
- en: The code in the `ngOnInit` block *subscribes* to the parameters of the *activated
    route*. When we retrieve that on that subscription, we use it to append the ID
    to the string in the `post.text` property, making the content dynamic.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngOnInit`块中的代码*订阅*了*激活路由*的参数。当我们通过订阅检索这些参数时，我们使用它将ID附加到`post.text`属性中的字符串，使内容动态化。'
- en: We can now click through from the `PostsContainer` to the `ProfileContainer`
    component. We can use the Back button or the link in the header to go back.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从`PostsContainer`点击到`ProfileContainer`组件。我们可以使用后退按钮或页眉中的链接返回。
- en: Our container components are set up and the routes work. Let's add some real
    data from the API!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的容器组件已设置好，路由也正常工作。让我们添加一些来自API的真实数据！
- en: Creating a Service to Retrieve Data
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用于检索数据的服务
- en: In this section, we will use `ng generate` to create the `PostsService`, use
    `environment` to store the API URL, and use the `PostsService` in our components.
    We will then define our API calls in the `PostsService` and leverage the `HttpClientModule`
    to enable HTTP access.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`ng generate`创建`PostsService`，使用`环境`存储API URL，并在我们的组件中使用`PostsService`。然后，我们在`PostsService`中定义我们的API调用，并利用`HttpClientModule`启用HTTP访问。
- en: Generating the Service
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成服务
- en: 'We will use the `ng generate service` command to generate a service that will
    handle the interaction with our API:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ng generate service`命令生成一个服务，该服务将处理与我们的API的交互：
- en: Open your terminal and navigate to the project directory.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE18]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Generating the Service](img/1.45.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![生成服务](img/1.45.jpg)'
- en: Storing Our API URL
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储我们的API URL
- en: We will use the `environment` of Angular CLI to store our API URL. Using the
    `environment`, we can define a different URL for development and production environments.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Angular CLI的`环境`来存储我们的API URL。使用`环境`，我们可以为开发和生产环境定义不同的URL。
- en: By default, the application generated with Angular CLI comes with two predefined
    environments. These environments are defined in `.angular-cli.json` in the project
    root.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，使用Angular CLI生成的应用程序带有两个预定义的环境。这些环境在项目根目录的`.angular-cli.json`中定义。
- en: Open the `src/environments/environment.ts` file.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/environments/environment.ts`文件。
- en: Inside the `environment` variable, add an `apiUrl` key and assign as the value
    the string `http://localhost:3000/api`, which is the URL to the development API:![Storing
    Our API URL](img/1.46.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`环境变量`中，添加一个`apiUrl`键，并将其值设置为字符串`http://localhost:3000/api`，这是开发API的URL：![存储我们的API
    URL](img/1.46.jpg)
- en: Open the `src/environments/environment.prod.ts` file.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/environments/environment.prod.ts`文件。
- en: Inside the `environment` variable, add an `apiUrl` key and assign as the value
    the string `https://packt-angular-social.now.sh/api`, which is the URL to the
    production API:![Storing Our API URL](img/1.47.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`环境变量`中，添加一个`apiUrl`键，并将其值设置为字符串`https://packt-angular-social.now.sh/api`，这是生产API的URL：![存储我们的API
    URL](img/1.47.jpg)
- en: Referencing Our New PostsService in Our Container Components
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的容器组件中引用我们的新PostsService
- en: In this service, we will reference our new `PostsService` in our container components
    and that way define what our service should look like.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在此服务中，我们将在容器组件中引用我们的新`PostsService`，从而定义我们的服务应该是什么样子。
- en: We will use the `OnInit` component life cycle hook provided by Angular to call
    into our inject service and invoke the `getPosts` method on that service.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Angular 提供的 `OnInit` 组件生命周期钩子来调用我们的注入服务，并在该服务上调用 `getPosts` 方法。
- en: We will *map* over the result to only get the items and then we will subscribe
    and set the result of the method to our `posts` property.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 *映射* 结果以仅获取项目，然后我们将订阅并将方法的结果设置为我们的 `posts` 属性。
- en: 'Note that we do the same thing for both the `PostsComponent` and the `ProfileComponent`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们对 `PostsComponent` 和 `ProfileComponent` 都做了同样的事情：
- en: Open the `src/app/posts/containers/posts/posts.component.ts` file.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/containers/posts/posts.component.ts` 文件。
- en: 'Add an `import` statement for our new `PostsService`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的新 `PostsService` 添加一个 `import` 语句：
- en: '[PRE19]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update the constructor to *inject* the `PostsService` and make it available
    under the `private postsService` variable:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新构造函数以 *注入* `PostsService` 并使其在 `private postsService` 变量下可用：
- en: '[PRE20]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Remove the contents of the `ngOnInit` method and update it as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `ngOnInit` 方法的内容并更新如下：
- en: '[PRE21]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Open the `src/app/posts/containers/posts/profile.component.ts` file.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/containers/posts/profile.component.ts` 文件。
- en: 'Add an `import` statement for our new `PostsService`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的新 `PostsService` 添加一个 `import` 语句：
- en: '[PRE22]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Update the constructor to *inject* the `PostsService`, and make sure to leave
    our `private route` dependency in place:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新构造函数以 *注入* `PostsService` 并确保留下我们的 `private route` 依赖项：
- en: '[PRE23]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remove the contents of the `ngOnInit` method and update it as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `ngOnInit` 方法的内容并更新如下：
- en: '[PRE24]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Defining the Public Methods
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义公共方法
- en: The next step is to define our public methods in our `PostsService` and make
    sure that these retrieve the data we need from our API.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在我们的 `PostsService` 中定义我们的公共方法，并确保这些方法从我们的 API 获取所需的数据。
- en: 'We will add two methods in our `PostsService`. The first method is the `getPosts`
    method, which does not take any arguments and returns all the posts from the API.
    The second method is the `getProfile` method, which takes the `profileId` as an
    argument. It returns the profile related to the `profileId` that is passed in
    as the argument, and includes all the related posts that are made by that profile:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `PostsService` 中添加两个方法。第一个方法是 `getPosts` 方法，它不接受任何参数并从 API 返回所有帖子。第二个方法是
    `getProfile` 方法，它接受 `profileId` 作为参数。它返回与传入的 `profileId` 相关的配置文件，并包括该配置文件创建的所有相关帖子：
- en: Open the `src/app/posts/services/posts.service.ts` file.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/services/posts.service.ts` 文件。
- en: 'Add an `import` statement to import the `HttpClient` from `@angular/common/http`
    and a reference to the `environment` where we have our API URL defined:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `import` 语句以从 `@angular/common/http` 导入 `HttpClient` 以及一个指向我们定义 API URL
    的 `environment` 的引用：
- en: '[PRE25]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update the constructor to inject the `HttpClient` and make it available under
    the `private http` variable:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新构造函数以注入 `HttpClient` 并使其在 `private http` 变量下可用：
- en: '[PRE26]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a new method called `getPosts() {}` and add the following content:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `getPosts() {}` 的新方法并添加以下内容：
- en: '[PRE27]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a new method called `getProfile(profileId) { }` and add the following
    content:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `getProfile(profileId) { }` 的新方法，并添加以下内容：
- en: '[PRE28]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Importing HttpClientModule in Our AppModule
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的 AppModule 中导入 HttpClientModule
- en: 'We are almost done creating our `PostsService`, but there is still one thing
    we need to fix. When we refresh our application in our browser, we see that we
    have an error message in our **Console** tab:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了 `PostsService` 的创建，但还有一件事需要修复。当我们刷新浏览器中的应用程序时，我们看到在 **控制台** 选项卡中有一个错误消息：
- en: '![Importing HttpClientModule in Our AppModule](img/1.50.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的 AppModule 中导入 HttpClientModule](img/1.50.jpg)'
- en: The reason we get this error is because we have used the `HttpClient` in our
    service, but Angular does not know where this module comes from. In order to fix
    this, we need to import `HttpClientModule` in our `AppModule:`
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到这个错误的原因是因为我们在服务中使用了 `HttpClient`，但 Angular 不知道这个模块来自哪里。为了解决这个问题，我们需要在 `AppModule:`
    中导入 `HttpClientModule`。
- en: Open the `src/app/app.module.ts` file.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/app.module.ts` 文件。
- en: 'Add an `import` statement to import the `HttpClientModule` from `@angular/common/http`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `import` 语句以从 `@angular/common/http` 导入 `HttpClientModule`。
- en: '[PRE29]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `imports` array in the `NgModule` decorator to import `HttpClientModule`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `NgModule` 装饰器中的 `imports` 数组以导入 `HttpClientModule`：
- en: '[PRE30]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Importing HttpClientModule in Our AppModule](img/1.51.jpg)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在我们的 AppModule 中导入 HttpClientModule](img/1.51.jpg)'
- en: 'When we now check the **Console** tab, we see that there is another error message,
    **.map is not a function**:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在检查 **控制台** 选项卡时，我们看到还有一个错误消息，**.map 不是一个函数**：
- en: '![Importing HttpClientModule in Our AppModule](img/1.52.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![在 AppModule 中导入 HttpClientModule](img/1.52.jpg)'
- en: To fix this, we need to import the `map` operator from the `rxjs` library.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要从 `rxjs` 库中导入 `map` 操作符。
- en: The `rxjs` library is one of the main dependencies of Angular and is used to
    implement the *Observable* pattern in Angular. It is used by Angular itself in
    the router and the HTTP client.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`rxjs` 库是 Angular 的主要依赖之一，用于在 Angular 中实现 *Observable* 模式。它被 Angular 本身用于路由和
    HTTP 客户端。'
- en: 'The `map` operator is one of the operators shipped by `rxjs` and it can be
    used to map over the data before you subscribe to it. This is useful if you want
    to manipulate the data you work with:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`map` 操作符是 `rxjs` 提供的操作符之一，可以在订阅之前对数据进行映射。如果你想要操作你正在处理的数据，这很有用：'
- en: Open the `src/app/app.module.ts` file.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/app.module.ts` 文件。
- en: 'Add an `import` statement to import the `map` operator from the `rxjs` library:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `import` 语句来导入 `rxjs` 库中的 `map` 操作符：
- en: '[PRE31]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: When we now refresh our application, we should see a list of posts retrieved
    from the API!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们刷新应用程序时，我们应该看到从 API 获取的帖子列表！
- en: Let's continue to add some presentational components to give our posts some
    style!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加一些表现性组件，为我们的帖子添加一些样式！
- en: Creating the Presentational Components
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表现性组件
- en: In this section, we will use `ng generate component` to create the `PostListComponent`
    and `PostItemComponent` inside the `PostsModule`. We will then add a UI to these
    components and use these components in our container components.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 `ng generate component` 在 `PostsModule` 内创建 `PostListComponent` 和
    `PostItemComponent`。然后我们将为这些组件添加 UI 并在容器组件中使用这些组件。
- en: The `PostListComponent` is responsible for taking in an array of posts using
    its *Input*, and it loops over each of these posts and invokes the `PostItemComponent`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`PostListComponent` 负责通过其 *Input* 接收一个帖子数组，并遍历这些帖子并调用 `PostItemComponent`。'
- en: The `PostItemComponent` accepts a single post as its *Input* and displays that
    post.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`PostItemComponent` 接受单个帖子作为其 *Input* 并显示该帖子。'
- en: Creating the PostListComponent
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 PostListComponent
- en: We will be using the `ng generate` command to create our `PostListComponent`.
    This is the component that will loop over our posts and will be called from our
    `PostsComponent:`
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ng generate` 命令来创建我们的 `PostListComponent`。这是将遍历我们的帖子并从我们的 `PostsComponent`
    调用的组件：
- en: Open the `src/app/posts/container/posts/posts.component.ts` file.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/container/posts/posts.component.ts` 文件。
- en: 'Update the template to the following:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板更新为以下内容：
- en: '[PRE32]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open your terminal and navigate to the project directory.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE33]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Creating the PostListComponent](img/1.54.jpg)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 PostListComponent](img/1.54.jpg)'
- en: Open the `src/app/posts/components/post-list/post-list.component.ts` file.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/components/post-list/post-list.component.ts` 文件。
- en: Import the `Input` from `@angular/core` by adding it to the existing `import`
    statement.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其添加到现有的 `import` 语句中，从 `@angular/core` 导入 `Input`。
- en: 'Add the following property in the component class:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件类中添加以下属性：
- en: '[PRE34]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Update the template to the following:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板更新为以下内容：
- en: '[PRE35]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Creating the PostItemComponent
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 PostItemComponent
- en: We will be using the `ng generate` command to create our `PostItemComponent:`
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ng generate` 命令来创建我们的 `PostItemComponent`：
- en: Open your terminal and navigate to the project directory.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE36]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![Creating the PostItemComponent](img/1.56.jpg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 PostItemComponent](img/1.56.jpg)'
- en: Open the `src/app/posts/components/post-item/post-item.component.ts` file.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/components/post-item/post-item.component.ts` 文件。
- en: Import the `Input` from `@angular/core` by adding it to the existing `import`
    statement.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其添加到现有的 `import` 语句中，从 `@angular/core` 导入 `Input`。
- en: 'Add the following property in the component class:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件类中添加以下属性：
- en: '[PRE37]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Update the template to the following:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板更新为以下内容：
- en: '[PRE38]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Update the `styles` property from our component to the following:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组件的 `styles` 属性更新为以下内容：
- en: '[PRE39]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If we refresh our browser now, this is how our page will look:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在刷新浏览器，页面将看起来是这样的：
- en: '![Creating the PostItemComponent](img/1.58.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![创建 PostItemComponent](img/1.58.jpg)'
- en: Creating the ProfileItemComponent
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 ProfileItemComponent
- en: We will be using the `ng generate` command to create our `ProfileItemComponent:`
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ng generate` 命令来创建我们的 `ProfileItemComponent`：
- en: Open the `src/app/posts/container/posts/profile.component.ts` file.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/container/posts/profile.component.ts` 文件。
- en: 'Update the template to the following:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板更新为以下内容：
- en: '[PRE40]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Open your terminal and navigate to the project directory.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并导航到项目目录。
- en: 'Run the following command from inside the project directory:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目目录中运行以下命令：
- en: '[PRE41]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Open the `src/app/posts/components/profile-item/profile-item.component.ts` file.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/posts/components/profile-item/profile-item.component.ts`文件。
- en: Import the `Input` from `@angular/core` by adding it to the existing `import`
    statement.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`Input`从`@angular/core`导入到现有的`import`语句中。
- en: 'Add the following property in the component class:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件类中添加以下属性：
- en: '[PRE42]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Update the template to the following:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板更新为以下内容：
- en: '[PRE43]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Update the `styles` property from our component to the following:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们组件中的`styles`属性更新为以下内容：
- en: '[PRE44]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'When we now refresh the application in our browser, we see that the content
    is styled and that the navigation still works as expected:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在在浏览器中刷新应用程序时，我们看到内容被样式化，并且导航仍然按预期工作：
- en: '![Creating the ProfileItemComponent](img/1.60.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![创建ProfileItemComponent](img/1.60.jpg)'
- en: We have successfully separated the concerns of retrieving the data and displaying
    it.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地将检索数据和显示数据的关注点分离了。
- en: It's generally a good idea to keep components as small and simple as possible;
    in particular, our `PostItemComponent` could probably be split up into multiple
    components.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，保持组件尽可能小和简单是一个好主意；特别是，我们的`PostItemComponent`可能可以被拆分成多个组件。
- en: For our purpose, this works perfectly and we can continue with our last step
    in this lesson, which is to properly handle retrieving our data using the Angular
    router.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，这完全适用，我们可以继续本课的最后一个步骤，即使用Angular路由器正确处理数据的检索。
- en: Creating Resolvers to Retrieve Data Using the Router
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由器创建用于检索数据的解析器
- en: In this section, we will manually create two Injectable classes that act as
    resolvers and then configure our router to use these resolvers. We will then update
    our container components to use this resolved data.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将手动创建两个作为解析器的可注入类，然后配置我们的路由器以使用这些解析器。然后我们将更新我们的容器组件以使用这些解析后的数据。
- en: A resolver is a class that we can use to fetch the data that we use in our component
    *before* the component is displayed. We call the resolvers in the routes where
    we need the data. In our implementation, the resolvers retrieve the data from
    the API and return it so it can be displayed in the components.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器是一个类，我们可以在组件显示之前使用它来获取我们在组件中使用的数据。我们在需要数据的路由中调用解析器。在我们的实现中，解析器从API检索数据并返回它，以便可以在组件中显示。
- en: Note
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information about resolvers can be found at: [https://angular.io/guide/router#resolve-pre-fetching-component-data](https://angular.io/guide/router#resolve-pre-fetching-component-data).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于解析器的信息可以在：[https://angular.io/guide/router#resolve-pre-fetching-component-data](https://angular.io/guide/router#resolve-pre-fetching-component-data)找到。
- en: Our application is quite neatly structured already, but there is one thing that
    we can optimize.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序结构已经很整洁了，但有一件事我们可以优化。
- en: 'In order to see what our problem is, open Chrome Developer Tools and then the
    **Performance** tab:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到我们的问题是什么，打开Chrome开发者工具并转到**性能**标签页：
- en: '![Creating Resolvers to Retrieve Data Using the Router](img/1.61.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![使用路由器创建用于检索数据的解析器](img/1.61.jpg)'
- en: 'Hit the cog icon and set **Network** to **Slow 3G**:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 点击齿轮图标，将**网络**设置为**慢速3G**：
- en: '![Creating Resolvers to Retrieve Data Using the Router](img/1.62.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![使用路由器创建用于检索数据的解析器](img/1.62.jpg)'
- en: If we now click around in our application, we will see that that our page navigation
    still works, but we are presented with empty pages.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在我们的应用程序中点击，我们会看到我们的页面导航仍然正常工作，但我们看到的是空页面。
- en: The reason for this is that while our components are loaded correctly, they
    still need to retrieve the data after they are loaded. This is because our components
    call into the `PostsService` from our `ngOnInit` method.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是，虽然我们的组件加载正确，但它们在加载后仍然需要检索数据。这是因为我们的组件从`ngOnInit`方法中调用`PostsService`。
- en: It would be better if our router could make sure that the component has all
    the needed data loaded before entering the page.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的路由器能确保在进入页面之前组件已经加载了所有需要的数据，那就更好了。
- en: Fortunately, the Angular router provides a way to handle this using resolvers.
    They will resolve the data before entering the route, and in our component, we
    can just take this resolved data and display it.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Angular 路由器提供了一种使用解析器来处理这种情况的方法。它们会在进入路由之前解析数据，在我们的组件中，我们只需取这些解析后的数据并显示它。
- en: The resolvers that we create need the `@Injectable()` decorator to make sure
    they are part of the dependency injection in Angular.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的解析器需要`@Injectable()`装饰器来确保它们是Angular依赖注入的一部分。
- en: Creating Resolvers
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建解析器
- en: 'Now we will create a resolver that resolves our post:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个解析器来解析我们的帖子：
- en: 'Open a terminal and run the following command:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令：
- en: '[PRE45]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![Creating Resolvers](img/1.63.jpg)'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建解析器](img/1.63.jpg)'
- en: Open the `src/app/posts/resolvers/posts-resolver.ts` file.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/posts/resolvers/posts-resolver.ts`文件。
- en: 'Start the file by defining the needed imports:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件开始处定义所需的导入：
- en: '[PRE46]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Decorate the `PostsResolver` class with the `@Injectable` operator:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@Injectable`操作符装饰`PostsResolver`类：
- en: '[PRE47]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Make the class implement `Resolve<any>`:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使类实现`Resolve<any>`：
- en: '[PRE48]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Inside the class, create a constructor and inject our `PostsService`:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类内部，创建一个构造函数并注入我们的`PostsService`：
- en: '[PRE49]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Below the constructor, create a class method called `resolve` and make it return
    the `getPosts()` method from our `PostsService`:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数下方创建一个名为`resolve`的类方法，并使其返回`PostsService`的`getPosts()`方法：
- en: '[PRE50]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This is the resolver that will be used to retrieve all our posts, just like
    how we do this currently in our `PostsComponent`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将用于检索所有帖子的解析器，就像我们目前在`PostsComponent`中这样做一样。
- en: 'Now we will create a resolver that resolves our profile:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个解析器来解析我们的个人资料：
- en: 'Open a terminal and run the following command:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令：
- en: '[PRE51]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![Creating Resolvers](img/1.65.jpg)'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建解析器](img/1.65.jpg)'
- en: Open the `src/app/posts/resolvers/profile-resolver.ts` file.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/posts/resolvers/profile-resolver.ts`文件。
- en: 'Start the file by defining the needed imports:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件开始处定义所需的导入：
- en: '[PRE52]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Decorate the `ProfileResolver` class with the `@Injectable` operator:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@Injectable`操作符装饰`ProfileResolver`类：
- en: '[PRE53]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Make the class implement `Resolve<any>`:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使类实现`Resolve<any>`：
- en: '[PRE54]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Inside the class, create a constructor and inject our `PostsService`:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类内部，创建一个构造函数并注入我们的`PostsService`：
- en: '[PRE55]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Below the constructor, create a class method called `resolve`, and pass the
    `route: ActivatedRouteSnapshot` class into it:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在构造函数下方创建一个名为`resolve`的类方法，并将`route: ActivatedRouteSnapshot`类传递给它：'
- en: '[PRE56]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Inside the `resolve` method, we return the `getProfile()` method from our `PostsService`
    while getting the `params[''profileid'']` off our route:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`resolve`方法内部，我们返回`PostsService`的`getProfile()`方法，同时从我们的路由中获取`params['profileid']`：
- en: '[PRE57]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This is the resolver that will be used to retrieve the posts that we have navigated
    to in our route.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将用于检索我们在路由中导航到的帖子的解析器。
- en: Importing Our Resolvers
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入我们的解析器
- en: 'We will add our two new resolvers to the `PostsRoutingModule`. We do this by
    importing the resolvers and then adding a `resolve` property to both of our routes.
    The `resolve` property takes an object where the key is how the data will be available
    in the router after it is resolved, and the value is a reference to the imported
    resolver:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把两个新的解析器添加到`PostsRoutingModule`中。我们通过导入解析器，然后为我们的两个路由添加一个`resolve`属性来完成此操作。`resolve`属性接受一个对象，其中键是解析后数据在路由器中的可用方式，值是导入的解析器的引用：
- en: Open the `src/app/posts/posts-routing.module.ts` file.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/posts/posts-routing.module.ts`文件。
- en: 'Import our two freshly created resolvers:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们刚刚创建的两个解析器：
- en: '[PRE58]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Update both our routes to add a `resolve` property and call to the resolvers:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新我们的两个路由以添加`resolve`属性并调用解析器：
- en: '[PRE59]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'When we now refresh our page, we see that we get no output displayed and that
    we have an error in the browser console:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在刷新页面时，我们看到没有输出显示，并且在浏览器控制台中有一个错误：
- en: '![Importing Our Resolvers](img/1.68.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![导入我们的解析器](img/1.68.jpg)'
- en: 'In order to fix this error, we need to *provide* the resolvers in our module,
    just like how we do it with other Injectables, such as services:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复这个错误，我们需要在我们的模块中`provide`解析器，就像我们处理其他注入器（如服务）一样：
- en: Open the `src/app/posts/posts.module.ts` file.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/posts/posts.module.ts`文件。
- en: 'Import the two resolvers:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入两个解析器：
- en: '[PRE60]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Add a reference to both resolvers to the `providers` array:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个解析器添加到`providers`数组中：
- en: '[PRE61]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: When the application refreshes, we see that the error in the console is gone.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序刷新时，我们看到控制台中的错误消失了。
- en: If we check in the **Network** tab in Chrome Developer Tools, we see that we
    make two requests to the same endpoint. This is because we retrieve the data twice,
    in our resolver and in our component. Let's update our container components and
    let them use the data resolved by the router.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Chrome开发者工具的**网络**标签页中检查，我们会看到我们对同一个端点进行了两次请求。这是因为我们在解析器和组件中两次检索数据。让我们更新我们的容器组件，并让它们使用由路由器解析的数据。
- en: Using the Data Resolved by the Router
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用路由器解析的数据
- en: 'We will update our `PostsComponent` to read the data that has been resolved
    by our router. We subscribe to the data of the active route and we map over that
    data twice. In the first map command, the `posts` value relates to the object
    key we used in our resolver object for this route:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新 `PostsComponent` 以读取由我们的路由器解析的数据。我们订阅了活动路由的数据，并对该数据进行了两次映射。在第一次映射命令中，`posts`
    值与我们在解析器对象中用于此路由的对象键相关：
- en: Open the `src/app/posts/container/posts/posts.component.ts` file.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/container/posts/posts.component.ts` 文件。
- en: 'Import `ActivatedRoute` from `@angular/router`:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从 `@angular/router` 中导入 `ActivatedRoute`:'
- en: '[PRE62]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Remove the `PostsService` import as we are no longer going to use it here.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们不再在此处使用它，请移除 `PostsService` 的导入。
- en: 'Update the constructor to inject `private route: ActivatedRoute`:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '更新构造函数以注入 `private route: ActivatedRoute`:'
- en: '[PRE63]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Update the `ngOnInit()` method and replace the content as follows:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `ngOnInit()` 方法并替换内容如下：
- en: '[PRE64]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Because we will always have data available when arriving on the route, we can
    remove the assignment from our `posts` property, so it looks like this:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们到达路由时始终有数据可用，我们可以从 `posts` 属性中移除赋值，使其看起来如下：
- en: '[PRE65]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Refresh the page and make sure the data is still loaded.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面并确保数据仍然被加载。
- en: 'Now, we will update our `ProfileComponent` to read the data that has been resolved
    by our router. We subscribe to the data of the active route and we map over that
    data. In our map command, the value `profile` relates to the object key we used
    in our resolver object for this route:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更新 `ProfileComponent` 以读取由我们的路由器解析的数据。我们订阅了活动路由的数据，并对该数据进行了映射。在我们的映射命令中，`profile`
    值与我们在解析器对象中用于此路由的对象键相关：
- en: Open the `src/app/posts/container/profile/profile.component.ts` file.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/app/posts/container/profile/profile.component.ts` 文件。
- en: Remove the `PostsService` import as we are no longer going to use it here.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们不再在此处使用它，请移除 `PostsService` 的导入。
- en: 'Update the constructor to only inject `private route: ActivatedRoute`:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '更新构造函数以仅注入 `private route: ActivatedRoute`:'
- en: '[PRE66]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Update the `ngOnInit()` method and replace the content as follows:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `ngOnInit()` 方法并替换内容如下：
- en: '[PRE67]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Remove the assignment from the `public profile` property so it looks like this:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `public profile` 属性中移除赋值，使其看起来如下：
- en: '[PRE68]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: And we are done! Our basic application is built and even though there are enough
    things to add and optimize, it's well-structured and works using Angular's best
    practices.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！我们的基本应用已经构建完成，尽管还有很多东西可以添加和优化，但它结构良好，并且使用了 Angular 的最佳实践。
- en: In this section, we created our container components and added dummy data. We
    also created presentational components and implemented resolvers for our app.
    In the next lesson, we will add support for server-side rendering by adding Angular
    Universal.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了容器组件并添加了虚拟数据。我们还创建了展示组件并为我们的应用实现了解析器。在下一课中，我们将通过添加 Angular Universal
    来添加对服务器端渲染的支持。
- en: Summary
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this lesson, we learned the different types of components and how to create
    them. We then learned how to create resolvers to retrieve data using the router.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，我们学习了不同类型的组件以及如何创建它们。然后我们学习了如何创建解析器以使用路由检索数据。
- en: In the next lesson, we will look at implementing server-side rendering in our
    app.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一课中，我们将探讨如何在我们的应用中实现服务器端渲染。
