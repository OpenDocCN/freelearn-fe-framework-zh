- en: Server-Side Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Universal JavaScript, or isomorphic JavaScript, are different names for a feature
    that we are going to implement in this chapter. To be more exact, we will develop
    our app and render the app's pages on both the server and client side. It will
    be different to **Angular1** or Backbone single-page apps which are mainly rendered
    on the client side. Our approach is more complicated in technological terms as
    you need to deploy your full-stack skills which work on server-side rendering,
    but having this experience will make you a more desirable programmer so you can
    advance your career to the next level--you will be able to charge more for your
    skills on the market.
  prefs: []
  type: TYPE_NORMAL
- en: When the server side is worth implementing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-side rendering is a very useful feature in text content (like news portals)
    start-ups/companies, because it helps achieve better indexing by different search
    engines. It's an essential feature for any news and content-heavy website, because
    it helps grow organic traffic. In this chapter, we will also run our app with
    server-side rendering. Other companies where server-side rendering may be useful
    are entertainment businesses where users have less patience and they might close
    the browser if a webpage is loading slowly. In general, all **B2C** (consumer
    facing) apps should use server-side rendering to improve the experience for the
    people who visit their websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our focus in this chapter will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Making the whole server-side code rearrangements to prepare for the server-side
    rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting to use react-dom/server and its `renderToString` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RoutingContext` and match for the react-router working on the server side'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the client-side application so it will be optimized for an isomorphic
    JavaScript application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you ready? Our first step is to mock the database's response on the backend
    (we will create a real DB query after whole server-side rendering works correctly
    on the mocked data).
  prefs: []
  type: TYPE_NORMAL
- en: Mocking the database response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we will mock our database response on the backend in order to
    prepare to go into server-side rendering directly; we will change it later in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `fetchServerSide.js` file will consist of all functions that will fetch
    data from our database in order to make the server side work.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we will mock it for now, with the following code in `fetchServerSide.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The goal of making this mocked object is that we will be able to see if our
    server-side rendering works correctly after implementation because, as you have
    probably already spotted, we have added `SERVER-SIDE` at the beginning of each
    title and content--so it will help us to learn if our app is getting the data
    from server-side rendering. Later, this function will be replaced with a query
    to MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing that will help us implement the server-side rendering is to make
    a `handleServerSideRender` function that will be triggered each time a request
    hits the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make the `handleServerSideRender` trigger every time the frontend
    calls our backend, we need to use Express middleware using `app.use`. So far,
    we have used some external libraries such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For the first time in this book, we will write our own, small, middleware function
    that behaves in a similar way to `cors` or `bodyParser` (the external `libs` that
    are also middleware).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before doing so, let''s import the dependencies that are required in React''s
    server-side rendering (`server/server.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So, after adding all those imports of `server/server.js`, the file will look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Most of that stuff explained here is similar to client-side development in previous
    chapters. What is important is to import history in the given way, as in the example: `import
    * as hist from 'history'`. The `RoutingContext`, match is a way of using `React-Router`
    on the server side. The `renderToStaticMarkup` function is going to generate an
    HTML markup for us on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have added the new imports, then under Falcor''s middleware setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Under that `model.json` code, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `app.use(handleServerSideRender)` event is fired each time the server side
    receives a request from a client''s application. Then we will prepare the empty
    functions that we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`handleServerSideRender`: It will use `renderToString` in order to create a
    valid server-side HTML markup'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`renderFullHtml`: It is a helper function that will embed our new React''s
    HTML markup into a whole HTML document as we will see later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The handleServerSideRender function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are going to create a new Redux store instance that will be created
    on every call to the backend. The main goal of this is to give the initial state
    information to our application so it can create a valid markup based on the current
    request.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `Provider` component that we have already used in our client-side's
    app that will be wrapping the `Root` component. That will make the store available
    to all our components.
  prefs: []
  type: TYPE_NORMAL
- en: The most important part here is `ReactDOMServer.renderToString()` to render
    the initial HTML markup of our application, before we send the markup to the client
    side.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to get the initial state from the Redux store by using the `store.getState()`
    function. The initial state will be passed along in our `renderFullHtml` function,
    as you will learn in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we work on the two new functions (`handleServerSideRender` and `renderFullHtml`),
    replace this in `server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That's everything in our `dist` project. It will be available as a static file
    under the localhost address (`http://localhost:3000/static/app.js*`). This will
    help us make a single-page app after initial server-side rendering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also make sure that `app.use(''/static'', express.static(''dist''));` is placed
    directly under `app.use(bodyParser.urlencoded({extended: false }));`. Otherwise
    it may not work if you misplace this in the `server/server.js` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you are done with the preceding work of `express.static`, let''s make
    this function more complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the preceding empty function with the following improved version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In short, this HTML code will be sent by our server when a user hits the website
    for the first time so we need to create the HTML markup with a body and head in
    order to make it work. The server-side publishing app''s header is here just temporarily,
    to check if we are fetching the server-side HTML template correctly. Later you
    can find `$html` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are using ES6 templates (Google ES6 template literals) syntax
    with `&grave;`.
  prefs: []
  type: TYPE_NORMAL
- en: In this, we will later put the value that is generated by the `renderToStaticMarkup`
    function. The last step in the `renderFullPage` function is to give the initial,
    server-side rendering state in the window with `window.INITIAL_STATE = ${JSON.stringify(initialState)}`
    so the app can work correctly on the client-side with data fetched on the backend
    when the first request to the server has been made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, next let''s focus on the `handleServerSideRender` function by replacing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace with the more complete version of the function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `let initMOCKstore = fetchServerSide();` expression is fetching data from
    MongoDB (mocked for now, to be improved later). Next, we create a server-side's
    Redux story with `store = createStore(rootReducer, initMOCKstore)`. We also need
    to prepare a correct location for our app's user consumable by the react-router
    with `location = hist.createLocation(req.path)` (in `req.path` there is a simple
    path which is in the browser; `/register` or `/login` or simply `main page /`).
    The function `match` is provided by the react-router in order to match the correct
    route on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we have matched the route on the server side, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, we are creating the server-side HTML markup with `renderToStaticMarkup`.
    Inside this function, there is a Provider with the store that has previously been
    fetched with the `let initMOCKstore = fetchServerSide()`. Inside the Redux Provider
    we have `RoutingContext` which simply passes all required props down into our
    app so we can have a correctly-created markup server side.
  prefs: []
  type: TYPE_NORMAL
- en: After all that, we only need to prepare `initialState` of our Redux Store with
    `const initialState = store.getState();` and later `let fullHTML = renderFullPage(html,
    initialState);` to have everything we need to send it to the client with `res.send(fullHTML)`.
  prefs: []
  type: TYPE_NORMAL
- en: We are done with server-side preparations.
  prefs: []
  type: TYPE_NORMAL
- en: Double-check server/server.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we go forward with the client-side development, we will double-check
    `server/server.js` as the order of our code is important and this is one of the
    error-prone files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here you have everything you need for the server-side rendering on the backend.
    Let's move on to the frontend side improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Frontend tweaks to make the server-side rendering work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need some tweaks to the frontend. First of all, go to the file in `src/layouts/CoreLayout.js`
    and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, the new thing to add is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides this, improve the `render` function and export `default` to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We need the changes in the `CoreLayout` component because the Material UI design
    by default is checking on what browser you run it in and as you can predict, there
    is no browser on the server side so we need to provide the information in our
    app on whether `{ userAgent: ''all'' }` is set to `all`. It will help avoid warnings
    in the console about the server-side HTML markup being different from the one
    generated by the client-side browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to improve our component `WillMount/_fetch` function in the publishing
    app''s component, so it will be fired only on the frontend. Go to the `src/layouts/PublishingApp.js` file
    then replace this old code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the new improved code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: That `if(typeof window !== 'undefined')` statement checks if there is a window
    (on the server-side, the window will be undefined). If yes then it starts fetching
    data via Falcor (when on the client side).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go to the `containers/Root.js` file and change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have deleted this part of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And we have changed this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Why do we need to do all this? It helps us to get rid of the `/#/` sign from
    our client-side browser's URL so next time when we hit, for example, `http://localhost:3000/register`
    then our `server.js` can see the user's current URL with the `req.path` (in our
    case when hitting the `http://localhost:3000/register` the `req.path` is then
    equal to `/register`) that we use in the `handleServerSideRender` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all that, you will then be able to see the following in your client browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After 1-2 seconds it will change to the following because of firing the real
    `this._fetch()` function in the `PublishingApp.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, you can see the server-rendered markup when you go to the page''s
    HTML source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have done the basic server-side rendering, as you can see in the screenshots.
    The only missing piece in the server-side rendering is to fetch real data from
    our MongoDB--that will be implemented in the next chapter (we will unlock this
    fetching in `server/fetchServerSide.js`).
  prefs: []
  type: TYPE_NORMAL
- en: After unmocking the server side's database query, we will start working on improving
    the whole look of our app and implement some key features that are important for
    us such as adding/editing/deleting an article.
  prefs: []
  type: TYPE_NORMAL
