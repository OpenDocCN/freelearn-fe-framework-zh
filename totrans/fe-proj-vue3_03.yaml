- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vite and Vue Devtools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to utilize the Vue component’s data
    reactivity and query the external data into the component’s data system using
    methods, computed properties, and watch properties. This chapter introduces **Vite**
    and shows you how to debug these computed properties and events using Vue Devtools.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Vite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Vue Devtools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It would be best to have your Node.js version at least 14.18+ or 16+ and above.
    To check your Node version, run the following command in Command Prompt (or PowerShell):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You should have your npm version to 7.x and above since all our commands in
    the chapter are compatible with npm 7.x, and there is a slight difference with
    6.x. And finally, you should install Yarn as our primary package management tool
    throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Vite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vite.js is the build management tool aiming to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Help you develop faster (locally develop your project with a more time-saving
    approach)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build with optimization (bundle files for production with better performance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage other aspects of your web project effectively (testing, linting, and
    so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses a Rollup bundler under the hood to perform chunk bundling and packaging
    of JavaScript projects.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Vue 3, Vite has replaced Vue CLI and become the default build
    tool for managing your Vue applications. Vite also supports TypeScript and provides
    a leaner developer experience when working on current web projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To initialize a new Vue project with Vite, you can use the following specific
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, you will need to provide additional configurations for Vite to
    proceed, as shown in *Figure 3**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Configuration prompt for a new Vue project](img/B18645_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Configuration prompt for a new Vue project
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3**.1* demonstrates configurations for a new Vue project with the name
    `chapter-3-vue-app`, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue Router for routing management (which we will discuss further in [*Chapter
    7*](B18645_07.xhtml#_idTextAnchor248), *Routing*), and Pinia for state management
    (which we will discuss further in [*Chapter 9*](B18645_09.xhtml#_idTextAnchor407),
    *The State of Vue* *State Management*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vitest for enabling unit testing coverage for the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLint for linting and Prettier for organizing the project code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on these configurations, Vite will scaffold the desired project with
    the following file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – File structure for a new Vue project created by Vite](img/B18645_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – File structure for a new Vue project created by Vite
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, the Vite package is also part of the dependency packages for the
    project. You now can run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run dev` or `yarn dev`: Runs your project locally on `localhost:3000`
    with `3000` is arbitrarily assigned, as it is above the well-known port numbers
    `1`-`1023` used in other areas of computing. If multiple Vue projects run simultaneously,
    the port number will differ between projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build` or `yarn build`: Runs a production build that bundles your
    code into a single small file or several minimized small files, ready for deploying
    to production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run lint` or `yarn lint`: Runs the process of linting, which will highlight
    code errors or warnings, making your code more consistent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run preview` or `yarn preview`: Runs a preview version of the project
    in a specific port, simulating the production mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run test:unit` or `yarn test:unit`: Runs the project’s unit tests using
    Vitest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you understand what Vite is and how to set up and manage Vue.js projects
    from scratch with it, we will next practice creating a Vue.js project using Vite.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.01 – setting up a Vue project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will create your first Vue.js project using Vite commands.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.01).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a Vue.js project by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Command Prompt (Terminal) or PowerShell for Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – A blank Command Prompt window](img/B18645_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – A blank Command Prompt window
  prefs: []
  type: TYPE_NORMAL
- en: Run the `npm init` `vue@3` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon running the preceding command, you will be asked to install the latest
    version of Vite. After confirming the action, the Terminal will install Vite and
    prompt a set of questions to configure the Vue.js app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the configurations as shown in the following screenshot using the navigation
    keyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Displaying a list of saved presets](img/B18645_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Displaying a list of saved presets
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will use Vue Router, Pinia, and Vitest for our application, with
    ESLint and Prettier to keep our code clean and organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once finished, Vite will display a list of instructions for running the project,
    as seen in *Figure 3**.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Instructions generated by Vite](img/B18645_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Instructions generated by Vite
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your created project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `yarn` command. The output should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the package installer has completed, run your project locally using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding command, you can see the local server in the Terminal,
    as shown in *Figure 3**.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Local dev server is up and running](img/B18645_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Local dev server is up and running
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the URL displayed in the `Local:` section, and you’ll see a default
    Vue project screen in the browser, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 3.7 – The default Vue project screen will appear on your brows\uFEFF\
    er](img/B18645_03_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – The default Vue project screen will appear on your browser
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned to set up a Vue.js project using Vite and Yarn via command
    prompts. Next, we will explore using Vue Devtools to debug your application.
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue Devtools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Vue Devtools** is a browser extension for Chrome and Firefox and an Electron
    desktop app. You can install and run it from your browser to debug your Vue.js
    projects during development. This extension does not work in production or remotely
    run projects. You can download the Vue Devtools extension from the Chrome extension
    page, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Vue.js Devtools Chrome extension page](img/B18645_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Vue.js Devtools Chrome extension page
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also download the Vue Devtools extension from Firefox ([https://addons.mozilla.org/en-US/firefox/addon/vue-js-Devtools/](https://addons.mozilla.org/en-US/firefox/addon/vue-js-Devtools/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Vue.js Devtools Firefox extension page](img/B18645_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Vue.js Devtools Firefox extension page
  prefs: []
  type: TYPE_NORMAL
- en: The Devtools extension reveals useful information within the browser’s developer,
    including performance and event tracking for any Vue component in your application
    during running. Once enabled, the extension will add a **Vue** tab to the developer’s
    console. The **Vue** tab displays a view with several tabs, which we will look
    at next.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main tabs within the **Vue Devtools** view: **Components** and
    **Timeline**.'
  prefs: []
  type: TYPE_NORMAL
- en: Components tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Components** tab (previously Inspector) will by default be visible once
    you open the **Vue Devtools** tab. Once active, additional tabs appear, as detailed
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Side actions (top-right corner)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can select the Vue element from the browser UI using the **Select** component
    in a page icon (top-right corner), highlighted in *Figure 3**.10*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Select component action icon](img/B18645_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Select component action icon
  prefs: []
  type: TYPE_NORMAL
- en: 'The second shortcut action is **Refresh**, which allows you to refresh the
    Devtools instance in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Refresh action icon](img/B18645_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Refresh action icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, you can customize how the tab should look and feel by clicking on the
    three-dot icon representing **Settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Settings tab in Vue.js Devtools](img/B18645_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Settings tab in Vue.js Devtools
  prefs: []
  type: TYPE_NORMAL
- en: When the **Components** tab is active, a tree of components within the app will
    be available on the left-side panel. The right-side panel will display the local
    state and details of any selected component from the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are small shortcut actions such as **Inspect DOM**, which takes you directly
    to the location of the highlighted component in the browser’s DOM tree, and **Scroll
    to component**, which will auto-scroll to the component on the UI with highlights:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Shortcut actions for a component](img/B18645_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Shortcut actions for a component
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at the other tab of Vue.js Devtools—the **Timeline** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Timeline tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This tab records all events that happened in the app, divided into four main
    sections: **Mouse** events, **Keyboard** events, **Component**-specific events,
    and **Performance** events, as shown in *Figure 3**.16*. You can use this tab
    to navigate and monitor the custom events emitted from your components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Timeline tab in Vue.js Devtools](img/B18645_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Timeline tab in Vue.js Devtools
  prefs: []
  type: TYPE_NORMAL
- en: Other plugins (Pinia, Vue Router)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you install additional Vue plugins such as Pinia or Vue Router and they
    support Vue Devtools, additional tabs will appear next to the **Component** tab,
    containing the relevant information for each plugin. *Figure 3**.15* demonstrates
    an example of what the **Vue Router** tab looks like when it is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Routes tab for Vue Router if selected](img/B18645_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Routes tab for Vue Router if selected
  prefs: []
  type: TYPE_NORMAL
- en: Vue Devtools helps you debug and monitor your Vue application during development.
    Next, we will build a Vue component and use the Vue Devtools extension to inspect
    the code and manipulate the local data state inside the component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3.02 – debugging a Vue application using Devtools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will build a Vue component based on the knowledge gained
    in previous chapters and then debug it using Devtools. You will need to have Chrome,
    Firefox, or Edge installed with the Vue Devtools extension enabled.
  prefs: []
  type: TYPE_NORMAL
- en: You will use the **Vue** tab in the browser’s developer console to inspect the
    code and manipulate the local data state of the component.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.02).
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter03/Exercise3.02`
    folder by using the following commands in order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Open the exercise project in your VS Code editor (by using the `code .` command
    within the project directory) or your preferred IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `Exercise3-02.vue` component in the `src/components` directory,
    and then proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name the component `Exercise` and create a local data state using the `data()`
    field within the `<script>` section. The local data state has an array list of
    strings—`frameworks`—each representing a framework, and an empty `input` data
    prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a `computed` property called `computedList` to filter the `frameworks`
    list based on the `input` prop value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Vue `template` block, add an `input` element and bound the `input` data
    prop to it using `v-model`. Then, add an `<ul>` element and display the values
    of `computedList` using the `v-for` loop attribute and `<``li>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full working code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In `App.vue`, replace the default code with the following code to have our
    component rendered in the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, the preceding code will
    generate a component that will display a filter input field and a list of filtered
    frameworks, as shown in *Figure 3**.17*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure  3.16 – The app should display a list and filter input](img/B18645_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – The app should display a list and filter input
  prefs: []
  type: TYPE_NORMAL
- en: 'On the displayed page, right-click and choose **Inspect** to open the developer
    console or use the *Ctrl* + *Shift* + *J* shortcut (macOS users: *Cmd* + *Shift*
    + *J*). Then, navigate to the **Vue** tab. You should see the tab opened, as in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18645_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Vue tab in the developer console
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, you will be in the `V`. Two things will occur: in the right-hand
    panel, the `input` data prop now has the value of `v` and the computed list. `computedList`
    now only contains one element with the value `Vue`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the browser, this data will be reflected in the UI, as seen in *Figure 3**.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – How the app’s options look in the Vue tab](img/B18645_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – How the app’s options look in the Vue tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the data directly in the right-hand panel by clicking on the pencil icon
    next to the `input` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Edit button appears on hover](img/B18645_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Edit button appears on hover
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `R` as the new value of the `input` prop and hit *Enter*. The DOM will
    reactively update for the direct change made to the `input` prop from the Devtools
    extension, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Live editing your local data value](img/B18645_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Live editing your local data value
  prefs: []
  type: TYPE_NORMAL
- en: After changing the value in Vue.js Devtools, the value will reactively change
    in the UI, where the input value in this example is now `R`, which then triggers
    the reactive `computedList` array to only show values containing the letter *R*,
    as displayed in *Figure 3**.21*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the `A`, then `B`, then `V`. As you type text into the input box,
    you will see the performance metrics as blue bars, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.21 – The render performance metrics on each input change](img/B18645_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – The render performance metrics on each input change
  prefs: []
  type: TYPE_NORMAL
- en: 'Select one of the rows representing the recorded events for `Exercise` listed
    in the middle pane. You can observe the information, including the duration in
    seconds of that specific event in the right-side panel. This number reflects how
    long it took your component to render/update, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Selecting a performance record and seeing the details](img/B18645_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Selecting a performance record and seeing the details
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Repeating the test will allow you to compare benchmarks. However, if you refresh
    the page, you will lose them.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this exercise, you know how to use Vue Devtools to debug a component
    with the **Components** tab. You also experienced how to observe and edit data
    with the available functionalities of the Vue Devtools extension. Finally, you
    know how to use the **Performance** tab to monitor the performance of your component
    over lifecycle hooks during the life of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 3.01 – creating a Vue application with Pinia and Router using Vite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Activity3.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Activity3.01)
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you will build a Vue project using the command line with Vite,
    with Vue Router and Pinia installed. This activity will test your ability to control
    the various Vue tools for your development.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Vite to create a new Vue project with Pinia and Vue Router enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a component to render two string input fields that receive the first
    and last names and display the full name received.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Devtools extension and observe that Pinia and Vue Router are available
    for debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add some text and observe how the component renders in **Performance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected outcome is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – The final output](img/B18645_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – The final output
  prefs: []
  type: TYPE_NORMAL
- en: 'This activity also has the **Pinia** and **Routes** tabs available, as displayed
    in *Figure 3**.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Devtools tab displays Pinia, Routes, and other info](img/B18645_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – Devtools tab displays Pinia, Routes, and other info
  prefs: []
  type: TYPE_NORMAL
- en: After the activity has been completed, you should be able to use Vite and Vue
    Devtools to manage your future Vue projects. You will find that there are situations
    where you use both tools to enhance your development experience and make your
    applications more optimized.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about Vite and how to create a Vue project managed
    by Vite through the command-line Terminal. You also learned about Vue Devtools
    and how to use its features, which will assist you on this book’s journey to more
    advanced topics.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter focuses more on advanced Vue component features, such as passing
    data from one component to its nested components, validating data received from
    outside of the element, customizing the layout of a component with slots, and
    keeping the references of components for external control.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Building Your First Vue App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will learn how to pass data from parent to children components
    using props and custom events, and how to create reusable component logic with
    the Composition API. We will also learn how to build a complex app structure with
    routing and animations. We will go through every essential topic and get to know
    how Vue handles it and how to use it effectively with hands-on exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following chapters in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18645_04.xhtml#_idTextAnchor128), *Nesting Components (Modularity)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18645_05.xhtml#_idTextAnchor193), *The Composition API*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18645_06.xhtml#_idTextAnchor216), *Global Component Composition*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18645_07.xhtml#_idTextAnchor248), *Routing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18645_08.xhtml#_idTextAnchor353), *Animations and Transitions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
