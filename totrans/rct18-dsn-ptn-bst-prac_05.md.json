["```js\nimport { FC, useState, ChangeEvent, MouseEvent } from 'react'\nconst Uncontrolled: FC = () => {\n  const [value, setValue] = useState<string>('')\n  return (\n    <form>\n        <input type=\"text\" />\n        <button>Submit</button>\n    </form>\n  )\n}\nexport default Uncontrolled \n```", "```js\nconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n  console.log(e.target.value)\n} \n```", "```js\nreturn (\n  <form>\n    <input type=\"text\" onChange={handleChange} />\n    <button>Submit</button>\n  </form>\n) \n```", "```js\nR\nRe\nRea\nReac\nReact \n```", "```js\nconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n  setValue(e.target.value)\n} \n```", "```js\nconst handleSubmit = (e: MouseEvent<HTMLButtonElement>) => {\n  e.preventDefault()\n\n  console.log(value) // Here we are logging the value state\n} \n```", "```js\nconst [firstName, setFirstName] = useState('')\nconst [lastName, setLastName] = useState('') \n```", "```js\nconst handleChangeFirstName = ({ target: { value } }) => {\n  setFirstName(value)\n}\n\nconst handleChangeLastName = ({ target: { value } }) => {\n  setLastName(value)\n} \n```", "```js\nconst handleSubmit = (e: MouseEvent<HTMLButtonElement>) => {\n  e.preventDefault()\n\n  console.log(`${firstName} ${lastName}`) // Logging the firstName and lastName states\n} \n```", "```js\nreturn (\n  <form onSubmit={handleSubmit}>\n    <input type=\"text\" onChange={handleChangeFirstName} />\n    <input type=\"text\" onChange={handleChangeLastName} />\n    <button>Submit</button>\n  </form>\n) \n```", "```js\nconst [values, setValues] = useState({ firstName: '', lastName: '' }) \n```", "```js\nconst handleChange = ({ target: { name, value } }) => {   \n  setValues({\n    ...values,\n    [name]: value\n  })\n} \n```", "```js\nreturn (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      name=\"firstName\"\n      onChange={handleChange}\n    />\n    <input\n      type=\"text\"\n      name=\"lastName\"\n      onChange={handleChange}\n    />\n    <button>Submit</button>\n  </form>\n) \n```", "```js\nconst Controlled = () => (\n  <form>\n    <input type=\"text\" value=\"Hello React\" />\n    <button>Submit</button>\n  </form>\n) \n```", "```js\nYou provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. \n```", "```js\nimport { useState } from 'react'\nconst Controlled = () => {\n  return (\n    <form>\n      <input type=\"text\" defaultValue=\"Hello React\" />\n      <button>Submit</button>\n    </form>\n  )\n}\nexport default Controlled \n```", "```js\nconst [values, setValues] = useState({ firstName: 'Carlos', lastName: 'Santana' }) \n```", "```js\nconst handleChange = ({ target: { name, value } }) => {\n  setValues({\n    [name]: value\n  })\n}\n\nconst handleSubmit = (e) => {\n  e.preventDefault()\n\n  console.log(`${values.firstName} ${values.lastName}`)\n} \n```", "```js\nreturn (\n  <form onSubmit={handleSubmit}>\n    <input\n        type=\"text\"\n        name=\"firstName\"\n        value={values.firstName}\n        onChange={handleChange}\n    />\n    <input\n        type=\"text\"\n        name=\"lastName\"\n        value={values.lastName}\n        onChange={handleChange}\n    />\n    <button>Submit</button>\n  </form>\n) \n```", "```js\nconst Button = () => {\n}\nexport default Button \n```", "```js\nconst handleClick = (syntheticEvent) => {\n      console.log(syntheticEvent instanceof MouseEvent)\n      console.log(syntheticEvent.nativeEvent instanceof MouseEvent)\n    } \n```", "```js\nreturn (\n  <button onClick={handleClick}>Click me!</button>\n) \n```", "```js\n<button\n  onClick={handleClick}\n  onDoubleClick={handleDoubleClick}\n>\n  Click me!\n</button> \n```", "```js\nconst handleEvent = (event) => {\n  switch (event.type) {\n    case 'click':\n        console.log('clicked')\n      break\n\n    case 'dblclick':\n        console.log('double clicked')\n      break\n\n    default:\n        console.log('unhandled', event.type)\n  }\n} \n```", "```js\nreturn (\n  <button\n    onClick={handleEvent}\n    onDoubleClick={handleEvent}\n  >\n    Click me!\n  </button>\n) \n```", "```js\nimport { useRef } from 'react'\nconst Focus = () => {\n  const inputRef = useRef(null)\n}\nexport default Focus \n```", "```js\nconst handleClick = () => {\n  inputRef.current.focus()\n} \n```", "```js\nreturn (\n  <>\n    <input\n      type=\"text\"\n      ref={inputRef}\n    />\n    <button onClick={handleClick}>Set Focus</button>\n  </>\n) \n```", "```js\nimport React from 'react'\nconst TextInputWithRef = React.forwardRef((props, ref) => {\n  return <input ref={ref} type=\"text\" {...props} />\n})\nexport default TextInputWithRef \n```", "```js\nimport React, { useRef } from 'react'\nimport TextInputWithRef from './TextInputWithRef'\nfunction App() {\n  const inputRef = useRef()\n  const handleClick = () => {\n    inputRef.current.focus()\n  }\n  return (\n    <div>\n      <TextInputWithRef ref={inputRef} />\n      <button onClick={handleClick}>Focus on input</button>\n    </div>\n  )\n}\nexport default App \n```", "```js\nnpm install --save react-transition-group @types/react-transition-group \n```", "```js\nimport { TransitionGroup} from 'react-transition-group' \n```", "```js\nconst Transition = () => (\n  <TransitionGroup\n    transitionName=\"fade\"\n    transitionAppear\n    transitionAppearTimeout={500}\n  >\n    <h1>Hello React</h1>\n  </TransitionGroup>\n) \n```", "```js\n.fade-appear {\n  opacity: 0.01;\n} \n```", "```js\n.fade-appear.fade-appear-active {\n  opacity: 1;\n  transition: opacity .5s ease-in;\n} \n```", "```js\nconst Circle = ({ x, y, radius, fill }) => (\n  <svg>\n    <circle cx={x} cy={y} r={radius} fill={fill} />\n  </svg>\n) \n```", "```js\n<Circle x={20} y={20} radius={20} fill=\"blue\" /> \n```", "```js\nconst Circle = ({ x, y, radius, fill = 'red' }) => (...) \n```", "```js\nconst RedCircle = ({ x, y, radius }) => (\n  <Circle x={x} y={y} radius={radius} fill=\"red\" />\n) \n```"]