- en: '*Chapter 3*: Building a Dynamic Project Management Board'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first two chapters of this book, you created two React projects all by
    yourself, and you should, by now, have a solid understanding of the core concepts
    of React. The concepts you've used so far will also be used in this chapter to
    create your third project with React, including some new and more advanced concepts
    that will show you the strength of using React. Again, if you feel you lack some
    of the knowledge you'll need to finalize the contents of this chapter, you can
    always repeat what you have built so far.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will once again use Create React App, which you used in the previous
    chapter. During the development of the project management board application for
    this chapter, we'll create and use a custom Hook for data fetching. HTML5 web
    APIs will be used to dynamically drag and drop components, which are set up as
    reusable components with `styled-components`. Following this, you'll use more
    advanced React techniques to control the data flow throughout your components,
    such as by creating custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling the data flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with custom Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTML5 web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling React with `styled-components`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a dynamic project management board that has
    reusable React components and styling using Create React App and `styled-components`.
    The application will feature a dynamic drag and drop interface that uses the HTML5
    Drag and Drop API.
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 1.5–2 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The project that we''ll create in this chapter builds upon an initial version
    that you can find on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter03-initial](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter03-initial).
    The complete source code for this application can also be found on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the initial application from GitHub, we can start by moving
    into its root directory and running the `npm install` command. This will install
    the core packages from Create React App (`react`, `react-dom`, and `react-scripts`).
    After the installation, we can start the application by executing the `npm start`
    command and visit the project in the browser by visiting `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the following screenshot, the application has a basic header with
    a title and is divided into four columns. These columns are the lanes for the
    project management board and will contain the individual tasks once we've connected
    the project to the data file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The initial application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – The initial application
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the project's structure, we'll see that it's structured in the
    same way as the projects in the previous chapters. The entry point of the application
    is the `src/index.js` file, which renders a component called `App`, which holds
    two other components called `Header` and `Board`. The first one is the actual
    header of the application, while the `Board` component holds the four columns
    we can see in the application. These columns are represented by the `Lane` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this application, you can see that we''ve further split up the components
    into separate directories. Every component in either the `components` or `pages`
    directory now has its own subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a project management board application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create a project management board PWA that uses custom
    Hooks for data fetching and the HTML5 Drag and Drop API to make it dynamic. We're
    going to use a boilerplate application that is set up with Create React App, which
    we can find in the GitHub repository for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the data flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the initial version of the application in place, the next step is to fetch
    the initial data for the project management board and handle its flow through
    the components. For this, we will create a custom Hook for data fetching that
    can be reused in other components.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of this section will show us how to load data from a data source
    using React life cycle methods and display this in React components.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and displaying the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loading and displaying data that is retrieved from a data source is something
    we did in the previous chapter. The data used in this chapter is coming from a
    mock REST API, created with My JSON Server from Typicode. Using a file called
    `db.json`, which is placed in the repository for this book, we can automatically
    create REST endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Using My JSON Server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Using My JSON Server
  prefs: []
  type: TYPE_NORMAL
- en: Using My JSON Server, the [https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/tasks](https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/tasks)
    endpoint returns a list of tasks, which we'll load into our project management
    board in this section. The response is an array consisting of objects that contain
    information about our tasks defined in the id, title, body, and lane fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will explore this further. Follow these steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by fetching the project data from the data file. To do this,
    we need to add the necessary functions to the `Board` component. We need these
    to access the React life cycles using Hooks, which we already did in the earlier
    chapters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `useEffect` Hook, the data is fetched inside a `try..catch` statement.
    This statement catches any errors that are being returned from the data fetching
    process and replaces the error state with this message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can distribute the tasks over the corresponding lanes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `return` statement, you can see a function that iterates over the `lanes`
    constant and that these values are passed as props to the `Lane` component. Also,
    something special is going on when we pass the tasks to the components since the
    `filter` function is being used to only return tasks from the tasks state that
    match the lane ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to make some changes to the `Lane` component so that it will
    use the data that we fetched from the REST API to display the tasks for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Lane` component now takes three other props, which are `tasks`, `loading`,
    and `error`, where `tasks` contains the array of tasks from the REST API, `loading`
    indicates whether the loading message should be displayed, and `error` contains
    the error message when there is one. We can see that inside the `map` function
    to iterate over the tasks, the `Task` component that displays the information
    will be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create this task, we need to create a directory called `Task` in the `components`
    directory and place a new file for the `Task` component inside. This new file
    is called `Task.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This component takes its styling from another file that we need to create inside
    the `Task` directory, which is called `Task.css` and has the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we visit our application in a web browser at `http://localhost:3000`, we
    will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Our application with data from the mock REST API'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Our application with data from the mock REST API
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data from a data source is logic that can be reused throughout our
    application. In the next section, we will explore how this logic can be reused
    across multiple components by creating a custom Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Working with custom Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hooks are a way to use React features for creating local state or to watch for
    updates in that state using life cycles. But Hooks are also a way to reuse logic
    that you create for your own React application. This is a pattern that is popular
    among a lot of libraries that create functionalities for React, such as `react-router`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Before React introduced Hooks themselves, it was a popular pattern to create
    **Higher-Order Components** (**HOCs**) to reuse logic. HOCs are advanced features
    in React that focus on the reusability of components. The React documentation
    described them as follows: *"A higher-order component is a function that takes
    a component and returns a new component."*'
  prefs: []
  type: TYPE_NORMAL
- en: In the first part of this section, we'll create our first custom Hook, which
    uses logic to retrieve data from the data source that we created in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already saw that we can reuse components in React, but the next step is to
    reuse logic that you have inside these components. To explain what this means
    in practice, let's create an example. Our project has a `Board` component, which
    fetches the REST API and renders all the lanes and tasks. There is logic in this
    component in the form of a local state created with the `useState` Hook, data
    fetching inside a `useEffect` Hook, and information about how each `Lane` component
    is being rendered. How will we handle a situation where we just want to show a
    board without lanes and only tasks? Do we just send different props from the `Board`
    component? Sure, that's possible, but, in React, that's what custom Hooks are
    used for.
  prefs: []
  type: TYPE_NORMAL
- en: A `Board` component without lanes wouldn't map over all the lanes and render
    the corresponding lane with the tasks as a prop. Instead, it would map over all
    the tasks and render them directly. Although the rendered components are different,
    the logic to set the initial state, fetch the data, and render the component(s)
    can be reused. The custom Hook should be able to use the local state and execute
    data fetching from any component that it's used in.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the custom Hook, create a new file called `useDataFetching.js` inside
    a new directory called `hooks` in the `src` directory. Now, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `useState` and `useEffect` Hooks from React and create a new function
    for the Hook, which becomes the default export. This function will take one parameter
    called `dataSource`. Since this Hook will use the life cycles for data fetching,
    let''s call this custom Hook `useDataFetching` and have it return an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside this function, add the `useState` Hooks to create a local state for
    `loading`, `error`, and `data`, which has almost the same structure as our local
    state inside the `Board` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to use the `useEffect` hook, which is where the data fetching
    will be done. The `dataSource` parameter is used as the location to fetch from.
    Also, notice that the constant names are now more generic and no longer specify
    a single use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This adds the method to do data fetching, and in the `return` statement, we're
    returning the `data`, `loading`, and `error` state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations! You''ve created your very first Hook! However, it still needs
    to be added to a component that supports data fetching. Therefore, we need to
    refactor our `Board` component to use this custom Hook for data fetching instead:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the custom Hook from the `src/hooks/useDataFetching.js` file and delete
    the imports of the React Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Subsequently, we can delete the usage of the `useState` and `useEffect` Hooks
    in the `Board` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead, use the imported custom Hook to handle our data fetching. The Hook
    returns the `loading`, `error`, and `tasks` state as before, but the data state
    is renamed `tasks` to fit the needs of our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the next section, we'll learn how to reuse a custom Hook by importing it
    from a different component.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing a custom Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the very first custom Hook in place, it''s time to think of other components
    that could do data fetching, such as a component that is displaying only tasks.
    The process to create this component consists of two steps: creating the actual
    component and using the custom Hook for data fetching. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the directory pages, we need to create a new file called `Backlog.js`
    in a new directory called `Backlog`. In this file, we can place the following
    code to create the component, import the custom Hook, and import the CSS for styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `return` statement is now returning an empty `div` element, so we need
    to add the code to render the tasks here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This component imports the `Backlog.css` file for styling, and we''ve also
    added classes to the elements in this file. But we also need to create and add
    some basic styling rules to `Backlog.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `App` component, we can import this component to render it below the
    `Board` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will render the new `Backlog` component below our board with all the different
    tasks. These tasks are the same ones as in the `Board` component, as the same
    REST API endpoint is used. Also, you can set up `react-router` for this project
    to render the `Backlog` component on a different page instead.
  prefs: []
  type: TYPE_NORMAL
- en: All the tasks that are displayed in the lanes are only in one part of our application,
    since we want to be able to drag and drop these tasks into different lanes. We'll
    learn how to do this in the next section, where we'll add dynamic functionalities
    to the board.
  prefs: []
  type: TYPE_NORMAL
- en: Making the board dynamic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the things that usually give project management boards great user interaction
    is the ability to drag and drop tasks from one lane into another. This is something
    that can easily be accomplished using the HTML5 Drag and Drop API, which is available
    in every modern browser, including IE11.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML5 Drag and Drop API makes it possible for us to drag and drop elements
    across our project management board. To make this possible, it uses drag events.
    `onDragStart`, `onDragOver`, and `onDrop` will be used for this application. These
    events should be placed on both the `Lane` and the `Task` components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the file for the `Board` component, let''s add the functions that respond
    to the drop events, which need to be sent to the `Lane` and `Task` components.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding the `event handler` function for the `onDragStart` event, which
    fires when the dragging operation is started, to the `Board` component. This function
    needs to be passed to the `Lane` component, where it can be passed on to the `Task`
    component. This function sets an ID for the task that is being dragged to the
    `dataTransfer` object of the element, which is used by the browser to identify
    the drag element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Lane` component, we need to pass this `event handler` function to the
    `Task` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can invoke this function in the `Task` component, where we also need
    to add the draggable attribute to the `div` element with the class name `Task-wrapper`.
    Here, we send the element and the task ID as a parameter to the event handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After making these changes, we should be able to see that each task can be
    dragged around. But don''t drop them anywhere yet – the other drop events and
    event handlers that update the state should be added as well. Dragging a task
    from one lane to another can be done by clicking on a task without releasing the
    mouse and dragging it to another lane, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The interactive project management board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.4_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – The interactive project management board
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `onDragStart` event implemented, the `onDragOver` and `onDrop` events
    can be implemented as well. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, it''s impossible to drop elements into another element – for example,
    a `Task` component into a `Lane` component. This can be prevented by calling the
    `preventDefault` method for the `onDragOver` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function needs to be imported and placed as an event handler on the `div`
    element with the class name `Lane-wrapper` in the `Lane` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `onDrop` event is where things get interesting, since this event makes
    it possible for us to mutate the state after we''ve finished the drag operation.
    Before we can add this event handler, we need to create a new local state variable
    called `tasks` in the `Board` component. This state variable is overwritten when
    the data is being fetched from the `useDataFetching` Hook and is used to display
    the tasks from the `Lane` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The new event handler function can now be created, and when it''s invoked,
    we can call the `setTasks` function from the `useState` Hook for the tasks state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, this event handler function should be passed as a prop to the `Task`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This `onDrop` event handler function takes an element and the ID of the lane
    as a parameter because it needs the ID of the dragged element and the new lane
    it should be placed in. With this information, the function uses a `filter` function
    to find the task that needs to be moved and changes the ID of the lane. This new
    information will replace the current object for the task in the state with the
    `setState` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the `onDrop` event gets fired from the `Lane` component, it is passed
    as a prop to this component. Also, the ID of the lane is added as a prop because
    this needs to be passed to the `onDrop` event handler function from the `Lane`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this, we're able to drag and drop tasks onto other lanes in our board –
    something that you can also do for the `Backlog` component – or even make this
    logic reusable with another custom Hook. But instead, we'll be looking at how
    to make the styling for our component more flexible and reusable by using the
    `styled-components` library in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Styling in React with styled-components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've been using CSS files to add styling to our React components. However,
    this forces us to import these files across different components, which makes
    our code less reusable. Therefore, we'll add the `styled-components` package to
    the project, which allows us to write CSS inside JavaScript (so-called CSS-in-JS)
    and create components.
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, we'll get more flexibility out of styling our components, be
    able to prevent the duplication or overlapping of styles due to `classNames`,
    and add dynamic styling to components with ease. All of this can be done using
    the same syntax we used for CSS, right inside our React components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is installing `styled-components` using npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the official documentation of `styled-components`, you will notice
    that they strongly advise you to use the Babel plugin for this package as well.
    But since you're using Create React App to initialize your project, you don't
    need to add this plugin, as all the compilation that your application needs has
    already been taken care of by `react-scripts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing `styled-components`, let''s try to delete the CSS file from
    one of our components. A good start will be the `Task` component since this is
    a very small component with limited functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by importing the `styled-components` package and creating a new styled
    component called `TaskWrapper`. This component extends a `div` element and takes
    the CSS rules we already have for the `Task-wrapper` class name in `Task.css`.
    Also, we no longer have to import this file, since all the styling is now being
    done inside this JavaScript file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code block, we''ve added the styling of the `h3` element in
    the styled component for `TaskWrapper`, but we can also do this inside a specific
    styled component as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also do this for the other components in our project, starting with
    the `Lane` component, for which we first need to create the styled components
    that use the same styling as those in the `Lane.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the existing `div` and `h3` elements with these new components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we visit our project in the browser after running `npm start` again, we'll
    see that our application still looks the same after deleting the CSS files for
    the Ticket and `Lane` component. You can, of course, also do the same thing for
    the other components in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s proceed and convert another component to use `styled-components` instead
    of CSS – for example, the component in the `src/App.js` file. This one is using
    the `src/App.css` file to style the `div` element that wraps all the components
    in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: After making these changes, you can delete the `src/App.css` file as we're no
    longer using it to style the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another possibility with `styled-components` is creating a global style for
    our application, which is currently done in `src/index.css`. This file is imported
    in `src/index.js` and therefore loaded into every page of the application, as
    it is the entry to our React application. But the `App` component in `src/App.js`
    also wraps all our components, in which we can copy the styling rules from `src/index.css`
    and use them to create a `GlobalStyle` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This global style that we just created must be added to the return statement
    for the `App` component, above the `AppWrapper` component. As we can only return
    a single element or component from the `return` statement, we need to wrap the
    contents into another element. If we wanted to apply styling to this element,
    we could do this with a `div` element. As we don''t want that in this scenario,
    we''ll be using a React fragment instead. With a fragment, we can wrap elements
    and components without rendering anything in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `<>` notation is shorthand for `<React.Fragment>`; you can use both notations
    in React. For the `<React.Fragment>` notation, you can also import `Fragment`
    from React to write `<Fragment>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can delete the `src/index.css` file and the line in `src/index.js`
    that imports this file into our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: With these final additions, we've styled large parts of our application with
    `styled-components` instead of CSS. By writing the styling rules directly in the
    components, we can reduce the number of files in the project and also make it
    easier to find what styling is applied to our elements.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created a project management board that lets you move,
    drag, and drop tasks from one lane to another using the HTML5 Drag and Drop API.
    The data flow of this application is handled using local state and life cycles
    and determines which tasks are displayed in the different lanes. This chapter
    also introduced the advanced React pattern of custom Hooks. With custom Hooks,
    you can reuse state logic in function components across your applications.
  prefs: []
  type: TYPE_NORMAL
- en: This advanced pattern will be also be used in the next chapter, which will handle
    routing and **Server-Side Rendering** (**SSR**) in React applications using Next.js.
    Have you ever tried using Stack Overflow to find a solution to a programming issue
    you once had? I have! In the next chapter, we will be building a community feed
    that uses Stack Overflow as a data source and React to render the application.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The HTML Drag and Drop API: [https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API](https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataTransfer: [https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React DnD: [https://github.com/react-dnd/react-dnd](https://github.com/react-dnd/react-dnd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
