- en: Chapter 3. Custom Bindings and Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 自定义绑定和组件
- en: With all the concepts you have learned in the last two chapters, you can build
    most of the applications you find in the real world. Of course, if you write code
    with just the knowledge of these two chapters, you should be very tidy because
    your code will become bigger and bigger and will be difficult to maintain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前两章学到的所有概念，你可以构建出大部分真实世界中遇到的应用程序。当然，如果只凭借这两章的知识编写代码，你应该非常整洁，因为你的代码会变得越来越庞大，维护起来会很困难。
- en: 'Once a Google engineer was asked about how to build large applications. His
    answer was short and eloquent: *Don''t*. Don''t write large applications. Instead,
    write small applications, small pieces of isolated code that interact with each
    other, and build a large system with them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有一次一个谷歌工程师被问及如何构建大型应用程序。他的回答既简短又雄辩：*别*。不要编写大型应用程序。相反，编写小型应用程序，小型的隔离代码片段互相交互，并用它们构建一个大系统。
- en: How can we write small, reusable, and isolated pieces of code that extend the
    functionality of Knockout? The answer is by using custom bindings and components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何编写小型、可重用和独立的代码片段来扩展 Knockout 的功能？答案是使用自定义绑定和组件。
- en: Custom bindings
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义绑定
- en: We know what a binding is, it is everything we write inside the `data-bind`
    attribute. We have some built-in bindings. Click and value are two of them. But
    we can write our own custom bindings that extend the functionality of our application
    in a tidy way.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道什么是绑定，它是我们写在`data-bind`属性中的一切。我们有一些内置的绑定。点击和值是其中的两个。但我们可以编写我们自己的自定义绑定，以整洁的方式扩展我们应用程序的功能。
- en: 'Writing a custom binding is very easy. It has a basic structure that we should
    always follow to begin with:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自定义绑定非常简单。它有一个基本结构，我们应该始终遵循：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Knockout has an internal object called `bindingHandlers`. We can extend this
    object with our custom binding. Our binding should have a name to refer to it
    inside the `bindingHandlers` object. Our custom binding is an object that has
    two functions, `init` and `update`. Sometimes you should use just one of them,
    sometimes both.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Knockout 有一个内部对象叫做`bindingHandlers`。我们可以用自定义绑定扩展这个对象。我们的绑定应该有一个名称，在`bindingHandlers`对象内用来引用它。我们的自定义绑定是一个具有两个函数`init`和`update`的对象。有时你应该只使用其中一个，有时两个都要用。
- en: 'Inside the `init` method, we should initialize the state of our binding. Inside
    the `update` method, we should set the code to update the binding when its model
    or value is updated. These methods give us some parameters to undertake this task:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init`方法中，我们应该初始化绑定的状态。在`update`方法中，我们应该设置代码以在其模型或值更新时更新绑定。这些方法给了我们一些参数来执行这个任务：
- en: '`element`: This is the DOM element involved in the binding.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element`：这是与绑定有关的 DOM 元素。'
- en: '`valueAccessor`: This is the value of the binding. It is usually a function
    or an observable. It is safer if you use `ko.unwrap` to get the value, such as
    `var value = ko.unwrap(valueAccessor());`.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`valueAccessor`：这是绑定的值。通常是一个函数或可观察对象。使用`ko.unwrap`来获取值更安全，比如`var value = ko.unwrap(valueAccessor());`。'
- en: '`allBindings`: This is an object that you can use to access other bindings.
    You can get a binding using `allBindings.get(''name'')`, or ask if a binding exists
    using `allBindings.has(''name'');`.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allBindings`：这是一个对象，你可以用它来访问其他绑定。你可以使用`allBindings.get(''name'')`来获取一个绑定，或使用`allBindings.has(''name'')`来查询绑定是否存在。'
- en: '`viewModel`: That is deprecated in Knockout 3.x. You should use `bindingContext.$data`
    or `bindigContext.$rawData` instead.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`viewModel`：在 Knockout 3.x 中已弃用。你应该使用`bindingContext.$data`或`bindigContext.$rawData`代替。'
- en: '`bindingContext`: With the binding context, we can access familiar context
    objets such as `$root`, `$parents`, `$parent`, `$data`, or `$index` to navigate
    through different contexts.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bindingContext`：使用绑定上下文，我们可以访问熟悉的上下文对象，如`$root`、`$parents`、`$parent`、`$data`或`$index`来在不同的上下文中导航。'
- en: We can use custom bindings for many things. For example, we can format data
    automatically (currency or dates are clear examples) or increase the semantic
    meaning of other bindings. It's more descriptive to have a binding that is called
    `toggle` than just set `click` and `visible` bindings to show and hide an element.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为许多事物使用自定义绑定。例如，我们可以自动格式化数据（货币或日期是明显的例子），或增加其他绑定的语义含义。给绑定起名叫`toggle`比仅仅设置`click`和`visible`绑定来显示和隐藏元素更加描述性。
- en: '![Custom bindings](img/7074OS_03_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![自定义绑定](img/7074OS_03_01.jpg)'
- en: New folder structure with custom bindings and components
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 新的文件夹结构与自定义绑定和组件
- en: The toggle binding
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这个toggle绑定
- en: 'To add new custom bindings to our application we are going to create a new
    folder called `custom` inside our `js` folder. Then we are going to create a file
    called `koBindings.js` and we are going to link it inside our `index.html` file,
    just below our template engine:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要向我们的应用程序添加新的自定义绑定，我们将创建一个名为`custom`的新文件夹，放在我们的`js`文件夹中。然后，我们将创建一个名为`koBindings.js`的文件，并将其链接到我们的`index.html`文件中，放在我们的模板引擎的下方：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our first custom binding will be called `toggle`. We will use this custom binding
    to change the value of a Boolean variable. With this behavior, we can show and
    hide elements, in our case, our cart. Just write this code at the beginning of
    the `koBindings.js` file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个自定义绑定将被称为`toggle`。我们将使用此自定义绑定来更改布尔变量的值。通过这种行为，我们可以显示和隐藏元素，即我们的购物车。只需在`koBindings.js`文件的开头编写以下代码。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, we don't need to use the `update` method because we set all the
    behavior when we initialize the binding. We use the `ko.applyBingidsToNode` method
    to link the `click` function to the element. The `applyBindingsToNode` method
    has the same behavior as `applyBindings` but we set a context, a node from the
    DOM where the bindings are applied. We can say that `applyBindings` is an alias
    of `applyBindingsToNode($('body'), viewmodel)`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不需要使用`update`方法，因为我们在初始化绑定时设置了所有行为。我们使用`ko.applyBingidsToNode`方法将`click`函数链接到元素上。`applyBindingsToNode`方法具有与`applyBindings`相同的行为，但我们设置了一个上下文，一个从DOM中获取的节点，其中应用了绑定。我们可以说`applyBindings`是`applyBindingsToNode($('body'),
    viewmodel)`的别名。
- en: 'Now we can use this binding in our application. Update the `showCartDetails`
    button inside the `views/header.html` template. Remove the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在我们的应用程序中使用这个绑定。更新`views/header.html`模板中的`showCartDetails`按钮。删除以下代码：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Update the code for the following button:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 更新以下按钮的代码：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we don't need the `showCartDetails` and `hideCartDetails` methods any more
    and we can attack the `visibleCart` variable directly with the `toggle` binding.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们不再需要`showCartDetails`和`hideCartDetails`方法了，我们可以直接使用`toggle`绑定攻击`visibleCart`变量。
- en: With this simple binding, we have removed two methods of our code and we have
    created a reusable code that doesn't depend on our cart view-model. Because of
    that you can reuse the toggle binding in every project you want, as it doesn't
    have any external dependencies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个简单的绑定，我们已经删除了代码中的两个方法，并创建了一个可重用的代码，不依赖于我们的购物车视图模型。因此，您可以在任何想要的项目中重用toggle绑定，因为它没有任何外部依赖项。
- en: 'We should also update the `cart.html` template:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该更新`cart.html`模板：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once we have made this update, we realize that there is no need to use `hideCartDetails`
    anymore. To remove it definitively, follow these steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进行了此更新，我们意识到不再需要使用`hideCartDetails`。要彻底删除它，请按照以下步骤操作：
- en: 'In the `finishOrder` function, remove the following line:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`finishOrder`函数中，删除以下行：
- en: '[PRE6]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following line:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行：
- en: '[PRE7]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There is no need to keep a function that manages just a single line of code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要保留只管理一行代码的函数。
- en: The currency binding
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 货币绑定
- en: The other useful utility that custom bindings offer is the option of formatting
    the data of the node they are applied to. For example, we can format the currency
    fields of our cart.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义绑定提供的另一个有用的工具是格式化应用于节点数据的选项。例如，我们可以格式化购物车的货币字段。
- en: 'Add this binding just below the toggle binding:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在toggle绑定的下方添加以下绑定：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here we are not going to initialize anything because the initial state and the
    update behavior is the same. As a must, when the `init` and the `update` method
    do the same thing, just use the `update` method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不需要初始化任何内容，因为初始状态和更新行为是相同的。必须要知道，当`init`和`update`方法执行相同的操作时，只需使用`update`方法。
- en: In this case, we are going to return the number with the format we want. First
    we use the built-in binding called `text` to update the value of our element.
    This binding gets the element and a function that indicates how to update the
    text inside this element. In the local variable value, we are going to write the
    value that is inside `valueAccessor`. Remember that `valueAccessor` can be an
    observable; this is why we use the `unwrap` method. We should do the same with
    the `symbol` binding. The `symbol` is another binding that we use to set the currency
    symbol. We don't need to define it because this binding does not have a behavior
    and is just a write/read binding. We can access it using `allBindingsAccesor`.
    Finally, we return the value of joining the two variables and set a regular expression
    to convert the value in a formatted currency.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将返回我们想要的格式的数字。首先，我们使用内置绑定称为 `text` 来更新我们元素的值。这个绑定获取元素和一个函数，指示如何更新此元素内部的文本。在本地变量
    `value` 中，我们将写入 `valueAccessor` 内部的值。记住 `valueAccessor` 可以是一个 observable；这就是为什么我们使用
    `unwrap` 方法。我们应该对 `symbol` 绑定执行相同的操作。`symbol` 是我们用来设置货币符号的另一个绑定。我们不需要定义它，因为此绑定没有行为，只是一个写/读绑定。我们可以使用
    `allBindingsAccesor` 访问它。最后，我们返回连接两个变量的值，并设置一个正则表达式将值转换为格式化的货币。
- en: 'We can update the price binding in the `catalog` and the `cart` template:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更新 `catalog` 和 `cart` 模板中的价格绑定。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can set the symbol we want and the price will be formatted as: €100, or
    if we set the symbol `$` or empty we will see `$100` (if the price value is 100).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设置我们想要的符号，价格将被格式化为：€100，或者如果我们设置符号为 `$` 或空，则将看到 `$100`（如果价格值为 100）。
- en: '![The currency binding](img/7074OS_03_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![货币绑定](img/7074OS_03_02.jpg)'
- en: Currency custom binding
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 货币自定义绑定
- en: Notice how easy it is to add more and more useful bindings to increase the power
    of Knockout.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意观察如何轻松地添加越来越多有用的绑定以增强 Knockout 的功能。
- en: '![The currency binding](img/7074OS_03_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![货币绑定](img/7074OS_03_03.jpg)'
- en: Debug the container with the $root context displayed
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 $root 上下文显示的容器进行调试。
- en: Create a binding to debug – the toJSON binding
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个调试绑定 – toJSON 绑定。
- en: When we develop our project, we make mistakes and we find unexpected behaviors.
    The Knockout view-model is hard to read because we don't have plain objects, we
    have observables. Because of this, maybe it's useful to have a method and a container
    inside our application that shows us the state of the view-model during the development
    process. This is why we are going to build a `toJSON` binding that becomes our
    view-model into a plain JSON object that we can show into the screen or in our
    console.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开发我们的项目时，我们会犯错误并发现意外的行为。Knockout 视图模型很难阅读，因为我们没有普通对象，而是 observables。因此，也许在开发过程中，拥有一个显示视图模型状态的方法和容器可能很有用。这就是为什么我们要构建一个
    `toJSON` 绑定，将我们的视图模型转换为一个普通的 JSON 对象，我们可以在屏幕上或控制台中显示。
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We have used the `ko.toJSON` object to convert the value we get into a JSON
    object.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 `ko.toJSON` 对象将我们获取的值转换为 JSON 对象。
- en: 'This function has the same interface that the native `JSON.stringify` function
    has. It gets three parameters as arguments:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数具有与原生 `JSON.stringify` 函数相同的接口。它将三个参数作为参数：
- en: The first parameter is the object we want to convert into a plain JSON object.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是我们想要转换为普通 JSON 对象的对象。
- en: 'The second one is the replacer parameter. It can be a function or an array.
    It should return the value that should be added to the JSON string. For more information
    on the replace parameter, please refer the following link:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是替换参数。它可以是一个函数或一个数组。它应该返回应添加到 JSON 字符串中的值。有关替换参数的更多信息，请参阅以下链接：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter)'
- en: The last one represents the spaces that should be applied to the prettified
    result. So in this case, we are saying that we are going to convert the object
    contained in the `valueAccesor()` method, using no replacement function and it
    will be indented with two spaces.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '最后一个表示应该应用于格式化结果的空格。因此，在这种情况下，我们说我们将使用 `valueAccesor()` 方法中包含的对象，不使用替换函数，并且将缩进两个空格。 '
- en: 'To see it in action, we should put this line at the end of the element that
    has the `container-fluid` class:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到它的作用，我们应该将此行放在具有 `container-fluid` 类的元素的末尾：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now inside this `<div>` tag, we can see the `$root` context as a JSON object.
    The `$root` context is the top of our entire Knockout context, so we can see all
    our view-models inside this box.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在这个`<div>`标签里，我们可以将`$root`上下文视为一个 JSON 对象。`$root`上下文是我们整个 Knockout 上下文的顶部，所以我们可以在这个框中看到我们所有的视图模型。
- en: For this to work on older browsers that have no native JSON serializer (for
    example, IE 7 or earlier), you must also reference the `json2.js` library.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这在没有原生 JSON 序列化程序的老浏览器上工作（例如，IE 7或更早版本），你还必须引用 `json2.js` 库。
- en: '[https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)'
- en: 'You can read more about how Knockout converts observables into plain JSON at
    this link: [http://knockoutjs.com/documentation/json-data.html](http://knockoutjs.com/documentation/json-data.html)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个链接中了解更多关于 Knockout 如何将 observables 转换为普通 JSON：[http://knockoutjs.com/documentation/json-data.html](http://knockoutjs.com/documentation/json-data.html)
- en: Being semantic with our bindings
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过我们的绑定语义化
- en: 'Sometimes we write code that seems easy to us, but when we look closely at
    it, we realize that it isn''t. For example, in Knockout, we have the visible built-in
    binding. It''s easy to think that if we want to hide something, we just need to
    write: `data-bind="visible:!isVisible"` and you write this every time we want
    to hide something. That is not clear enough. What do we want to express? That
    this element should be hidden by default? That it should be visible when the variable
    is not visible?'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们写的代码对我们来说似乎很简单，但当我们仔细看时，我们意识到它并不简单。例如，在 Knockout 中，我们有内置的 visible 绑定。很容易认为如果我们想要隐藏某些东西，我们只需写：`data-bind="visible:!isVisible"`，并且每次我们想要隐藏某些东西时都写这个。这并不够清晰。我们想要表达什么？这个元素应该默认隐藏吗？当变量不可见时它应该可见吗？
- en: 'The best approach is to write a binding that is called `hidden`. If you have
    a `hidden` binding, you can write `data-bind="hidden: isHidden";` this seems clearer,
    doesn''t it? This binding is easy, let''s have a look at the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '最好的方法是写一个名为`hidden`的绑定。如果你有一个`hidden`绑定，你可以写`data-bind="hidden: isHidden;"`，这听起来更清晰，不是吗？这个绑定很简单，让我们看看以下的代码：'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We just use the `visible` type of `bindingHandler` to change the value of the
    `valueAccessor` method. So we have built a more semantic binding.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是使用`visible`类型的`bindingHandler`来改变`valueAccessor`方法的值。所以我们创建了一个更加有含义的绑定。
- en: Look how powerful and extensible Knockout is. We can build more and more behaviors.
    For example, if we want to practice with custom bindings, we can create our own
    image binding that receives an array of photos instead of just one and we can
    create a carousel. We can create our own link binding that helps us to navigate
    inside our application. The possibilities are endless.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 看看 Knockout 有多么强大和可扩展。我们可以构建越来越多的行为。例如，如果我们想要练习自定义绑定，我们可以创建一个接收照片数组而不仅仅是一张照片的自定义图像绑定，然后我们可以创建一个轮播。我们可以创建我们自己的链接绑定，帮助我们在我们的应用程序中导航。可能性是无限的。
- en: Now, let's see how to integrate a jQuery plugin into our bindings.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何将一个 jQuery 插件集成到我们的绑定中。
- en: Wrapping a jQuery plugin into a custom binding
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将一个 jQuery 插件包装成自定义绑定
- en: Knockout is compatible with jQuery. Actually, there is no need to wrap a jQuery
    plugin into a binding. It will work because Knockout and jQuery are compatible
    with each other. However, as we mentioned earlier, jQuery is a DOM manipulation
    library, so we will need to set an ID to locate the element we want to apply the
    plugin to, and this will create a dependency. If we wrap the plugin inside a custom
    binding, we can access the element and its value with the element and `valueAccessor`
    parameters and we can pass everything we need with the help of the `allBindings`
    object.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Knockout 和 jQuery 兼容。实际上，没有必要将一个 jQuery 插件包装成一个绑定。它会工作，因为 Knockout 和 jQuery
    是兼容的。然而，正如我们之前提到的，jQuery 是一个 DOM 操作库，所以我们需要设置一个 ID 来定位我们想要应用插件的元素，这将创建一个依赖关系。如果我们将插件包装在一个自定义绑定中，我们可以通过元素和`valueAccessor`参数访问元素和它的值，并且我们可以通过`allBindings`对象传递我们需要的一切。
- en: We are going to integrate a simple plugin called `iCheck` that will give us
    a cool theme for our checkboxes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将集成一个简单的插件叫做`iCheck`，这将为我们的复选框提供一个很酷的主题。
- en: 'First download the `iCheck` plugin and set the `iCheck.js` file inside the
    `js` folder. Then save the `skins` folder inside the `css` folder. The download
    link for the `iCheck` plugin is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先下载`iCheck`插件并将`iCheck.js`文件放入`js`文件夹中。然后将`skins`文件夹保存到`css`文件夹中。`iCheck`插件的下载链接如下：
- en: '[https://github.com/fronteed/iCheck/archive/2.x.zip](https://github.com/fronteed/iCheck/archive/2.x.zip)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/fronteed/iCheck/archive/2.x.zip](https://github.com/fronteed/iCheck/archive/2.x.zip)'
- en: 'Link both the `css` and `javascript` files with the `index.html` file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`index.html`文件链接`css`和`javascript`文件：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now we need to initialize the plugin and update the value of the element. In
    this case, the `init` and `update` methods are different. So we need to code what
    happens when the binding starts working and what happens when the value is updated.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要初始化插件并更新元素的值。在这种情况下，`init`和`update`方法是不同的。因此，我们需要编写当绑定开始工作时发生的情况以及当值更新时发生的情况。
- en: .
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: '![Wrapping a jQuery plugin into a custom binding](img/7074OS_03_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![将jQuery插件封装到自定义绑定中](img/7074OS_03_04.jpg)'
- en: Add iCheck to our project
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将iCheck添加到我们的项目中
- en: The `iCheck` plugin works just giving a style to our checkboxes. Now the problem
    is that we need to link this plugin with our element.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`iCheck`插件仅通过给我们的复选框提供样式来工作。现在的问题是我们需要将这个插件与我们的元素链接起来。'
- en: The basic behavior of `iCheck` is `$('input [type=checkbox]').icheck(config)`.
    When the value of the checkbox changes, we need to update the value of our binding.
    Fortunately, `iCheck` has events to detect when the value changes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`iCheck`的基本行为是`$(''input [type=checkbox]'').icheck(config)`。当复选框的值更改时，我们需要更新我们绑定的值。幸运的是，`iCheck`有事件来检测值何时更改。'
- en: This binding is going to manage just the `iCheck` behavior. This means that
    the value of the observable is going to be handled by another binding.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个绑定只会管理`iCheck`的行为。这意味着可观察值的值将由另一个绑定处理。
- en: It makes sense that we use the `checked` binding. Use these two bindings separately
    so that the `iCheck` binding manages presentation and the `checked` binding manages
    value behavior.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`checked`绑定是有道理的。分别使用这两个绑定，以便`iCheck`绑定管理呈现，而`checked`绑定管理值行为。
- en: In the future, we can remove the `icheck` binding or use another binding for
    presentation and the checkbox will still work properly.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，我们可以移除`icheck`绑定或者使用另一个绑定来管理呈现，复选框仍将正常工作。
- en: Following the `init` convention we saw in the first part of the chapter, we
    are going to initialize the plugin and set the events inside the `init` method.
    In the `update` method, we are going to update the value of the checkbox when
    the observable handled by the checked binding changes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按照我们在本章第一部分看到的`init`约定，我们将初始化插件并在`init`方法中设置事件。在`update`方法中，我们将在由`checked`绑定处理的可观察值更改时更新复选框的值。
- en: 'Notice that we use the `allBindingsAccesor` object to get the value of the
    checked binding:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们使用`allBindingsAccesor`对象来获取已检查绑定的值：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we can use this to create cool checkboxes in our app in an isolated way.
    We are going to hide and show our search box with this plugin.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个来以隔离的方式在我们的应用程序中创建酷炫的复选框。我们将使用这个插件来隐藏和显示我们的搜索框。
- en: 'Add this just below the **Show Cart Details** / **Hide Cart Details** button
    in the `header.html` template:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到`header.html`模板中**显示购物车详情** / **隐藏购物车详情**按钮的下方：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then go to the `catalog.html` file and add a visible binding in the search
    bar as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后转到`catalog.html`文件，在搜索栏中添加一个可见的绑定，如下所示：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the variable to the view-model, and also set it in the `return` statement,
    as we have done with all the other variables:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量添加到视图模型中，并在`return`语句中设置它，就像我们对所有其他变量所做的那样：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now you can see a cool checkbox that allows the user to show and hide the search
    bar:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到一个酷炫的复选框，允许用户显示和隐藏搜索栏：
- en: '![Wrapping a jQuery plugin into a custom binding](img/7074OS_03_05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![将jQuery插件封装到自定义绑定中](img/7074OS_03_05.jpg)'
- en: Components – isolated view-models
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件 - 隔离的视图模型
- en: Custom bindings are powerful but sometimes we need more powerful behaviors.
    We want to create an isolated element that behaves as a black box for the rest
    of the application. These kind of elements are called **components**. A component
    has its own view-model and template. It also has its own methods and events also
    we can say that it is an application by itself. Of course we can use dependency
    injection to link our component with our main application view-model, but a component
    can work with every application that gives it the right data.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义绑定非常强大，但有时我们需要更强大的行为。我们想要创建一个对应用程序的其余部分表现为黑匣子的隔离元素。这些类型的元素被称为**组件**。组件有自己的视图模型和模板。它还有自己的方法和事件，我们也可以说它本身就是一个应用程序。当然，我们可以使用依赖注入将我们的组件与我们的主应用程序视图模型链接起来，但是组件可以与给它正确数据的每个应用程序一起工作。
- en: We can build complex components such as tables, charts, and everything you can
    imagine. To learn how to build a component, you can build a simple one. We are
    going to build an `add-to-cart` button. This is a component that links our catalog
    and our cart, so that with this component we can isolate our catalog and our cart.
    They will be linked through this component, which is just a button that receives
    the cart and the item of the catalog and will have all the logic to insert the
    item to the cart. This is very useful because the cart doesn't need to care about
    inserted items and neither does the catalog. Also, if you need to do some logic
    before or after inserting the item, you can do it in an isolated scope.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以构建诸如表格、图表和您能想象到的一切复杂组件。要学习如何构建一个组件，您可以构建一个简单的组件。我们将创建一个`add-to-cart`按钮。这是一个连接我们的目录和购物车的组件，所以通过这个组件我们可以隔离我们的目录和我们的购物车。它们将通过这个组件连接，这个组件只是一个按钮，接收购物车和目录中的商品，并且将有将商品插入到购物车的所有逻辑。这是非常有用的，因为购物车不需要关心插入的商品，目录也不需要。另外，如果您需要在插入商品之前或之后执行一些逻辑，您可以在一个隔离范围内执行。
- en: '![Components – isolated view-models](img/7074OS_03_06.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![组件-隔离视图模型](img/7074OS_03_06.jpg)'
- en: Components have isolated view-models that interact with the main application
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 组件有与主应用程序交互的隔离视图模型
- en: 'The basic structure of a component is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组件的基本结构如下：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the help of this schema, we are going to build our `add-to-cart` button.
    Create a file called `components.js` inside the `custom` folder and write this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个模式的帮助，我们将构建我们的`add-to-cart`按钮。在`custom`文件夹内创建一个名为`components.js`的文件，并写入以下内容：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We send the item we want to add to the cart and the cart itself as parameters
    and define the `addToCart` method. This method is the one we use in our view-model
    but is now isolated inside this component, so our code becomes cleaner. The template
    is the button to add items that we had in our catalog.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要添加到购物车的商品和购物车本身作为参数发送，并定义`addToCart`方法。这个方法是我们在视图模型中使用的，但现在被隔离在这个组件内部，所以我们的代码变得更清晰了。模板是我们在目录中拥有的用于添加商品的按钮。
- en: 'Now we can update our catalog lines as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将我们的目录行更新如下：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Advanced techniques
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级技术
- en: In this section, we are going to speak about some advanced techniques. We are
    not going to add them to our project because there is no need, but it's good that
    we know we can use these methods if our application requires it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论一些高级技术。我们并不打算将它们添加到我们的项目中，因为没有必要，但知道如果我们的应用程序需要时可以使用这些方法是很好的。
- en: Controlling descendant bindings
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制后代绑定
- en: 'If our custom binding has nested bindings, we can tell our binding whether
    Knockout should apply bindings or we should control how these bindings will be
    applied. We just need to return `{ controlsDescendantBindings: true }` in the
    `init` method.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们的自定义绑定有嵌套绑定，我们可以告诉我们的绑定是否 Knockout 应该应用绑定，或者我们应该控制这些绑定如何被应用。 我们只需要在`init`方法中返回`{
    controlsDescendantBindings: true }`。'
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This code is telling Knockout that the binding called `allowBindings` is going
    to handle all the descendant bindings:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 Knockout，名为`allowBindings`的绑定将处理所有后代绑定：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If we want to extend the context with new properties, we can extend the `bindingContext`
    property with new values. Then we only need to use `ko.applyBindingsToDescendants`
    to update the view-model of its children. Of course we should tell the binding
    that it should control the descendant bindings. If we don't, they will be updated
    twice.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想用新属性扩展上下文，我们可以用新值扩展`bindingContext`属性。然后我们只需要使用`ko.applyBindingsToDescendants`来更新其子项的视图模型。当然我们应该告诉绑定它应该控制后代绑定。如果我们不这样做，它们将被更新两次。
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here we are not creating a child context. We are just extending the parent context.
    If we want to create child contexts to manage descendant nodes and have the ability
    to use the `$parentContext` magic variable to access our parent context, we need
    to create a new context using the `createChildContext` method.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们并不创建一个子上下文。我们只是扩展父上下文。如果我们想创建子上下文来管理后代节点，并且能够使用`$parentContext`魔术变量来访问我们的父上下文，我们需要使用`createChildContext`方法来创建一个新上下文。
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we can use the magic variables inside our child nodes:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在子节点内部使用这些魔术变量：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: By modifying binding contexts and controlling descendant bindings, you have
    a powerful and advanced tool to create custom binding mechanisms of your own.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改绑定上下文和控制后代绑定，您将拥有一个强大而先进的工具来创建自己的自定义绑定机制。
- en: Using virtual elements
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用虚拟元素
- en: '**Virtual elements** are custom bindings that are allowed to use Knockout comments.
    You just need to tell Knockout that our binding is allowed to be virtual.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟元素**是允许使用 Knockout 注释的自定义绑定。您只需要告诉 Knockout 我们的绑定是允许虚拟的。'
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To add our binding to the allowed virtual elements, we write this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的绑定添加到允许的虚拟元素中，我们写下这个：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Virtual elements have an API to manipulate the DOM. You can use jQuery to manipulate
    virtual elements because one of the advantages of Knockout is that it is fully
    compatible with DOM libraries, but we have a complete API of virtual elements
    in the Knockout documentation. This API allows us to perform the kinds of transformations
    needed when implementing control flow bindings. For more information on custom
    bindings for virtual elements, please refer the following link:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟元素具有操作 DOM 的 API。您可以使用 jQuery 操作虚拟元素，因为 Knockout 的一个优点是它与 DOM 库完全兼容，但是我们在
    Knockout 文档中有完整的虚拟元素 API。这个 API 允许我们执行在实现控制流绑定时所需的类型的转换。有关虚拟元素的自定义绑定的更多信息，请参考以下链接：
- en: '[http://knockoutjs.com/documentation/custom-bindings-for-virtual-elements.html](http://knockoutjs.com/documentation/custom-bindings-for-virtual-elements.html)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://knockoutjs.com/documentation/custom-bindings-for-virtual-elements.html](http://knockoutjs.com/documentation/custom-bindings-for-virtual-elements.html)'
- en: Preprocessing data before binding
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在绑定之前预处理数据
- en: 'We are able to preprocess data or nodes before the binding will be applied.
    This could be useful to format data before it is displayed or add new classes
    or behaviors to our nodes. You can also set default values, for example. We just
    need to use the `preprocess` and `preproccessNode` methods. Using the first method,
    we can manipulate the value of our binding. With the second one, we can manipulate
    the DOM element (template) of our binding as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在绑定应用之前预处理数据或节点。这在显示数据之前格式化数据或向我们的节点添加新类或行为时非常有用。您也可以设置默认值，例如。我们只需要使用`preprocess`和`preproccessNode`方法。使用第一个方法，我们可以操纵我们绑定的值。使用第二个方法，我们可以操纵我们绑定的
    DOM 元素（模板），如下所示：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can manipulate DOM nodes using the hook `preprocessNode`. This hook is thrown
    each time we process a DOM element with Knockout. It does not bind to a concrete
    binding. It is fired to all processed nodes, so you need a mechanism to locate
    the node you want to manipulate.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用钩子`preprocessNode`操纵 DOM 节点。每当我们用 Knockout 处理 DOM 元素时，都会触发此钩子。它不绑定到一个具体的绑定。它对所有已处理的节点触发，因此您需要一种机制来定位要操纵的节点。
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned how to extend Knockout using custom bindings
    and components. Custom bindings extend the options we can use inside the `data-bind`
    attribute and give us the power to make our code more readable, isolating DOM
    and data manipulation inside them. On the other hand, we have components. Components
    have their own view-model. They are an isolated application themselves. They help
    us to build complex applications through small pieces of code that interact with
    each other.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了如何使用自定义绑定和组件扩展 Knockout。自定义绑定扩展了我们可以在`data-bind`属性中使用的选项，并赋予了我们使代码更可读的能力，将
    DOM 和数据操作隔离在其中。另一方面，我们有组件。组件有它们自己的视图模型。它们本身就是一个孤立的应用程序。它们帮助我们通过彼此交互的小代码片段构建复杂的应用程序。
- en: Now that you know how to split applications into small pieces of code, in the
    next chapter, you are going to learn how to use events in an unobtrusive way and
    how to extend observables to increase the performance and capabilities of Knockout.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何将应用程序拆分成小代码片段，在下一章中，您将学习如何以不显眼的方式使用事件以及如何扩展可观察对象以增加 Knockout 的性能和功能。
- en: To download the code from this chapter, go to the GitHub repository at [https://github.com/jorgeferrando/knockout-cart/tree/chapter3](https://github.com/jorgeferrando/knockout-cart/tree/chapter3).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载本章的代码，请转到 GitHub 存储库[https://github.com/jorgeferrando/knockout-cart/tree/chapter3](https://github.com/jorgeferrando/knockout-cart/tree/chapter3)。
