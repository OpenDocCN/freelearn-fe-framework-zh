["```js\n    $ cp -R ch8 ch9\n    ```", "```js\n    $ npm init playwright@1.17.131\n    ```", "```js\n    import { defineConfig, devices } from '@playwright/test'\n    ```", "```js\n    export default defineConfig({\n    ```", "```js\n    import dotenv from 'dotenv'\n    dotenv.config()\n    import globalSetup from './test/globalSetup.js'\n    import { app } from './app.js'\n    import { initDatabase } from './db/init.js'\n    ```", "```js\n    async function runTestingServer() {\n    ```", "```js\n      await globalSetup()\n      await initDatabase()\n      const PORT = process.env.PORT\n      app.listen(PORT)\n      console.info(`TESTING express server running on http://localhost:${PORT}`)\n    }\n    ```", "```js\n    runTestingServer()\n    ```", "```js\n        \"e2e\": „node src/e2e.js\",\n    ```", "```js\n    $ npm install --save-dev concurrently@8.2.2\n    ```", "```js\n        \"e2e\": \"concurrently \\\"npm run e2e:client\\\" \\\"npm run e2e:server\\\"\",\n    ```", "```js\n        \"e2e:client\": \"npm run build && npm run start\",\n    ```", "```js\n        \"e2e:server\": \"cd backend/ && npm run e2e\",\n    ```", "```js\n      use: {\n        /* Base URL to use in actions like `await page.goto('/')`. */\n        baseURL: 'http://localhost:5173',\n    ```", "```js\n      webServer: {\n        command: 'npm run e2e',\n        url: 'http://localhost:5173',\n      },\n    ```", "```js\n    import { test, expect } from '@playwright/test'\n    ```", "```js\n    test('has title', async ({ page }) => {\n    ```", "```js\n      await page.goto('/')\n    ```", "```js\n      await expect(page).toHaveTitle('Full-Stack React Blog')\n    })\n    ```", "```js\n    ch9 folder), and not inside the backend folder, when running this command!\n    ```", "```js\n    $ npm run e2e\n    ```", "```js\nimport { test, expect } from '@playwright/test'\ntest('test', async ({ page }) => {\n  await page.goto('http://localhost:5173/')\n  await page.getByRole('link', { name: 'Sign Up' }).click()\n  await page.getByLabel('Username:').click()\n  await page.getByLabel('Username:').fill('test')\n  await page.getByLabel('Password:').click()\n  await page.getByLabel('Password:').fill('test')\n  await page.getByRole('button', { name: 'Sign Up' }).click()\n  await page.getByLabel('Username:').click()\n  await page.getByLabel('Username:').fill('test')\n  await page.getByLabel('Password:').click()\n  await page.getByLabel('Password:').fill('test')\n  await page.getByRole('button', { name: 'Log In' }).click()\n})\n```", "```js\n    test('allows sign up and log in', async ({ page }) => {\n    ```", "```js\n      const testUser = 'test' + Date.now()\n    ```", "```js\n      await page.goto('/')\n    ```", "```js\n      await page.getByLabel('Username:').fill(testUser)\n    ```", "```js\n      await page.getByRole('button', { name: 'Sign Up' }).click()\n      await page.waitForURL('**/login')\n    ```", "```js\n      await page.getByLabel('Username:').fill(testUser)\n    ```", "```js\n      await page.getByRole('button', { name: 'Log In' }).click()\n      await page.waitForURL('**/')\n    ```", "```js\n    export function Header() {\n      const [token, setToken] = useAuth()\n      if (token) {\n        const { sub } = jwtDecode(token)\n        return (\n          <nav>\n            Logged in as <User id={sub} />\n            <br />\n            <button onClick={() => setToken(null)}>Logout</button>\n          </nav>\n        )\n      }\n      return (\n        <nav>\n          <Link to='/login'>Log In</Link> | <Link to='/signup'>Sign Up</Link>\n        </nav>\n      )\n    }\n    ```", "```js\n      await expect(page.locator('nav')).toContainText('Logged in as ' + testUser)\n    })\n    ```", "```js\n    export class AuthFixture {\n    ```", "```js\n      constructor(page) {\n        this.page = page\n      }\n    ```", "```js\n      async signUpAndLogIn() {\n        const testUser = 'test' + Date.now()\n        await this.page.goto('/signup')\n        await this.page.getByLabel('Username:').fill(testUser)\n        await this.page.getByLabel('Password:').fill('password')\n        await this.page.getByRole('button', { name: 'Sign Up' }).click()\n        await this.page.waitForURL('**/login')\n        await this.page.getByLabel('Username:').fill(testUser)\n        await this.page.getByLabel('Password:').fill('password')\n        await this.page.getByRole('button', { name: 'Log In' }).click()\n        await this.page.waitForURL('**/')\n        return testUser\n      }\n    }\n    ```", "```js\n    import { test as baseTest } from '@playwright/test'\n    import { AuthFixture } from './AuthFixture.js'\n    ```", "```js\n    export const test = baseTest.extend({\n      auth: async ({ page }, use) => {\n        const authFixture = new AuthFixture(page)\n        await use(authFixture)\n      },\n    })\n    ```", "```js\n    export { expect } from '@playwright/test'\n    ```", "```js\n    import { test, expect } from './fixtures/index.js'\n    ```", "```js\n    test('allows creating a new post', async ({ page, auth }) => {\n    ```", "```js\n      const testUser = await auth.signUpAndLogIn()\n    })\n    ```", "```js\n      await page.getByLabel('Title:').click()\n      await page.getByLabel('Title:').fill('Test Post')\n      await page.getByLabel('Title:').press('Tab')\n      await page.locator('textarea').fill('Hello World!')\n      await page.locator('textarea').press('Tab')\n      await page.getByRole('button', { name: 'Create' }).press('Enter')\n    ```", "```js\n      await expect(page.getByText(`Test PostWritten by ${testUser}`)).toBeVisible()\n    })\n    ```", "```js\n$ npx playwright test\n```", "```js\n$ npx playwright show-report\n```", "```js\n          - name: Install dependencies\n            run: npm ci\n          - name: Install backend dependencies\n    npm ci command ensures that the project already has a package-lock.json file and does not write a lock file, ensuring a clean state for CI to run on.\n    ```"]