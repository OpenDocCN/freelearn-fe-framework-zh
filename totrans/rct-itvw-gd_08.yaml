- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Testing and Debugging the React Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和调试React应用
- en: React has become the most popular frontend library in the field of web development,
    enabling programmers to build effective, scalable, and maintainable apps. To ensure
    the stability and dependability of your application, comprehensive testing and
    efficient debugging have become increasingly crucial as projects become larger
    and more complicated. This chapter provides a thorough examination of the tools
    and methods required to master testing and debugging React apps, laying the groundwork
    for you to build on as you hone your abilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React已经成为网络开发领域最受欢迎的前端库，使程序员能够构建有效、可扩展且易于维护的应用程序。为了确保您的应用程序的稳定性和可靠性，随着项目的规模和复杂性不断增加，全面测试和高效调试变得越来越重要。本章将详细探讨掌握测试和调试React应用所需的工具和方法，为您在提高技能的过程中打下基础。
- en: We’ll start by talking about React testing helpers, which facilitate testing
    and boost productivity. Then, we will review the most well-liked and adaptable
    testing tools accessible right now for the JavaScript and React ecosystem, including
    Enzyme, Jest, and **React Testing Library**. By doing this, you will be able to
    choose the appropriate tools for your unique needs and requirements. The setup
    and takedown phases of the testing life cycle will then be covered in detail.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先讨论React测试助手，它有助于测试并提高生产力。然后，我们将回顾目前JavaScript和React生态系统中最受欢迎和最灵活的测试工具，包括Enzyme、Jest和**React测试库**。通过这样做，您将能够根据您独特的需求和需求选择合适的工具。接下来，我们将详细讨论测试生命周期的设置和拆除阶段。
- en: We have devoted a section to discussing the best practices for addressing data
    fetching and mocking issues inside our tests because they are essential components
    for applications. We will dive into the details of testing user events, controlling
    timers, and modeling real-world interactions, giving you the necessary tools to
    confirm the responsiveness and performance of your application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经专门用一节来讨论解决测试中数据获取和模拟问题的最佳实践，因为它们是应用程序的关键组成部分。我们将深入了解测试用户事件、控制定时器和模拟现实世界交互的细节，为您提供确认应用程序响应性和性能所需的工具。
- en: Finally, we’ll present React DevTools, a vital tool for troubleshooting and
    evaluating your React apps.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将介绍React DevTools，这是调试和评估您的React应用的必备工具。
- en: By the end of this chapter, you will be equipped with the knowledge, abilities,
    and self-assurance necessary to successfully test and debug your React apps. You
    will be well equipped to build applications that are both dependable and robust
    in the face of constantly changing circumstances if you have a firm grasp of the
    tools and approaches at your disposal. So, let’s start on the path to becoming
    experts in testing and debugging React apps so that your projects can withstand
    the test of time.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将具备成功测试和调试您的React应用所需的知识、能力和自信。如果您对可用的工具和方法有牢固的掌握，您将能够构建在不断变化的环境中既可靠又健壮的应用程序。因此，让我们踏上成为React应用测试和调试专家的旅程，以便您的项目能够经受时间的考验。
- en: 'In this chapter, we are going to take a deep dive into the subject of testing
    and debugging from a software point of view as we learn the fundamentals, ideology,
    and concepts for testing our React applications. The following topics will be
    covered:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从软件的角度深入探讨测试和调试的主题，学习测试我们的React应用的基本知识、理念和概念。以下内容将涵盖：
- en: Introducing React testing helpers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍React测试助手
- en: Testing our software
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试我们的软件
- en: Managing data in our applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的应用中管理数据
- en: Code execution using events and timers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用事件和定时器执行代码
- en: Using React DevTools for debugging and analysis
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React DevTools进行调试和分析
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the projects and code of this chapter, here: [https://github.com/PacktPublishing/React-Interview-Guide/tree/main/Chapter08](https://github.com/PacktPublishing/React-Interview-Guide/tree/main/Chapter08)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到本章的项目和代码：[https://github.com/PacktPublishing/React-Interview-Guide/tree/main/Chapter08](https://github.com/PacktPublishing/React-Interview-Guide/tree/main/Chapter08)
- en: Introducing React testing helpers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍React测试助手
- en: In this section, we are going to learn about the fundamentals of RTL. But first,
    let’s try to understand what testing means when it comes to programming so that
    we can learn about the core concepts and methodology.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习RTL（寄存器传输级）的基础知识。但首先，让我们尝试理解在编程中测试的含义，以便我们可以了解核心概念和方法论。
- en: What is testing in software development?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件开发中的测试是什么？
- en: Reviewing a software program or system to verify it satisfies its functional
    and non-functional criteria and certifying its overall quality, performance, and
    dependability is known as testing in software development. It comprises running
    the program under controlled settings to find mistakes, flaws, or possible problems
    before the product is delivered to end customers. Testing is usually done at many
    levels, from the individual component level to the completely integrated system,
    and it is a critical part of the software development life cycle.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，审查软件程序或系统以验证其满足其功能和非功能标准，并认证其整体质量、性能和可靠性，被称为测试。它包括在受控环境下运行程序以找出错误、缺陷或可能的问题，在产品交付给最终客户之前。测试通常在多个级别进行，从单个组件级别到完全集成的系统，它是软件开发生命周期的一个关键部分。
- en: 'Depending on the project, there could be any number of testing phases. Let’s
    see what some of these testing-level phases could look like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目情况，可能会有任何数量的测试阶段。让我们看看这些测试级别的阶段可能是什么样子：
- en: '| **Testing phase** | **Description** |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **测试阶段** | **描述** |'
- en: '| --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Unit tests | Testing isolated code or its parts is known as unit testing.
    It guarantees that every unit operates according to its specifications and acts
    as intended. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 单元测试 | 测试独立的代码或其部分被称为单元测试。它保证每个单元都按照其规范操作并按预期行事。|'
- en: '| Integration tests | Testing the integration and relationships among various
    software units, modules, or components is known as integration testing. It guarantees
    that the components talk effectively with one another and that the combined system
    functions as a whole. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 集成测试 | 测试各种软件单元、模块或组件之间的集成和关系称为集成测试。它保证组件之间能够有效沟通，并且组合的系统作为一个整体运行。|'
- en: '| Regression tests | Regression testing is done to make sure that new code
    modifications or improvements don’t negatively impact already-existing functionality.
    It entails re-running earlier tests following software modifications. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 回归测试 | 回归测试是为了确保新的代码修改或改进不会对已存在的功能产生负面影响。它涉及在软件修改后重新运行早期测试。|'
- en: '| Security tests | The product’s security features and weaknesses are evaluated
    during security testing. It pinpoints possible security concerns such as data
    leaks, unauthorized access, and coding flaws. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 安全测试 | 在安全测试期间，评估产品的安全特性和弱点。它指出了可能的安全问题，如数据泄露、未经授权的访问和编码缺陷。|'
- en: '| Functional tests | Software functioning is compared to the stated requirements
    through functional testing. It comprises testing numerous features, use cases,
    and situations to evaluate the program from the viewpoint of the end user. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 功能测试 | 通过功能测试，将软件的功能与声明的需求进行比较。它包括测试多个功能、用例和场景，从最终用户的角度评估程序。|'
- en: '| Alpha and beta tests | Before distributing the program to a select group
    of external users, internal testers do alpha testing in a restricted environment.
    Beta testing involves making the program available to a wider number of outside
    users to obtain input from actual users and spot any possible problems. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 阿尔法和贝塔测试 | 在将程序分发给选定的小组外部用户之前，内部测试员在受限环境中进行阿尔法测试。贝塔测试涉及将程序提供给更多外部用户，以获取实际用户的反馈并发现任何可能的问题。|'
- en: '| Performance tests | The software’s adaptability, rapidity, ability to scale,
    and stability under various load levels are assessed during performance testing.
    This involves testing variables such as the speed of response, resource use, and
    constraints in the system. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 性能测试 | 在性能测试期间，评估软件在各种负载水平下的适应性、速度、可扩展性和稳定性。这包括测试响应速度、资源使用和系统中的限制等变量。|'
- en: 'Table 8.1: Software development testing phases'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表8.1：软件开发测试阶段
- en: As you can see, there are many different types of testing that we can perform
    during a project’s life cycle. Next, let’s learn how we can do testing in React
    applications.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在项目生命周期中，我们可以执行许多不同类型的测试。接下来，让我们学习如何在React应用程序中进行测试。
- en: How do we do testing in React applications?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何在React应用程序中进行测试？
- en: In React, testing is the method of confirming and validating each component
    and the entire application to make sure they work as intended and adhere to the
    set criteria. This often involves testing each individual React component, user
    interactions, and any potential changes to the application state. There are a
    few ways that we can do testing in React applications and these are typically
    unit testing, integration testing, and **end-to-end** (**E2E**) testing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，测试是确认和验证每个组件以及整个应用程序是否按预期工作并符合设定的标准的方法。这通常涉及测试每个单独的React组件、用户交互以及应用程序状态的任何潜在变化。在React应用程序中，我们可以以几种方式执行测试，这些通常是单元测试、集成测试和**端到端**（**E2E**）测试。
- en: How do you set up a test environment for a React application?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何为React应用程序设置测试环境？
- en: For your React application to be reliable, maintainable, and of the highest
    quality possible, you must set up a testing environment. You can perform tests
    in a controlled, isolated setting that closely mirrors the production environment
    if your test environment is set up correctly. This aids in locating and resolving
    possible problems before they impact end customers. All test environments require
    us developers to write tests for them, which is known as **test-driven** **development**
    (**TDD**).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的React应用程序可靠、可维护且质量最高，你必须设置一个测试环境。如果你的测试环境设置正确，你可以在一个受控、隔离的环境中执行测试，这个环境与生产环境非常相似。这有助于在这些问题影响最终客户之前找到并解决它们。所有测试环境都需要我们开发者为它们编写测试，这被称为**测试驱动开发**（**TDD**）。
- en: 'The following figure describes the TDD cycle in a software development workflow.
    Coding, testing, and design are closely knitted together in this programming approach.
    There are many variations of this; however, the fundamental principle remains
    the same:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下图描述了软件开发工作流程中的TDD周期。在这个编程方法中，编码、测试和设计紧密相连。虽然有很多变体，但基本原理保持不变：
- en: '![ Figure 8.1: The TDD cycle in software development](img/Figure_08.01_B18603.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：软件开发中的TDD周期](img/Figure_08.01_B18603.jpg)'
- en: 'Figure 8.1: The TDD cycle in software development'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：软件开发中的TDD周期
- en: Now that we have learned about the TDD cycle in software development, let’s
    move on to testing frameworks/libraries to see how we can best use them in our
    apps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了软件开发中的TDD周期，让我们继续探讨测试框架/库，看看我们如何在我们的应用程序中最好地使用它们。
- en: How do you choose a testing framework or library?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何选择一个测试框架或库？
- en: 'When building a React application, it’s a good idea to consider a good testing
    library. Having a good testing structure means that our software should operate
    as expected and live up to the user’s expectations. So, let’s take a look at some
    of the popular testing libraries available right now:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建React应用程序时，考虑一个好的测试库是个好主意。拥有良好的测试结构意味着我们的软件应该按预期运行并满足用户的期望。因此，让我们看看目前可用的几个流行的测试库：
- en: '**React Testing Library** (**RTL**): The lightweight RTL focuses on testing
    the functionality of your components. Compared to other testing frameworks, it
    offers a more straightforward API.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React Testing Library**（**RTL**）：轻量级的RTL专注于测试组件的功能。与其他测试框架相比，它提供了一个更直接的API。'
- en: '**Jest**: The popular testing framework Jest is already set up to operate with
    React. It has built-in capabilities for testing React apps, such as mocking and
    snapshot testing.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jest**：流行的测试框架Jest已经设置为与React一起工作。它具有内置的测试React应用程序的功能，例如模拟和快照测试。'
- en: '**Enzyme**: Shallow rendering, complete DOM rendering, and snapshot testing
    are just a few of the testing tools offered for React by the potent testing framework
    Enzyme.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Enzyme**：浅渲染、完整DOM渲染和快照测试只是Enzyme这个强大的测试框架为React提供的几个测试工具之一。'
- en: '**Vite**: The frontend build tool Vite has a unit testing framework called
    **Vitest**. It is a good unit test framework with numerous contemporary features,
    including support for TypeScript, JSX, and component testing for React.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vite**：前端构建工具Vite有一个名为**Vitest**的单元测试框架。它是一个具有众多现代特性的优秀单元测试框架，包括对TypeScript、JSX和React组件测试的支持。'
- en: '**Cypress**: Cypress is an E2E solution for advanced web test automation that
    is JavaScript-based. Frontend developers and QA engineers can build automated
    web tests with the help of this tool, which is designed for developers and runs
    directly in the browser'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cypress**：Cypress是一个基于JavaScript的E2E高级网页测试自动化解决方案。前端开发人员和QA工程师可以使用这个工具构建自动化网页测试，该工具专为开发者设计，并直接在浏览器中运行'
- en: When it comes to testing, there are multiple ways that we can get it set up
    inside our React projects. Every developer has their personal preference. Some
    choose to have a dedicated folder where all of their test files go that is separate
    from their main components. Others prefer to have their test files in the same
    folder as their component and in both cases, the test files follow the same naming
    conventions as their components – so, for example, `index.js` and `index.test.js`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试方面，我们可以在 React 项目中设置多种方式。每个开发者都有自己的偏好。有些人选择有一个专门的文件夹，其中包含所有测试文件，并且与主要组件分开。其他人更喜欢将测试文件放在与组件相同的文件夹中，在两种情况下，测试文件都遵循与组件相同的命名约定——例如，`index.js`
    和 `index.test.js`。
- en: 'The following figure shows an example of both use cases. It is a Next.js project
    that has the default setup for a Jest and RTL project. There is a folder named
    `__tests__` that contains a test called `index.test.tsx`. There is another `index.test.tsx`
    file inside of the `pages` folder next to the `index.tsx` component. Both tests
    can be run using the `npm` `test` command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图显示了这两个用例的示例。这是一个 Next.js 项目，它为 Jest 和 RTL 项目设置了默认配置。有一个名为 `__tests__` 的文件夹，其中包含一个名为
    `index.test.tsx` 的测试。在 `pages` 文件夹中，紧挨着 `index.tsx` 组件，还有一个 `index.test.tsx` 文件。这两个测试都可以使用
    `npm test` 命令运行：
- en: '![Figure 8.2: React project testing file structure](img/Figure_08.02_B18603.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2：React 项目测试文件结构](img/Figure_08.02_B18603.jpg)'
- en: 'Figure 8.2: React project testing file structure'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：React 项目测试文件结构
- en: Now that we have learned a bit about testing conventions in general, the next
    topic we’ll cover will be the fundamentals of RTL.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对一般的测试约定有了些了解，接下来我们将讨论 RTL 的基本原理。
- en: What are the fundamentals of React Testing Library?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React 测试库的基本原理是什么？
- en: With the help of the well-liked testing tool RTL, developers are urged to test
    their components in an approach that closely matches how consumers will interact
    with the application. RTL encourages testing components according to what individuals
    observe and perform instead of on implementation specifics, ensuring that the
    program stays accessible, manageable, and user-friendly. RTL is a family of packages,
    and it can be used on both React and React Native projects. So, it’s good to know
    that we can use the same package to test our web and mobile apps.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在受欢迎的测试工具 RTL 的帮助下，开发人员被敦促以与消费者如何与应用程序交互的方式相似的方法测试他们的组件。RTL 鼓励根据个人观察和执行的内容来测试组件，而不是基于实现的具体细节，确保程序保持可访问性、可管理性和用户友好性。RTL
    是一系列包，它可以在 React 和 React Native 项目中使用。因此，了解我们可以使用相同的包来测试我们的网页和移动应用是很好的。
- en: 'RTL has many different core principles that we should become familiar with:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: RTL 有许多不同的核心原则，我们应该熟悉它们：
- en: '`fireEvent` method, which lets you start a variety of DOM events, such as click,
    change, or submit, to imitate user interactions. This enables you to verify that
    the anticipated behavior is displayed by testing how your components respond to
    user interactions.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fireEvent` 方法，它允许你启动各种 DOM 事件，如点击、更改或提交，以模仿用户交互。这使你能够通过测试组件对用户交互的反应来验证预期的行为是否显示。'
- en: '`GetByText`, `GetByRole`, and `GetByTestId` are a few often-used queries.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetByText`、`GetByRole` 和 `GetByTestId` 是一些常用的查询。'
- en: '**Custom render**: There is a default render function that you can use to render
    your components, but you can also design your own render function to wrap your
    components in a particular context or with a particular provider. When your components
    depend on unique context settings, such as theme or localization, this is very
    helpful.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义渲染**：有一个默认的渲染函数，你可以用它来渲染你的组件，但你也可以设计自己的渲染函数，将你的组件包裹在特定的上下文或提供者中。当你的组件依赖于独特的上下文设置，如主题或本地化时，这非常有帮助。'
- en: '`screen` to output an object that gives you easy access to the displayed parts
    and query methods without you having to manually break them down. You may streamline
    your exams and make them easier to read by using `screen`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `screen` 可以输出一个对象，它让你能够轻松访问显示的部分和查询方法，无需手动分解。通过使用 `screen`，你可以使你的考试更加简洁，并使其更容易阅读。
- en: '`waitFor`, `waitForElementToBeRemoved`, and `find*` searches when working with
    components that download data or depend on asynchronous activities. By guaranteeing
    that your tests wait for the necessary components or actions before continuing,
    these methods assist in managing the asynchronous operation of your components.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当与下载数据或依赖于异步活动的组件一起工作时，使用`waitFor`、`waitForElementToBeRemoved`和`find*`搜索。通过确保在继续之前，您的测试等待必要的组件或操作，这些方法有助于管理组件的异步操作。
- en: '`@testing-library/user-event` package in addition to `fireEvent`. The advanced
    event simulation functions in this package more closely resemble user behavior
    than the fundamental `fireEvent` method.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了`fireEvent`之外，还有`@testing-library/user-event`包。这个包中高级的事件模拟功能更接近用户行为，比基本的`fireEvent`方法更接近。
- en: So, now that we have grasped the idea of using React testing helpers to set
    up a robust testing environment, let’s take what we’ve learned and see how we
    can best set up our test environments when using these tools. This is also going
    to be a chance to see some example test cases.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们已经掌握了使用React测试助手来设置强大测试环境的概念，让我们将所学知识应用到实际中，看看我们如何最好地使用这些工具来设置我们的测试环境。这还将是一个查看一些示例测试用例的机会。
- en: Testing our software
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的软件
- en: Now, let’s focus on learning how we can set up and clean up our project and
    code base to isolate the effects of tests – that is, setup and teardown. Setup
    and teardown are the actions that are taken before and following each test or
    collection of tests in the context of programming, particularly in software testing.
    Doing this ensures that we have good test coverage and that our tests are reliable.
    It’s crucial to adhere to a methodical approach while setting up and deconstructing
    tests to isolate their impacts. This guarantees that tests are independent of
    one another and do not affect one another, producing precise and trustworthy findings.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于学习如何设置和清理我们的项目和代码库，以隔离测试的影响——也就是说，设置和拆卸。设置和拆卸是在编程的上下文中在每个测试或一系列测试之前和之后采取的操作，尤其是在软件测试中。这样做可以确保我们有良好的测试覆盖率，并且我们的测试是可靠的。在设置和拆卸测试时遵循一种系统的方法至关重要，这保证了测试之间是独立的，不会相互影响，产生精确和可靠的发现。
- en: In automated testing, the setup and teardown steps are critical for separating
    the effects of specific tests. Before each test, the setup process helps establish
    a consistent state. This stage may include tasks such as generating required objects,
    connecting to a database, or initializing particular settings. By conducting these
    procedures before each test, we guarantee that each test begins from the same
    starting point, regardless of the outcomes during previous tests. This implies
    that a test’s behavior is not impacted by the side effects of a preceding test,
    which is critical for accurate, trustworthy testing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化测试中，设置和拆卸步骤对于分离特定测试的影响至关重要。在每个测试之前，设置过程有助于建立一致的状态。这一阶段可能包括生成所需对象、连接到数据库或初始化特定设置等任务。通过在每个测试之前执行这些程序，我们保证每个测试都是从相同的起点开始的，无论之前的测试结果如何。这意味着测试的行为不受先前测试的副作用的影响，这对于准确、可靠的测试至关重要。
- en: Any modifications that are made during the test can be undone during the teardown
    phase. This could require actions such as cutting off database access, removing
    test data, or erasing objects made during the test. We don’t have to worry about
    changes made during one test affecting subsequent tests if we clean up after each
    test. Without a breakdown step, a test could ultimately leave behind certain modifications
    that might affect the behavior of subsequent tests.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试期间进行的任何修改都可以在拆卸阶段撤销。这可能需要诸如切断数据库访问、删除测试数据或擦除测试期间创建的对象等操作。如果我们每次测试后都进行清理，我们不必担心一个测试期间所做的更改会影响后续的测试。如果没有拆卸步骤，测试最终可能会留下可能影响后续测试行为的某些修改。
- en: Each test runs in the same starting environment and has no impact on the environment
    for any other tests thanks to the setup and teardown stages, which work together
    to make sure each test is isolated and reproducible. One of the guiding principles
    of automated testing is to make sure that the tests are trustworthy and that any
    flaws that are discovered are attributable to the code being tested and not to
    the test configuration or cross-test interaction.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于设置和拆除阶段的存在，每个测试都在相同的起始环境中运行，并且不会对其他测试的环境产生影响，这些阶段共同确保每个测试都是隔离和可重复的。自动化测试的一个指导原则是确保测试是可信的，并且发现的任何缺陷都是归因于正在测试的代码，而不是测试配置或跨测试交互。
- en: 'There are some rules that we can follow that will help us generate an effective
    test plan. Let’s walk through them and see how following them can give us a good
    strategy:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以遵循一些规则来帮助我们生成有效的测试计划。让我们逐一了解它们，看看遵循它们如何为我们提供良好的策略：
- en: '**Set up the test environment**: Ensure that the testing environment is the
    same for all tests. This covers any prerequisites that are required for the test
    to perform as well as the software, devices, and network setups.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置测试环境**：确保所有测试的测试环境相同。这包括测试执行所需的任何先决条件，如软件、设备和网络设置。'
- en: '**Version control**: Use version control tools such as Git and GitHub to keep
    track of changes to your code and tests so that you can see any problems that
    fresh code or tests could cause.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：使用版本控制工具，如Git和GitHub，来跟踪代码和测试的更改，以便您可以查看新代码或测试可能引起的问题。'
- en: '**Create good tests**: Choose the exact tests you wish to run, and then list
    the variables and testing conditions for each.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建良好的测试**：选择您希望运行的精确测试，然后列出每个测试的变量和测试条件。'
- en: '**Utilize test isolation**: Create your tests so that they have no dependence
    on other tests. This implies that each test must have its own setup and teardown
    and cannot rely on the results or state of any other test.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用测试隔离**：创建测试，使它们不依赖于其他测试。这意味着每个测试都必须有自己的设置和拆除，不能依赖于任何其他测试的结果或状态。'
- en: '**Use monitoring**: To gather test results and spot any anomalies or trends
    in the test data, use logging and monitoring.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用监控**：为了收集测试结果并发现测试数据中的任何异常或趋势，请使用日志和监控。'
- en: '**Make continuous improvements**: Always enhance your tests and testing environment
    based on the findings and suggestions from each cycle of testing.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进**：始终根据每个测试周期的发现和建议增强测试和测试环境。'
- en: '**Use methods**: Implement the setup and takedown procedures that are carried
    out before and following each test. These techniques may be used to build and
    remove resources that the tests require, such as temporary files or database connections.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用方法**：实施每个测试前后执行的设置和拆除程序。这些技术可以用来构建和删除测试所需的资源，例如临时文件或数据库连接。'
- en: '**Parallel or sequential testing**: Run the tests sequentially to ensure there
    is no conflict between them or run them in parallel based on the kind of test
    to expedite the process.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行或顺序测试**：按顺序运行测试以确保它们之间没有冲突，或者根据测试类型并行运行以加快过程。'
- en: '**Mock external functions**: An approach to testing that isolates the unit
    of code being evaluated from its dependencies, such as external libraries, services,
    or functions, is mocking external functions. Usually, this is done to provide
    predictable and controlled test conditions. For a variety of testing scenarios,
    mocking enables you to imitate the behavior of external dependencies before actually
    calling them.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟外部函数**：一种将正在评估的代码单元与其依赖项（如外部库、服务或函数）隔离的测试方法称为模拟外部函数。通常，这是为了提供可预测和可控的测试条件。对于各种测试场景，模拟允许您在实际调用之前模仿外部依赖的行为。'
- en: Now that we have learned some of the basics of setting up our projects for testing
    it’s time to take it a step further and move on to learning all about writing
    tests for our React.js projects.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了为测试设置项目的一些基础知识，是时候更进一步，学习如何为我们的React.js项目编写测试了。
- en: How do we write tests for components, props, and events?
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何为组件、属性和事件编写测试？
- en: Once you’ve selected a testing framework and libraries, you can start developing
    tests for your React application. You will create a variety of tests, with each
    one having a different purpose and scope. There are several types of tests we
    can write, including component tests, unit tests, integration tests, event tests,
    and E2E tests. The aim is to get as much test coverage across all of the tests
    to set a benchmark and give you credibility and confidence that your application
    has thorough testing in place.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了测试框架和库，你就可以开始为你的React应用程序开发测试。你将创建各种测试，每个测试都有不同的目的和范围。我们可以编写几种类型的测试，包括组件测试、单元测试、集成测试、事件测试和端到端测试。目标是尽可能多地覆盖所有测试，以设定基准并给你提供信心和信心，即你的应用程序已经实施了彻底的测试。
- en: What are component tests?
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件测试是什么？
- en: A React component test is a form of unit test that specializes in individually
    testing React components. React components are the building blocks of a React
    application and define the UI, encapsulate functionality, and manage the application’s
    state. Testing React components ensures that they behave properly and meet the
    desired functionality and criteria.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: React组件测试是一种单元测试形式，专门用于单独测试React组件。React组件是React应用程序的构建块，定义了UI、封装了功能并管理了应用程序的状态。测试React组件确保它们的行为正确，并满足预期的功能和标准。
- en: In this code example, we can see what a component test looks like for a component
    called `Counter.tsx`. We have an accompanying `Counter.test.tsx` file that tests
    for increments and decrements on the buttons.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码示例中，我们可以看到名为`Counter.tsx`的组件的组件测试看起来是什么样子。我们有一个配套的`Counter.test.tsx`文件，用于测试按钮的递增和递减。
- en: 'Here’s the code for the `Counter.tsx` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`Counter.tsx`文件的代码：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the code for our test file, `Counter.test.tsx`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的测试文件`Counter.test.tsx`的代码：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have now learned the basics of component and component test files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学习了组件和组件测试文件的基础知识。
- en: What are unit tests?
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: React unit tests are a method of testing that focuses on individual React components.
    Their purpose is to guarantee that each component behaves appropriately, follows
    the intended functionality and requirements, and tests the logic and output of
    the component. Unit tests are an essential aspect of the testing process since
    they assist developers in identifying and resolving issues at the most granular
    level, ensuring that each component of the application performs properly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: React单元测试是一种测试方法，专注于单个React组件。它们的目的确保每个组件的行为适当，遵循预期的功能和要求，并测试组件的逻辑和输出。单元测试是测试过程中的一个重要方面，因为它们帮助开发者识别和解决最细粒度级别的问题，确保应用程序的每个组件都正常工作。
- en: We saw what a unit test looks like in our component test example.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的组件测试示例中看到了单元测试的样子。
- en: What is an integration test?
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是集成测试？
- en: A React integration test is a type of test that verifies the right interaction
    and behavior of many React components or between a React component and other system
    components such as APIs or external services. Integration tests, as opposed to
    unit tests, analyze how well components interact together inside the program,
    ensuring that general functionality is proper and data flows easily between different
    areas of the system.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: React集成测试是一种测试类型，用于验证多个React组件之间的正确交互和行为，或者React组件与其他系统组件（如API或外部服务）之间的交互。与单元测试不同，集成测试分析组件在程序内部如何相互作用，确保总体功能正确且数据在不同系统区域之间流畅流动。
- en: Integration tests are multiple tests that run inside of a `describe()` function
    block scope, as shown in our earlier component test example.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是在`describe()`函数块作用域内运行的多个测试，正如我们之前组件测试示例中所示。
- en: What are event tests?
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是事件测试？
- en: React event tests are a form of testing that focuses on confirming the behavior
    and functioning of React component event handlers. User interactions or system
    occurrences that trigger specified actions inside a React application are referred
    to as events. Button clicks, form submissions, mouse movements, and keyboard inputs
    are all examples of events. By testing event handlers, you guarantee that your
    application responds to user interactions appropriately and that the necessary
    actions are taken when events are triggered.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: React事件测试是一种测试形式，专注于确认React组件事件处理器的行为和功能。触发React应用程序内部指定动作的用户交互或系统事件被称为事件。按钮点击、表单提交、鼠标移动和键盘输入都是事件的例子。通过测试事件处理器，你确保应用程序能够适当地响应用户交互，并在事件触发时采取必要的行动。
- en: What is snapshot regress testing?
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是快照回归测试？
- en: In React, we can use snapshot tests as a way to confirm that our UI has not
    changed and remains the same as it was prior. This helps us check that there were
    no unexpected changes that can affect the way that our design is rendered on screen.
    With snapshot testing, it is common for a snapshot of our code base to be taken
    that can then be compared to a reference snapshot file that is combined with a
    test. The test fails if the snapshots are not the same, and this is how we can
    ensure that there have been no changes to the UI. We can always update the snapshot
    to the latest version to match any changes we have made to the UI.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中，我们可以使用快照测试作为一种确认我们的 UI 没有改变，并且保持与之前相同的方法。这有助于我们检查是否有意外改变可能会影响我们的设计在屏幕上的渲染方式。使用快照测试时，通常会对我们的代码库进行快照，然后与一个包含测试的参考快照文件进行比较。如果快照不相同，测试就会失败，这就是我们如何确保
    UI 没有发生变化的。我们可以随时更新快照到最新版本以匹配我们对 UI 所做的任何更改。
- en: What are end-to-end tests?
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端到端测试是什么？
- en: E2E tests are a form of testing that tries to validate the functionality of
    a whole program, from the UI through to the backend services and databases. E2E
    tests are used to model real-world user situations and guarantee that the overall
    structure works as planned, giving seamless user experience and accurate functionality.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试是一种尝试验证整个程序功能性的测试形式，从 UI 到后端服务和数据库。端到端测试用于模拟现实世界的用户情况，并确保整体结构按计划工作，提供无缝的用户体验和准确的功能。
- en: 'Cypress is a popular E2E testing library that does not come bundled with React
    projects but can be installed as a separate package. You can learn more from the
    documentation: [https://www.cypress.io/](https://www.cypress.io/).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 是一个流行的端到端测试库，它不与 React 项目捆绑在一起，但可以作为单独的包安装。您可以从文档中了解更多信息：[https://www.cypress.io/](https://www.cypress.io/)。
- en: We can use our earlier Counter project example to see what the code looks like
    when doing an E2E test with Cypress. It is quite similar to Jest and RTL and all
    three packages can work together seamlessly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们之前的 Counter 项目示例来查看使用 Cypress 进行端到端测试时的代码样子。它与 Jest 和 RTL 非常相似，这三个包可以无缝协同工作。
- en: 'Let’s take a look at our modified Counter file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们修改过的 Counter 文件：
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s our Counter test file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的 Counter 测试文件：
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These examples have provided us with a comparison between E2E tests and component
    tests; the similarities are quite clear.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例为我们提供了端到端测试和组件测试之间的比较；相似之处非常明显。
- en: Managing data in our applications
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理我们应用程序中的数据
- en: We are now going to learn how to manage the data in our applications. This is
    also known as data fetching and mocking, which are two important concepts to grasp.
    When doing testing in this area, it is necessary to have a working knowledge of
    how data-fetching APIs operate and how to mimic their data. This knowledge is
    necessary for several reasons, including development efficiency, independent testing,
    integration and interaction with external systems, and cost and rate limiting.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何管理我们应用程序中的数据。这也被称为数据获取和模拟，这是两个需要掌握的重要概念。在进行这个领域的测试时，有必要了解数据获取 API
    的工作方式和如何模拟它们的数据。这种知识对于几个原因都是必要的，包括开发效率、独立测试、与外部系统的集成和交互，以及成本和速率限制。
- en: In the case of developer efficiency, developers can separate portions of the
    application for testing and development by mocking API replies. This means that
    even if the backend portion of a feature is not yet completed, a frontend developer
    can still work on it by simulating an API response. As for independent testing,
    programmers can confirm that their tests are not impacted by the status or behavior
    of other systems by mimicking the data given by APIs, producing more dependable
    and consistent outcomes for tests.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者效率方面，开发者可以通过模拟 API 响应来分离应用程序的部分进行测试和开发。这意味着即使一个功能的后端部分尚未完成，前端开发者仍然可以通过模拟
    API 响应来工作。至于独立测试，程序员可以通过模拟 API 提供的数据来确认他们的测试不受其他系统状态或行为的影响，从而产生更可靠和一致的结果。
- en: When we use external systems such as APIs, we can communicate and exchange data
    between various software systems. To get data from databases, communicate with
    other apps, or offer services to users, many current applications are built on
    top of APIs. That’s why creating, maintaining, and enhancing these apps requires
    a functional understanding of how these APIs function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用外部系统，如 API 时，我们可以在各种软件系统之间进行通信和交换数据。为了从数据库获取数据、与其他应用程序通信或向用户提供服务，许多当前的应用程序都是建立在
    API 之上的。这就是为什么创建、维护和增强这些应用程序需要对这些 API 如何工作的功能性理解。
- en: When we think about cost and rate limiting, many APIs contain use restrictions
    or extra fees. To prevent reaching these restrictions or spending needless money,
    we can mock API answers during development and testing.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑成本和速率限制时，许多 API 包含使用限制或额外费用。为了防止达到这些限制或浪费不必要的金钱，我们可以在开发和测试期间模拟 API 响应。
- en: To use data in an application or system, data must be fetched from a data source,
    such as a database, API, or filesystem. In online applications and other software
    systems, data fetching is frequently used to display, analyze, or change data.
    It often entails sending queries to a local storage location or distant server,
    processing the answer, and then using the data in the application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序或系统中使用数据，必须从数据源（如数据库、API 或文件系统）获取数据。在在线应用程序和其他软件系统中，数据获取通常用于显示、分析或更改数据。它通常涉及向本地存储位置或远程服务器发送查询，处理答案，然后在应用程序中使用这些数据。
- en: While testing, developing, or designing processes, mocking data refers to creating
    fictitious or mock data to replicate the behavior of actual data. When building
    features for a system, testing code, or designing UIs, mock data can be used as
    a stand-in for real data. It enables programmers to test their programs and apps
    without relying on potentially private, erratic, or unreachable external data
    sources or live data.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试、开发或设计流程时，模拟数据指的是创建虚构或模拟数据来复制实际数据的行为。当为系统构建功能、测试代码或设计用户界面时，模拟数据可以用作真实数据的替代品。它使程序员能够在不依赖可能私有的、不可靠的或不可达的外部数据源或实时数据的情况下测试他们的程序和应用程序。
- en: How do we mock data for tests?
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何为测试模拟数据？
- en: 'Mock data will most likely be required while testing your React application
    to imitate real-world circumstances. This is especially helpful for testing components
    that rely on APIs or third-party services. Numerous libraries are available for
    mimicking data:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试您的 React 应用程序时，很可能会需要模拟数据来模仿现实世界的情境。这对于测试依赖于 API 或第三方服务的组件特别有帮助。有多个库可用于模拟数据：
- en: '**Axios Mock Adapter**: The Axios Mock Adapter library intercepts Axios requests
    and returns mocked data'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Axios Mock Adapter**：Axios Mock Adapter 库拦截 Axios 请求并返回模拟数据'
- en: '**Nock**: Nock is an HTTP request interceptor that returns faked data'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nock**：Nock 是一个 HTTP 请求拦截器，它返回伪造的数据'
- en: '**JSON Server**: JSON Server is a package that uses JSON data to imitate a
    REST API'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON Server**：JSON Server 是一个使用 JSON 数据来模拟 REST API 的包'
- en: Why should we use mock data in tests?
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们应该在测试中使用模拟数据？
- en: There are many reasons why it’s a good idea to use mock as opposed to real data
    in our tests. We can separate sections of our system using mock data, which makes
    it simpler to find problems and test particular components without being impacted
    by other dependencies. Controlled mock data ensures that tests are reproducible
    and produce consistent findings, which is another advantage. Developers can also
    verify their code and apps without having to wait for access to actual data thanks
    to the speedy generation of mock data. Also, during development and testing, sensitive
    or private data might be exposed, which can be a major worry for organizations.
    Using dummy data helps prevent this.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多原因说明为什么在测试中使用模拟数据而不是真实数据是一个好主意。我们可以使用模拟数据来分离我们系统的各个部分，这使得找到问题并测试特定组件变得更加简单，而不会受到其他依赖项的影响。受控的模拟数据确保测试可以重复进行并产生一致的结果，这是另一个优点。开发者也可以通过快速生成模拟数据来验证他们的代码和应用程序，而无需等待访问实际数据。此外，在开发和测试期间，敏感或私人数据可能会被暴露，这对组织来说可能是一个大问题。使用虚拟数据有助于防止这种情况发生。
- en: In the next section, we will learn about events and timers, which is crucial
    learning as it relates to asynchronous or time-dependent actions in programming.
    Asynchronous programming is a technique that allows your program to begin a potentially
    long-running operation while being responsive to other events, rather than needing
    to wait until that work is completed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习事件和计时器，这是至关重要的学习内容，因为它与编程中的异步或时间依赖性动作相关。异步编程是一种技术，允许你的程序在开始一个可能长时间运行的操作的同时，对其他事件保持响应，而不是需要等待该工作完成。
- en: When that task is completed, the outcome is shown in your program. An extremely
    flexible asynchronous and concurrent programming language such as JavaScript is
    very powerful because, like sync, it is single-threaded, but unlike async, it
    also does not block code execution, which is great for our React applications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当那个任务完成时，结果将在你的程序中显示。像JavaScript这样的极其灵活的异步和并发编程语言非常强大，因为它与同步一样是单线程的，但与异步不同，它也不会阻塞代码执行，这对我们的React应用来说是非常好的。
- en: Code execution using events and timers
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用事件和计时器的代码执行
- en: Now, let’s move on to learning about the subject of events and timers. In software
    development, events and timers are implemented to keep track of the precise moment
    in time when something outside the program takes place. Events and timers are
    critical concepts in programming, especially when dealing with asynchronous or
    time-dependent actions. They also play a crucial part in testing such systems.
    Let’s go through each subject in further depth to drill these concepts in.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续学习关于事件和计时器的主题。在软件开发中，事件和计时器被实现来跟踪程序外部发生某事的精确时间点。事件和计时器是编程中的关键概念，尤其是在处理异步或时间依赖性动作时。它们也在测试此类系统中发挥着至关重要的作用。让我们更深入地探讨每个主题，以加深这些概念的理解。
- en: What are events?
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件是什么？
- en: Events are activities or occurrences that arise during program execution and
    are frequently prompted by input from users, system changes, or other sources.
    In event-driven programming, system components respond to these occurrences by
    executing specified routines known as event handlers or callbacks.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是在程序执行期间发生的活动或事件，通常由用户的输入、系统变化或其他来源触发。在事件驱动编程中，系统组件通过执行称为事件处理程序或回调的指定例程来对这些事件做出响应。
- en: Simulating events is critical in testing to guarantee that the application responds
    as intended when the events happen. You might wish to test how your web application
    reacts to user activities such as button clicks, form submissions, or navigation
    events. By simulating these events in your tests, you can ensure that your application’s
    event handlers are functioning properly and handling various circumstances as
    planned.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中模拟事件至关重要，以确保当事件发生时，应用程序能够按预期响应。你可能希望测试你的Web应用程序如何响应用户活动，如按钮点击、表单提交或导航事件。通过在测试中模拟这些事件，你可以确保你的应用程序的事件处理程序正常工作，并按计划处理各种情况。
- en: What are timers?
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计时器是什么？
- en: Timers serve a purpose in programming as they plan the execution of certain
    functions or code snippets after a certain amount of time has passed or at regular
    intervals. In JavaScript, common timer functions are `setTimeout` and `setInterval`,
    which allow you to run a function immediately following a delay or periodically
    at predefined intervals.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器在编程中发挥作用，因为它们在经过一定时间后或在固定间隔内计划执行某些函数或代码片段。在JavaScript中，常见的计时器函数是`setTimeout`和`setInterval`，它们允许你在延迟后立即运行一个函数或在预定义的间隔内定期运行。
- en: Timers can complicate testing since they require asynchronous activities, which
    can result in unexpected behavior or race situations. A race situation, also known
    as a race hazard, is a circumstance in which the substantive behavior of software
    or other systems is reliant on the sequence or timing of other uncontrolled occurrences.
    When one or more of the alternative behaviors is undesired, it constitutes a bug.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器可能会使测试变得复杂，因为它们需要异步活动，这可能导致意外的行为或竞争条件。竞争条件，也称为竞争风险，是一种情况，其中软件或其他系统的实质性行为依赖于其他不可控事件的发生顺序或时间。当其中一个或多个替代行为是不希望出现的时候，它就构成了一个错误。
- en: It is critical to handle timers appropriately when testing code that depends
    on them to produce accurate and trustworthy test results. Now that we have learned
    about timers, the next section will take what we’ve learned further as we look
    into debugging and making the best use of our knowledge of timers, which can be
    used in conjunction.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试依赖于计时器的代码时，适当地处理计时器至关重要，以确保产生准确和可靠的测试结果。既然我们已经了解了计时器，下一节将在此基础上进一步探讨调试以及如何充分利用我们对计时器的了解，这些知识可以协同使用。
- en: Using React DevTools for debugging and analysis
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React DevTools进行调试和分析
- en: React DevTools is a browser plugin that offers a variety of tools for testing
    your React application. It allows you to investigate the component hierarchy,
    view the React component tree, and verify the props and state of your components.
    We will dive into the various debugging techniques available to us and how using
    them will give us more confidence in the code that we write.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: React DevTools是一个浏览器插件，提供了各种工具来测试您的React应用程序。它允许您调查组件层次结构，查看React组件树，并验证组件的props和state。我们将深入了解我们可用的各种调试技术，以及如何使用这些技术来增强我们对所编写代码的信心。
- en: 'React DevTools can be seen in the following figure. It is available in the
    Chrome web store:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: React DevTools可以在以下图中看到。它可在Chrome网络商店中找到：
- en: '![Figure 8.3: React DevTools](img/Figure_08.03_B18603.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3：React DevTools](img/Figure_08.03_B18603.jpg)'
- en: 'Figure 8.3: React DevTools'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：React DevTools
- en: With that, we have learned about React DevTools. Next, we’ll learn how to configure
    CI/CD pipelines for our automated tests, another useful tool in our debugging
    toolkit.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经了解了React DevTools。接下来，我们将学习如何为我们的自动化测试配置CI/CD管道，这是我们调试工具箱中的另一个有用工具。
- en: How do we configure a CI/CD pipeline to automate tests?
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何配置CI/CD管道来自动化测试？
- en: To ensure that our tests run every time we make code changes, we can configure
    a **continuous integration/continuous deployment** (**CI/CD**) pipeline that runs
    tests automatically. This allows us to catch issues early and ensure that our
    code meets the expected standard. Using a CI/CD pipeline to automate tests in
    a React application has several advantages, including higher code quality, faster
    feedback, greater collaboration, and more efficient deployment procedures. These
    advantages enable teams to create high-quality software more quickly and consistently,
    making CI/CD pipelines a vital tool for modern software development.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的测试在每次代码更改时都运行，我们可以配置一个**持续集成/持续部署（CI/CD）**管道，该管道会自动运行测试。这使我们能够尽早发现问题，并确保我们的代码符合预期的标准。使用CI/CD管道自动测试React应用程序具有多个优点，包括更高的代码质量、更快的反馈、更大的协作以及更高效的部署流程。这些优势使团队能够更快、更一致地创建高质量的软件，使CI/CD管道成为现代软件开发的重要工具。
- en: It is common practice to use a code hosting platform such as GitHub, GitLab,
    or Bitbucket combined with a CI/CD testing platform such as GitHub Actions, Jenkins,
    Docker, Kubernetes, or CircleCI to name a few.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用诸如GitHub、GitLab或Bitbucket之类的代码托管平台，并结合诸如GitHub Actions、Jenkins、Docker、Kubernetes或CircleCI之类的CI/CD测试平台是一种常见的做法。
- en: How do we debug a React application?
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何调试React应用程序？
- en: Debugging a React application might be difficult, but it is a necessary skill
    for any React developer. In this subsection, we’ll go over some fundamental strategies
    and tricks for properly debugging a React application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 调试React应用程序可能很困难，但对于任何React开发者来说，这是一项必要的技能。在本小节中，我们将介绍一些调试React应用程序的基本策略和技巧。
- en: How do we utilize the debugging tools inside our IDE/code editor?
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们如何利用IDE/代码编辑器内的调试工具？
- en: Popular code editors such as Visual Studio Code include debugging capabilities
    for JavaScript and React apps. You can debug your React application immediately
    within the editor by configuring a launch configuration, which allows you to create
    breakpoints, walk through code, and inspect variables.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如Visual Studio Code等流行的代码编辑器包括JavaScript和React应用程序的调试功能。您可以通过配置启动配置立即在编辑器中调试React应用程序，这允许您创建断点、逐步执行代码并检查变量。
- en: How do we set up breakpoints with DevTools?
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们如何使用DevTools设置断点？
- en: Debugging a React application begins with the use of breakpoints, which interrupt
    the execution of your code at a certain moment in time. You can set breakpoints,
    analyze variables, and go through your code line by line using the browser’s built-in
    developer tools. Use DevTools and browse the **Sources** tab to establish a breakpoint
    in your program. Locate the necessary file, scroll to the line where you wish
    to establish a breakpoint, and then click on the line number to do so.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 调试 React 应用程序始于使用断点，这会在特定时间点中断代码的执行。您可以使用浏览器内置的开发者工具设置断点、分析变量并逐行遍历代码。使用 DevTools
    并浏览 **源** 选项卡，在程序中设置断点。定位必要的文件，滚动到您希望设置断点的行，然后单击行号即可。
- en: If you reload the page once you’ve set a breakpoint, your code will halt at
    the breakpoint.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在设置断点后重新加载页面，代码将在断点处停止。
- en: How do we use logging to track application behavior?
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们如何使用日志记录跟踪应用程序行为？
- en: Another key tool for troubleshooting a React application is logging. You can
    use `console.log()` commands to output variable values, trace the flow of your
    code, and troubleshoot problems.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于故障排除 React 应用程序的关键工具是日志记录。您可以使用 `console.log()` 命令输出变量值、跟踪代码流程以及解决问题。
- en: Just put `console.log()` followed by the value you wish to log into your code
    to add a `console.log()` statement.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在代码中将 `console.log()` 后跟您希望记录的值，即可添加 `console.log()` 语句。
- en: How do we create error boundaries?
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们如何创建错误边界？
- en: Error boundaries are React components that can detect JavaScript problems anywhere
    in your component hierarchy, report them, and replace the crashed component with
    a fallback UI. You can prevent your application from crashing if an unhandled
    error in a single component is wrapped in an error border component.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 错误边界是 React 组件，可以在组件层次结构的任何位置检测 JavaScript 问题，报告它们，并用回退 UI 替换崩溃的组件。如果单个组件中的未处理错误被错误边界组件包裹，您可以防止应用程序崩溃。
- en: How do we understand JavaScript error codes?
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们如何理解 JavaScript 错误代码？
- en: 'React apps can experience a variety of issues, ranging from syntax mistakes
    to runtime faults. Knowing these issues and the error codes associated with them
    is critical for effective troubleshooting. For example, a typical problem that’s
    seen by React developers is `TypeError: Cannot read property ''propName'' of undefined`.
    When you try to access a property of an undefined object, this error occurs.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 'React 应用程序可能会遇到各种问题，从语法错误到运行时错误。了解这些问题及其相关的错误代码对于有效的故障排除至关重要。例如，React 开发者常见的一个典型问题是
    `TypeError: Cannot read property ''propName'' of undefined''`。当您尝试访问一个未定义对象的属性时，此错误会发生。'
- en: You can pinpoint the problem and repair it faster if you understand the error
    code and its associated problems.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您理解错误代码及其相关问题，您可以更快地定位问题并进行修复。
- en: How do we install a debugger extension?
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们如何安装调试器扩展？
- en: Browser debugger plugins can also assist you in debugging your React application.
    The React DevTools extension, for example, contains various tools that have been
    developed expressly for debugging React applications, such as the ability to explore
    the component hierarchy, check properties and states, and highlight the selected
    component in the browser. Similarly, we can use the Redux DevTools extension to
    debug our application’s state changes. Using Redux is more applicable when we
    are working with a more complex application that requires a global state.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器调试器插件也可以帮助您调试 React 应用程序。例如，React DevTools 扩展包含专为调试 React 应用程序开发的工具，例如探索组件层次结构、检查属性和状态以及突出显示浏览器中的选定组件。同样，我们可以使用
    Redux DevTools 扩展来调试应用程序的状态变化。使用 Redux 更适用于我们正在处理更复杂的应用程序，该应用程序需要全局状态。
- en: How do we use the ESLint plugin for React?
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们如何使用 React 的 ESLint 插件？
- en: ESLint is a popular JavaScript linting tool that can help you find and correct
    syntax problems, possible bugs, and code quality concerns. The ESLint plugin for
    React adds extra linting rules tailored to React applications, assisting you in
    detecting frequent mistakes and best practice violations.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint 是一个流行的 JavaScript 代码检查工具，可以帮助您找到并纠正语法错误、可能的错误和代码质量问题。React 的 ESLint 插件添加了针对
    React 应用程序定制的额外代码检查规则，帮助您检测常见错误和最佳实践违规。
- en: What are error monitoring tools?
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误监控工具是什么？
- en: Tools for tracking, identifying, and reporting mistakes and anomalies that arise
    in applications throughout development, testing, or deployment are known as error
    monitoring tools. These tools assist programmers in locating problems, determining
    their root causes, and promptly resolving them. For developers to achieve better
    software, error monitoring systems frequently include capabilities such as real-time
    error tracking, alerts, and thorough error reporting.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为错误监控工具的是用于跟踪、识别和报告在开发、测试或部署过程中在应用程序中出现的错误和异常的工具。这些工具帮助程序员定位问题、确定其根本原因并迅速解决它们。为了开发者能够开发出更好的软件，错误监控系统通常包括实时错误跟踪、警报和详尽的错误报告等功能。
- en: There are quite a lot of error monitoring tools available, and some stand-out
    ones include LogRocket, Sentry, and Rollbar.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的错误监控工具相当多，其中一些突出的包括LogRocket、Sentry和Rollbar。
- en: We have reached the end of this section and also this chapter. Our knowledge
    of testing and debugging will be crucial at interviews because this is an area
    that many companies expect developers to be good in.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了本节和本章的结尾。我们对测试和调试的了解在面试中将是至关重要的，因为这是许多公司期望开发者擅长的领域。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has offered a thorough understanding of the critical parts of testing
    and debugging React applications. We began by discussing the significance of testing
    in software development and the necessity for a strong testing environment geared
    toward React apps. Next, we looked at various testing frameworks and libraries,
    highlighting their unique characteristics as well as the criteria to consider
    when choosing the best tools. Learning about the importance of setups and teardowns
    was also covered.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为我们提供了对测试和调试React应用程序关键部分的深入理解。我们首先讨论了测试在软件开发中的重要性以及针对React应用程序的强大测试环境的必要性。接下来，我们探讨了各种测试框架和库，突出了它们的独特特性以及选择最佳工具时需要考虑的标准。我们还讨论了设置和清理的重要性。
- en: We covered building tests for components, props, and events throughout this
    chapter, highlighting the need to create extensive test suites to ensure the dependability
    and maintainability of our React applications. To take the testing process even
    further, we talked about mocking data for tests, which allows us to simulate real-world
    scenarios without relying on external dependencies. Understanding events and times
    when doing testing was another hot topic we talked about.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中涵盖了为组件、属性和事件构建测试的内容，强调了创建广泛的测试套件以确保我们的React应用程序的可靠性和可维护性的必要性。为了将测试过程进一步深化，我们讨论了为测试模拟数据，这使我们能够在不依赖外部依赖的情况下模拟真实世界场景。在测试过程中理解事件和时间也是我们讨论的另一个热点话题。
- en: We also introduced React DevTools, which assists developers in evaluating and
    understanding the internal structure and behavior of their apps throughout the
    testing phase, as well as CI/CD pipelines. Another important topic we discussed
    in this chapter was debugging React apps and using error monitoring tools. Understanding
    the art of testing and debugging is critical for React developers looking to build
    high-quality, long-lasting applications because these skills will make us better
    developers. Being capable of solving problems is a quality that is highly sought
    after in the world of programming.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了React DevTools，它帮助开发者评估和理解在测试阶段以及CI/CD管道中他们的应用程序的内部结构和行为。本章我们还讨论了调试React应用程序和使用错误监控工具。对于希望构建高质量、持久应用程序的React开发者来说，理解测试和调试的艺术是至关重要的，因为这些技能将使我们成为更好的开发者。在编程世界中，能够解决问题是一种非常受欢迎的品质。
- en: In the next chapter, we will get the chance to learn about some of the most
    modern React.js build tools available. Next.js, Gatsby and Remix are three popular
    choices for React.js development so let’s expand our knowledge further and get
    a grasp on these amazing libraries
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将有机会了解一些最现代的React.js构建工具。Next.js、Gatsby和Remix是React.js开发的三个流行选择，因此让我们进一步扩展我们的知识并掌握这些令人惊叹的库。
