- en: Chapter 8. Implementing Responsive Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。实现响应式表单
- en: Coding with HTML5 has dramatically changed the landscape within frontend web
    development. There are more opportunities to build better forms by using the appropriate
    field type and native validation, which is the best scenario for SEO. All of these
    features are gradually being adopted in all modern web browsers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML5 编码在前端网页开发中的景观发生了巨大变化。通过使用适当的字段类型和本地验证，构建更好的表单的机会更多了，这是 SEO 的最佳情况。所有这些功能正在逐步被所有现代网络浏览器采用。
- en: With the use of jQuery, we can enhance the HTML5 experience on our pages, with
    the addition of complementary features to improve user experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 jQuery，我们可以增强页面上的 HTML5 体验，增加补充功能以改善用户体验。
- en: 'In this chapter we will learn about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Types and attributes of form inputs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单输入的类型和属性
- en: The `autocomplete` feature
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autocomplete` 特性'
- en: The `datepicker` feature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datepicker` 特性'
- en: The `tooltips` feature
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tooltips` 特性'
- en: Responsive frameworks with IdealForms
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 IdealForms 的响应式框架
- en: Types and attributes of form inputs
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单输入的类型和属性
- en: 'The use of HTML5 input types brought two main advantages of developing to the
    front: reduction of development time and improvement of user experience. Many
    modern browsers have already adopted these new input types and attributes and
    the entire web community is benefited from it, facilitating the spread of its
    usage.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML5 输入类型带来了开发的两个主要优势：减少开发时间和改善用户体验。许多现代浏览器已经采用了这些新的输入类型和属性，整个网络社区都受益于此，促进了其使用的传播。
- en: The most frequently used HTML5 input types are `email`, `date`, `tel`, `number`,
    and `time`. Also, the most common attributes that come with HTML5 are `placeholder`,
    `required`, `autocomplete`, and `multiple`. We will see in [Chapter 10](ch10.html
    "Chapter 10. Ensuring Browser Support"), *Ensuring Browser Support*, that not
    all web browsers support HTML5 features the same way and require jQuery intervention
    to provide the proper support.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的 HTML5 输入类型包括`email`、`date`、`tel`、`number`和`time`。此外，HTML5 自带的最常见属性包括`placeholder`、`required`、`autocomplete`和`multiple`。我们将在[第
    10 章](ch10.html "第 10 章。确保浏览器支持")中看到，*确保浏览器支持*，并不是所有的网络浏览器都以相同的方式支持 HTML5 特性，并且需要
    jQuery 的干预来提供适当的支持。
- en: 'However, it still depends on jQuery technology to display features such as
    `autocomplete` and other more complex validation. Normally, jQuery plugins work
    really well with the new HTML5 input types, being almost mandatory for responsive
    websites. Before starting the implementation of the feature, let''s create a basic
    form; this is the first step and will be used in further examples. Create an empty
    HTML site structure with basic tags and then keep the jQuery included, which will
    be used soon:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，它仍然依赖于 jQuery 技术来显示诸如`autocomplete`等更复杂的验证。通常情况下，jQuery 插件与新的 HTML5 输入类型非常配合，几乎对响应式网站来说是必不可少的。在开始实现功能之前，让我们创建一个基本的表单；这是第一步，将在后续示例中使用。创建一个带有基本标签的空
    HTML 站点结构，然后保留 jQuery 包含，很快就会用到它：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For the sake of progressive learning, each feature will be presented independently;
    only the previous basic code will be reused.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了逐步学习，每个特性都将独立呈现；只有之前的基本代码将被重复使用。
- en: These plugins we will see are not a replacement for server-side validation;
    they only make the user experience better, reduce the server requests, and give
    a better interactive interface.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到的这些插件并不是服务器端验证的替代品；它们只会让用户体验更好，减少服务器请求，并提供更好的交互界面。
- en: The autocomplete feature with Magicsuggest
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有 Magicsuggest 的自动完成特性
- en: Magicsuggest is a flexible autosuggest combobox that gives suggestions whenever
    the user starts typing in the field. Using this feature will reduce the necessity
    of typing, mainly on mobile devices, where the typing in of each letter is cumbersome.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Magicsuggest 是一个灵活的自动建议下拉框，在用户开始在字段中输入时提供建议。使用这个特性将减少打字的必要性，特别是在移动设备上，每输入一个字母都很麻烦。
- en: By default, Magicsuggest has some good features, such as holding the *Ctrl*
    key to select multiple items and allowing the user to add a new input using the
    *Enter* key after having entered the text.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Magicsuggest 具有一些很好的功能，例如按住 *Ctrl* 键选择多个项目，并在输入文本后使用 *Enter* 键添加新输入。
- en: 'The JSON data source is used to populate the combobox. There are some options
    available here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 数据源用于填充下拉框。这里有一些可用的选项：
- en: '**No data source**: When left as `null`, the combobox will not suggest anything.
    It can still enable the user to enter multiple entries if the allowed FreeEntries
    are set to `true` (default).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有数据源**：当设置为`null`时，下拉框将不会提供任何建议。如果允许`FreeEntries`设置为`true`（默认值），它仍然可以使用户输入多个条目。'
- en: '**Static source**: It uses an array of JSON objects, an array of strings, or
    even a single CSV string as the data source.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态源**：它使用JSON对象数组、字符串数组甚至单个CSV字符串作为数据源。'
- en: '**URL**: We can pass the URL from which the component will fetch its JSON data.
    The data will be fetched using a `POST` AJAX request that will include the entered
    text as a query parameter.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**：我们可以传递组件将获取其JSON数据的URL。数据将使用`POST` AJAX请求获取，该请求将输入的文本作为查询参数。'
- en: '**Function**: We can set a function to return an array of JSON objects. Only
    one callback function or return value is needed for the function to succeed.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：我们可以设置一个返回JSON对象数组的函数。函数只需要一个回调函数或返回值就可以成功。'
- en: How to implement it
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现它
- en: 'Let''s start by downloading the files from [http://nicolasbize.github.io/magicsuggest/](http://nicolasbize.github.io/magicsuggest/).
    After downloading, we will include the JavaScript and CSS files inside the `<head>`
    tag from the already created basic code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[http://nicolasbize.github.io/magicsuggest/](http://nicolasbize.github.io/magicsuggest/)下载文件。下载后，我们将在已创建的基本代码内的`<head>`标签中包含JavaScript和CSS文件：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, insert the following piece of code to create the JSON data with
    these cities and then execute the Magicsuggest script, giving some options along
    with it if necessary:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，插入以下代码片段来创建具有这些城市的JSON数据，然后执行Magicsuggest脚本，如果必要的话，同时给予一些选项：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The next step is to add the `city` field inside the `<body>` tag.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在`<body>`标签内添加`city`字段。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As seen in the following screenshot, when the select field is clicked on, we
    will see the suggestion feature appear instantly:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，当点击选择字段时，我们将立即看到建议功能的出现：
- en: '![How to implement it](img/3602OS_08_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现它](img/3602OS_08_01.jpg)'
- en: 'In the previous example, we implemented only the basic usage. However, this
    plugin has other interesting implementations that may fit your needs in the future,
    such as:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们只实现了基本用法。然而，此插件还有其他有趣的实现方式，可能会在未来符合您的需求，例如：
- en: Tag selection on the right
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧标签选择
- en: Gmail-style combo
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gmail风格组合
- en: Column-filter combo
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列过滤器组合
- en: Custom template combobox using images
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图像的自定义模板下拉框
- en: The date and time pickers feature
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期和时间选择器功能
- en: Mobile users already have an interface for entering dates and time, which they
    are very familiar with. However, we will learn about a jQuery plugin that may
    help in keeping the website's identity by displaying to the user the same features
    on all devices.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 移动用户已经有一个非常熟悉的日期和时间输入界面。然而，我们将学习一个jQuery插件，它可能有助于通过在所有设备上显示相同的功能来保持网站的身份。
- en: Pickadate – responsive date/time picker
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pickadate – 响应式日期/时间选择器
- en: Pickadate is a responsive jQuery plugin that is quite interesting as well as
    mobile friendly, responsive, and lightweight. It is possible to provide a custom
    interface regardless of the browser or device.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Pickadate是一个响应式的jQuery插件，非常有趣，同时也适用于移动设备，并且轻量级。无论是什么浏览器或设备，都可以提供自定义界面。
- en: This is a good way to facilitate the insertion of the correct date when filling
    in a form because it avoids typing errors and gives better guidance to the user,
    showing the full calendar of the month.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种在填写表单时方便插入正确日期的好方法，因为它可以避免打字错误，并向用户提供更好的指导，显示月份的完整日历。
- en: How to do it
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 怎么做
- en: 'After downloading the files from [http://amsul.ca/pickadate.js/](http://amsul.ca/pickadate.js/),
    we will start by including JavaScript and CSS files inside the `<head>` tag from
    the already created basic code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://amsul.ca/pickadate.js/](http://amsul.ca/pickadate.js/)下载文件后，我们将从已创建的基本代码内的`<head>`标签中开始包含JavaScript和CSS文件：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you need to support old browsers, the inclusion of the `legacy.js` file is
    recommended.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要支持旧浏览器，建议包含`legacy.js`文件。
- en: After that, we need to execute the scripts for `datepicker` and `timepicker`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要执行`datepicker`和`timepicker`的脚本。
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The next step is to insert a field for date and another one for time inside
    the `<body>` tag. The plugin requires the class names to be highlighted.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在`<body>`标签内插入一个日期字段和另一个时间字段。插件要求类名需要被突出显示。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is a screenshot of the `datepicker` plugin being activated on
    a Smartphone and a tablet:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在智能手机和平板电脑上激活`datepicker`插件的屏幕截图：
- en: '![How to do it](img/3602OS_08_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法](img/3602OS_08_02.jpg)'
- en: 'The following is the screenshot from when the user touches on the `time` field:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用户点击`时间`字段时的屏幕截图：
- en: '![How to do it](img/3602OS_08_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法](img/3602OS_08_03.jpg)'
- en: 'The `pickadate` plugin is very complete, providing its extension to add support
    for:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`pickadate`插件非常完善，提供了其扩展以添加对以下支持：'
- en: Translations (including right-to-left languages)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译（包括从右到左的语言）
- en: Different formats
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的格式
- en: Date/time limits
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期/时间限制
- en: You will find further information about these extensions at [http://amsul.ca/pickadate.js/date.htm#options](http://amsul.ca/pickadate.js/date.htm#options).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://amsul.ca/pickadate.js/date.htm#options](http://amsul.ca/pickadate.js/date.htm#options)找到关于这些扩展的更多信息。
- en: The tooltip feature
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具提示功能
- en: '`tooltip` is a useful way to present additional, context-sensitive information
    about an element on a web page, and it is normally found in between a label and
    an input field. Its job is to provide more information about a particular field.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`tooltip`是在网页上元素的标签和输入字段之间常见的一种方式，用于呈现有关元素的附加上下文信息。其作用是提供有关特定字段的更多信息。'
- en: As tooltips continue to become more common as a means for the users to interact
    with the web page elements, the necessity for a good tooltip design and interaction
    has become more important.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 随着工具提示作为用户与网页元素交互的一种常见方式，设计和交互良好的工具提示变得更加重要。
- en: Normally, the tooltip can be displayed by putting the pointer of mouse over
    the element and the message will be displayed. Since most mobile devices do not
    have a pointer, this issue must be handled by plugins displaying the tooltip on
    touch.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，将鼠标指针放在元素上即可显示工具提示，并显示消息。由于大多数移动设备没有指针，因此必须通过显示触摸时的工具提示的插件来处理此问题。
- en: Tooltipster – modern tooltip feature
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tooltipster - 现代工具提示功能
- en: Tooltipster is a powerful and flexible jQuery plugin that enables you to easily
    create semantic and modern tooltips.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Tooltipster是一个强大而灵活的jQuery插件，可让您轻松创建语义化和现代化的工具提示。
- en: How to do it
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'We will start by downloading the tooltipster files from [http://calebjacob.com/tooltipster/](http://calebjacob.com/tooltipster/)
    and including the JavaScript and CSS files inside the `<head>` tag from the already
    created basic code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从[http://calebjacob.com/tooltipster/](http://calebjacob.com/tooltipster/)下载tooltipster文件，并将JavaScript和CSS文件包含在已创建的基本代码的`<head>`标签中：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To activate the plugin, we will add the `tooltipster` library and configure
    it to execute for all elements that have the `.tooltip` class (in this example,
    there is only one instance, but you may use more than one in your page):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活插件，我们将添加`tooltipster`库并将其配置为对具有`.tooltip`类的所有元素执行（在本例中，只有一个实例，但您可以在页面中使用多个）：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After that, we will add a question mark image and define the `tooltip` class
    on each element where we want to display the tooltip on:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将添加一个问号图像，并在我们想要在其上显示工具提示的每个元素上定义`tooltip`类：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is a screenshot of the plugin after clicking/touching the element:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是点击/触摸元素后插件的屏幕截图：
- en: '![How to do it](img/3602OS_08_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法](img/3602OS_08_04.jpg)'
- en: We can also modify the default plugin theme by editing the `tooltipster.css`
    file or override the existing theme by specifying the class in the `script` call.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过编辑`tooltipster.css`文件来修改默认插件主题，或者通过在`script`调用中指定类来覆盖现有主题。
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Responsive form using IdealForms
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IdealForms创建响应式表单
- en: IdealForms, available at [https://github.com/elclanrs/jq-idealforms](https://github.com/elclanrs/jq-idealforms),
    is a framework used to build and validate responsive HTML5 forms. Also, it has
    keyboard support, fast validation as soon as the user moves to the next field,
    and placeholder support for most of the browsers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: IdealForms，位于[https://github.com/elclanrs/jq-idealforms](https://github.com/elclanrs/jq-idealforms)，是一个用于构建和验证响应式HTML5表单的框架。此外，它具有键盘支持，在用户转到下一个字段时快速验证，并为大多数浏览器提供占位符支持。
- en: The IdealForms framework also has a pagination option that helps a lot to improve
    the user experience when filling extensive forms. Let's understand its usage by
    practicing it step by step.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: IdealForms框架还具有分页选项，可在填写大型表单时大大改善用户体验。让我们逐步练习以了解其用法。
- en: How to implement it
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现它
- en: Create a new HTML file and copy the basic code that we already wrote in the
    beginning of the chapter. Then, we will include the CSS stylesheet inside the
    `<head>` tag.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 HTML 文件，并复制我们在本章开头已经编写的基本代码。然后，我们将在 `<head>` 标签中包含 CSS 样式表。
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s insert the following sample code into the HTML structure whose interface
    was divided into two tabs using the `<section>` tag:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将以下示例代码插入 HTML 结构中，其界面使用 `<section>` 标签分为两个标签页：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the first tab, we will add the `username`, `password`, and `email` fields:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个标签页中，我们将添加`用户名`、`密码`和`电子邮件`字段：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the second tab, we will add the `file`, `languages`, and `phone` fields.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个标签页中，我们将添加`文件`、`语言`和`电话`字段。
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, we will add a `submit` button.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个`提交`按钮。
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: At the bottom of DOM (before the `</body>` closing tag), we will need to include
    the `jquery` and `idealforms` libraries.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DOM 底部（在 `</body>` 结束标记之前），我们需要包含 `jquery` 和 `idealforms` 库。
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After that, insert the following code, which will execute the script that starts
    creating a function that alerts the user when they fill in an incorrect value.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，插入以下代码，这将执行开始创建一个函数的脚本，该函数在用户填写不正确值时会弹出警告。
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here we will set which form element will be inspected by validation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将设置哪个表单元素将被验证。
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After finishing the validation, we will execute the `idealforms` JavaScript,
    loading all of the validations set before.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 完成验证后，我们将执行`idealforms` JavaScript，加载之前设置的所有验证。
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's it! The client-side validation is already implemented.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！客户端验证已经实现。
- en: 'The following is a screenshot of the framework in action when viewed on Smartphone
    devices:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在智能手机设备上查看时该框架运行情况的截图：
- en: '![How to implement it](img/3602OS_08_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现](img/3602OS_08_06.jpg)'
- en: The same page may be viewed on a desktop and the default layout adapts very
    well.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 同一页面可能在桌面上查看，并且默认布局非常适配。
- en: '![How to implement it](img/3602OS_08_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现](img/3602OS_08_07.jpg)'
- en: Exercise 8 – creating a contact form using the IdealForms framework
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 8 – 使用 IdealForms 框架创建联系表单
- en: Let's create a responsive contact form for the project based on the complete
    step-by-step example seen previously and using the IdealForms framework as a base
    for this form.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于先前完整的逐步示例并使用 IdealForms 框架作为此表单基础来创建一个响应式联系表单项目。
- en: 'So, as we did before, let''s start including the CSS file and the following
    fields: **Name**, **Email**, **Ideal first class** (date), and **Phone** as the
    following screenshot shows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，和以往一样，让我们开始包括 CSS 文件和以下字段：**姓名**、**电子邮件**、**理想的第一课**（日期），以及如下截图所示的**电话**：
- en: '![Exercise 8 – creating a contact form using the IdealForms framework](img/3602OS_08_08.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![练习 8 – 使用 IdealForms 框架创建联系表单](img/3602OS_08_08.jpg)'
- en: The date field was not mentioned on IdealForms because, by default, it comes
    with the jQueryUI solution. However, I would recommend to use the Pickadate plugin
    because it is more lightweight if compared to jQueryUI and it also helps reinforcing
    the example we have learned before.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 日期字段未在 IdealForms 中提及，因为默认情况下，它使用 jQueryUI 解决方案。然而，我建议使用 Pickadate 插件，因为与 jQueryUI
    相比，它更轻量级，并且还有助于强化我们之前学到的示例。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to work well with HTML5 form elements by complementing
    the code with some jQuery plugins such as Magicsuggest for `autocomplete`, Pickadate
    for `datepicker`, and Tooltipster for `tooltips` when necessary. In addition,
    we have experienced how to work with IdealForms, a responsive form framework,
    by building a contact form interface.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过使用一些 jQuery 插件来完善代码与 HTML5 表单元素很好地配合，例如`autocomplete`的 Magicsuggest，`datepicker`的
    Pickadate，以及在必要时的`tooltips`的 Tooltipster。此外，我们还体验了如何使用 IdealForms，一个响应式表单框架，来构建联系表单界面。
- en: In the next chapter, we will focus on testing the website by using tools and
    scripts to ensure its responsivity on all devices. Understanding the next chapter
    thoroughly is important to check for possible errors on our implementation for
    old browsers or mobile devices and fix them further. Also, the testing phase is
    important to avoid future surprises reported by our clients.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用工具和脚本来测试网站，以确保其在所有设备上的响应性。彻底理解下一章对于检查我们在旧浏览器或移动设备上实现可能出现的错误并进一步修复它们至关重要。此外，测试阶段对于避免客户报告的未来意外非常重要。
