["```js\n$ cd <your directory>\\friends\\src\\app\n$ ng g module authentication --routing`\n```", "```js\nimport {NgModule} from '@angular/core';\nimport {AppComponent} from './app.component';\nimport {FormsModule} from '@angular/forms';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AuthenticationModule} from './authentication/authentication.module';\nimport {AngularFireModule} from 'angularfire2';\nimport {environment} from './environments/environment';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {AngularFireAuth} from 'angularfire2/auth';\nimport {AngularFireDatabase} from 'angularfire2/database';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    FormsModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    BrowserAnimationsModule,\n    RouterModule.forRoot([]),\n    AuthenticationModule\n  ],\n  providers: [\n    AngularFireAuth,\n    AngularFireDatabase,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```", "```js\n<router-outlet></router-outlet>\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {AngularFireAuth} from 'angularfire2/auth';\n\n/**\n * Authentication service\n *\n */\n@Injectable()\nexport class AuthenticationService {\n\n  /**\n   * Constructor\n   *\n   * @param {AngularFireAuth} angularFireAuth provides the \n     functionality related to authentication\n   */\n  constructor(private angularFireAuth: AngularFireAuth) {\n  }\n\n  public signup(email: string, password: string): Promise<any> {\n    return \n    this.angularFireAuth.auth.createUserWithEmailAndPassword(email, \n    password);\n  }\n}\n```", "```js\nproviders tag to include the AuthenticationService.\n```", "```js\n@NgModule({\n    imports: [\n       ...    \n    ],\n    declarations: [\n        ...\n    ],\n    providers: [\n        AuthenticationService\n    ]\n})\n...\n```", "```js\nconstructor(private authService:  AuthenticationService) {}\n```", "```js\nconstructor(private fireDb: AngularFireDatabase) {}\n```", "```js\npublic addUser(user: User): void {\n    this.fireDb.object(`${USERS_CHILD}/${user.uid}`).set(user);\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {AngularFireDatabase} from 'angularfire2/database';\nimport {User} from './user';\nimport 'firebase/storage';\nimport {USERS_CHILD} from './database-constants';\n\n/**\n * User service\n *\n */\n@Injectable()\nexport class UserService {\n\n  /**\n   * Constructor\n   *\n   * @param {AngularFireDatabase} fireDb provides the functionality for \n     Firebase Database\n   */\n  constructor(private fireDb: AngularFireDatabase) {\n  }\n\n  public addUser(user: User): void {\n    this.fireDb.object(`${USERS_CHILD}/${user.uid}`).set(user);\n  }\n}\n```", "```js\n@NgModule({\n    imports: [\n       ...    \n    ],\n    declarations: [\n        ...\n    ],\n    providers: [\n        AuthenticationService,\n        UserService\n    ]\n})\n```", "```js\nexport class User {\n\n   email: string;\n\n   name: string;\n\n   mobile: string;\n\n   uid: string;\n\n   friendcount: number;\n\n   image: string;\n}\n```", "```js\n<form name=\"form\" (ngSubmit)=\"onSignup(signupFormData)\" #signupFormData='ngForm'></form>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=UTF-8>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <script src=\"img/tether.min.js\"></script>\n  <link rel=\"stylesheet\" \n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/\n  css/bootstrap.min.css\">\n  <script src=\"img/\n  jquery.min.js\"></script>\n  <script src=\"img/\n  js/bootstrap.min.js\"></script>\n  <title>Friends - A Social App</title>\n  <base href=\"/\">\n</head>\n<body>\n<app-friends>\n  Loading...\n</app-friends>\n</body>\n</html>\n```", "```js\n<div class=\"col-md-6 col-md-offset-3\"></div>\n```", "```js\n<div class=\"alert alert-danger\"></div>\n```", "```js\n<div class=\"col-md-6 col-md-offset-3\">\n    <h2>Signup</h2>\n <app-error-alert *ngIf=\"showError\" [errorMessage]=\"errorMessage\">  \n </app-error-alert>\n    <form name=\"form\" (ngSubmit)=\"onSignup(signupFormData)\" \n     #signupFormData='ngForm'>\n        <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input type=\"text\" class=\"form-control\" name=\"name\" \n             (ngModel)=\"name\" #name=\"ngModel\" required id=\"name\"/>\n            <div [hidden]=\"name.valid || name.pristine\"\n                 class=\"alert alert-danger\">\n                Name is required\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input type=\"text\" class=\"form-control\" name=\"email\" \n             (ngModel)=\"email\" #email=\"ngModel\"\n                   required\n                   pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*\n                   (\\.\\w{2,3})+$\"\n                   id=\"email\"/>\n            <div [hidden]=\"email.valid || email.pristine\"\n                 class=\"alert alert-danger\">\n                <div [hidden]=\"!email.hasError('required')\">Email is \n                 required</div>\n                <div [hidden]=\"!email.hasError('pattern')\">Email format \n                 should be\n                    <small><b>codingchum@gmail.com</b></small>\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" class=\"form-control\" name=\"password\" \n            (ngModel)=\"password\" #password=\"ngModel\" required \n             id=\"password\"/>\n            <div [hidden]=\"password.valid || password.pristine\"\n                 class=\"alert alert-danger\">\n                Password is required\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"name\">Retype Password</label>\n            <input type=\"password\" class=\"form-control\" \n             id=\"confirmPassword\"\n                   required\n                   passwordEqual=\"password\"\n                   (ngModel)=\"confirmPassword\" name=\"confirmPassword\"\n                   #confirmPassword=\"ngModel\">\n            <div [hidden]=\"confirmPassword.valid || \n            confirmPassword.pristine\"\n                 class=\"alert alert-danger\">\n                Passwords did not match\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"mobile\">Mobile</label>\n            <input type=\"text\" class=\"form-control\" name=\"mobile\" \n             (ngModel)=\"mobile\" #mobile=\"ngModel\"\n                   required\n                   pattern=\"[0-9]*\"\n                   minlength=\"10\"\n                   maxlength=\"10\"\n                   id=\"mobile\"/>\n            <div [hidden]=\"mobile.valid || mobile.pristine\"\n                 class=\"alert alert-danger\">\n                <div [hidden]=\"!mobile.hasError('minlength')\">Mobile \n                 should be 10 digit</div>\n                <div [hidden]=\"!mobile.hasError('required')\">Mobile is \n                 required</div>\n                <div [hidden]=\"!mobile.hasError('pattern')\">Mobile  \n                 number should be only numbers</div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-success\" \n            [disabled]=\"!signupFormData.form.valid\">SIGNUP</button>\n            <a [routerLink]=\"['/app-friends-login']\" class=\"btn btn-\n            link\">CANCEL</a>\n        </div>\n    </form>\n</div>\n```", "```js\n<div class=\"form-group\">\n    <label for=\"mobile\">Mobile</label>\n    <input type=\"text\" class=\"form-control\" name=\"mobile\" \n     [(ngModel)]=\"model.mobile\" #mobile=\"ngModel\"\n           required\n           pattern=\"[0-9]*\"\n           minlength=\"10\"\n           maxlength=\"10\"\n           id=\"mobile\"/>\n    <div [hidden]=\"mobile.valid || mobile.pristine\"\n         class=\"alert alert-danger\">\n        <div [hidden]=\"!mobile.hasError('minlength')\">Mobile should be \n         10 digit</div>\n        <div [hidden]=\"!mobile.hasError('required')\">Mobile is \n         required</div>\n        <div [hidden]=\"!mobile.hasError('pattern')\">Mobile number \n         should be only numbers</div>\n    </div>\n</div>\n```", "```js\nimport {Directive, forwardRef, Attribute} from '@angular/core';\nimport {Validator, AbstractControl, NG_VALIDATORS} from '@angular/forms';\n\n@Directive({\n    selector: '[passwordEqual][formControlName],[passwordEqual]\n    [formControl],[passwordEqual][ngModel]',\n    providers: [\n        {provide: NG_VALIDATORS, useExisting: forwardRef(() => \n         PasswordEqualValidator), multi: true}\n    ]\n})\nexport class PasswordEqualValidator implements Validator {\n    constructor(@Attribute('passwordEqual') public passwordEqual: \n    string) {\n    }\n\n    validate(control: AbstractControl): { [key: string]: any } {\n        let retypePassword = control.value;\n\n        let originalPassword = control.root.get(this.passwordEqual);\n\n        // original & retype password is egual\n        return (originalPassword && retypePassword !== \n        originalPassword.value)\n            ? {passwordEqual: false} : null;\n    }\n}\n```", "```js\n@NgModule({\n    imports: [\n       ...    \n    ],\n    declarations: [\n        PasswordEqualValidator\n    ],\n    providers: [\n        ...\n    ]\n})\n...\n```", "```js\n<input type=\"password\" class=\"form-control\" id=\"confirmPassword\"\n       required\n       passwordEqual=\"password\"\n       [(ngModel)]=\"model.confirmPassword\" name=\"confirmPassword\"\n       #confirmPassword=\"ngModel\">\n```", "```js\nonSignup(signupFormData): void {   this.authService.signup(signupFormData.value.email, signupFormData.value.password).then((userInfo) => {\n        ...\n    }).catch((error) => {\n        this.showError = true;\n        this.errorMessage = error.message;\n    });\n}\n```", "```js\nimport {Component, Input} from '@angular/core';\n\n@Component({\n   selector: 'app-error-alert',\n   templateUrl: './error-alert.component.html',\n   styleUrls: ['./error-alert.component.scss']\n})\nexport class ErrorAlertComponent {\n\n   @Input() errorMessage: any;\n\n}\n```", "```js\n<div class=\"error-alert-container\">\n   <div class=\"alert alert-danger fade show\" role=\"alert\">\n      {{errorMessage}}\n   </div>\n</div>\n```", "```js\n.error-alert-container {\n    margin-top: 24px;\n    margin-bottom: 8px;\n}\n```", "```js\n<div class=\"col-md-6 col-md-offset-3\">\n    <h2>Signup</h2>\n   <app-error-alert *ngIf=\"showError\" [errorMessage]=\"errorMessage\">  \n   </app-error-alert>\n ...\n</div>\n```", "```js\nexport class SignupComponent {\n\n   errorMessage: string;\n\n   showError: boolean;\n\n   onSignup(signupFormData): void {    \n   this.authService.signup(signupFormData.value.email, \n   signupFormData.value.password).then((userInfo) => {\n         // Register the new user\n         ...\n      }).catch((error) => {\n         this.showError = true;\n         this.errorMessage = error.message;\n      });\n   }\n}\n```", "```js\nconstructor(private authService: AuthenticationService, private userService: UserService) {\n}\n```", "```js\nonSignup(signupFormData): void {\n   this.authService.signup(signupFormData.value.email, \n   signupFormData.value.password).then((userInfo) => {\n      // Register the new user\n      const user: User = new User(signupFormData.value.email,\n         signupFormData.value.name, signupFormData.value.mobile, \n         userInfo.uid, 0, '');\n      this.writeNewUser(user);\n   }).catch((error) => {\n      this.showError = true;\n      this.errorMessage = error.message;\n   });\n}\n\nprivate writeNewUser(user: User): void {\n   this.userService.addUser(user);\n}\n```", "```js\nimport {Component} from '@angular/core';\nimport {User} from '../../services/user';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {UserService} from '../../services/user.service';\n\n@Component({\n   selector: 'app-friends-signup',\n   styleUrls: ['signup.component.scss'],\n   templateUrl: 'signup.component.html'\n})\nexport class SignupComponent {\n\n   errorMessage: string;\n\n   showError: boolean;\n\n   constructor(private authService: AuthenticationService,\n            private userService: UserService) {\n   }\n\n   onSignup(signupFormData): void {\n      this.authService.signup(signupFormData.value.email, \n      signupFormData.value.password).then((userInfo) => {\n         // Register the new user\n         const user: User = new User(signupFormData.value.email,\n            signupFormData.value.name, signupFormData.value.mobile, \n            userInfo.uid, 0, '');\n         this.writeNewUser(user);\n      }).catch((error) => {\n         this.showError = true;\n         this.errorMessage = error.message;\n      });\n   }\n\n   private writeNewUser(user: User): void {\n      this.userService.addUser(user);\n   }\n```", "```js\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {SignupComponent} from './signup/signup.component';\n\nexport const ROUTES: Routes = [\n  {path: 'app-friends-signup', component: SignupComponent}\n];\n\n/**\n * Authentication Routing Module\n */\n@NgModule({\n  imports: [RouterModule.forChild(ROUTES)],\n  exports: [RouterModule]\n})\nexport class AuthenticationRouting {\n}\n```"]