["```js\n{'iss': 'PublishginAppIssuer','name': 'John Doe','admin':true}\n\n```", "```js\n{ \n'typ': 'JWT', \n'alg': 'HS256' \n}\n\n```", "```js\n{ \n'iss': 'http://theIssuerAddress', \n'exp': '1450819372', \n'aud': 'http://myAppAddress', \n'sub': 'publishingApp', \n'scope': ['read'] \n}\n\n```", "```js\n$ [[you are in the root directory of your project]]\n$ touch initPubUsers.js\n\n```", "```js\n[ \n  { \n'username' : 'admin', \n'password' : 'c5a0df4e293953d6048e78bd9849ec0ddce811f0b29f72564714e474615a7852', \n'firstName' : 'Kamil', \n'lastName' : 'Przeorski', \n'email' : 'kamil@mobilewebpro.pl', \n'role' : 'admin', \n'verified' : false, \n'imageUrl' : 'http://lorempixel.com/100/100/people/' \n  } \n]\n\n```", "```js\nmongoimport --db local --collection pubUsers --jsonArrayinitPubUsers.js --host=127.0.0.1\n\n```", "```js\n2009-04-03T11:36:00.566+0200  connected to: 127.0.0.1\n2009-04-03T11:36:00.569+0200  imported 1 document\n\n```", "```js\n$ cd server\n$ touch configSecret.js\n\n```", "```js\nexport default { \n'secret': process.env.JWT_SECRET || 'devSecretGoesHere' \n}\n\n```", "```js\n$ cd server\n\n```", "```js\napp.use(bodyParser.urlencoded({extended: false}));\n\n```", "```js\nimport http from 'http'; \nimport express from 'express'; \nimport cors from 'cors'; \nimport bodyParser from 'body-parser'; \nimport mongoose from 'mongoose'; \nimport falcor from 'falcor'; \nimport falcorExpress from 'falcor-express'; \nimport Router from 'falcor-router'; \nimport routes from './routes.js'; \n\nvar app = express(); \napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \napp.use(cors()); \n\n// This is required by falcor-express middleware to work correctly with falcor-browser \napp.use(bodyParser.json({extended: false})); \napp.use(bodyParser.urlencoded({extended: false})); \n\n```", "```js\n$ touch routesSession.js \n\n```", "```js\nexport default [ \n  {  \n    route: ['login'] , \n    call: (callPath, args) => \n      { \n      const { username, password } = args[0]; \n\n      const userStatementQuery = { \n          $and: [ \n              { 'username': username }, \n              { 'password': password } \n          ] \n        } \n      } \n  } \n];\n\n```", "```js\nconst { username, password } = args[0];\n\n```", "```js\nconst userStatementQuery = { \n  $and: [ \n      { 'username': username }, \n      { 'password': password } \n  ] \n}\n\n```", "```js\n$ [[we are in the server/ directory]]\n$ touch configMongoose.js\n\n```", "```js\nimport mongoose from 'mongoose'; \n\nconst conf = { \n  hostname: process.env.MONGO_HOSTNAME || 'localhost', \n  port: process.env.MONGO_PORT || 27017, \n  env: process.env.MONGO_ENV || 'local', \n}; \n\nmongoose.connect(&grave;mongodb://${conf.hostname}:  \n${conf.port}/${conf.env}&grave;); \n\nconst articleSchema = { \narticleTitle:String, \narticleContent:String \n}; \n\nconst Article = mongoose.model('Article', articleSchema,  \n'articles'); \n\nexport default { \n  Article \n};\n\n```", "```js\nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \narticleTitle:String, \narticleContent:String \n}; \n\nconst Article = mongoose.model('Article', articleSchema,  \n'articles');\n\n```", "```js\nimport configMongoosefrom './configMongoose'; \nimport sessionRoutes from './routesSession'; \nconst Article = configMongoose.Article;\n\n```", "```js\nconst PublishingAppRoutes = [ \n    ...sessionRoutes, \n  { \n  route: 'articles.length',\n\n```", "```js\nHash: eeeb09711c820a7978d5 \nVersion2,: webpack 1.12.14 \nTime: 2609ms \n Asset    Size  Chunks             Chunk Names \napp.js  1.9 MB       0  [emitted]  main \n   [0] multi main 40 bytes {0} [built] \n    + 634 hidden modules \nStarted on port 3000\n\n```", "```js\nconst userSchema = { \n'username' : String, \n'password' : String, \n'firstName' : String, \n'lastName' : String, \n'email' : String, \n'role' : String, \n'verified' : Boolean, \n'imageUrl' : String \n}; \n\nconst User = mongoose.model('User', userSchema, 'pubUsers'); \n\nexport default { \n  Article, \n  User \n};\n\n```", "```js\nimport configMongoosefrom './configMongoose'; \nconst User = configMongoose.User;\n\n```", "```js\n$ npmi --save jsonwebtoken crypto\n\n```", "```js\nimport jwt from 'jsonwebtoken'; \nimport crypto from 'crypto'; \nimport jwtSecret from './configSecret';\n\n```", "```js\nconst saltedPassword = password+'pubApp';  \n// pubApp is our salt string \nconst saltedPassHash = crypto \n.createHash('sha256') \n.update(saltedPassword) \n.digest('hex'); \nconst userStatementQuery = { \n  $and: [ \n      { 'username': username }, \n      { 'password': saltedPassHash } \n  ] \n}\n\n```", "```js\nreturn User.find(userStatementQuery, function(err, user) { \n   if (err) throw err; \n }).then((result) => { \n   if(result.length) { \n     return null;  \n     // SUCCESSFUL LOGIN mocked now (will implement next) \n   } else { \n     // INVALID LOGIN \n     return [ \n       { \n         path: ['login', 'token'],  \n         value: \"INVALID\" \n       }, \n       { \n         path: ['login', 'error'],  \n         value: \"NO USER FOUND, incorrect login  \n         information\" \n       } \n     ]; \n   } \n   return result; \n });\n\n```", "```js\n return [ \n    { \n      path: ['login', 'token'],  \n      value: \"INVALID\" \n    }, \n    { \n      path: ['login', 'error'],  \n      value: 'NO USER FOUND, incorrect login  \n      information' \n    } \n  ];\n\n```", "```js\nreturn null; // SUCCESSFUL LOGIN mocked now (will implement next)\n\n```", "```js\nconst role = result[0].role; \nconst userDetailsToHash = username+role; \nconst token = jwt.sign(userDetailsToHash, jwtSecret.secret); \nreturn [ \n  { \n    path: ['login', 'token'], \n    value: token \n  }, \n  { \n    path: ['login', 'username'], \n    value: username \n  }, \n  { \n    path: ['login', 'role'], \n    value: role \n  }, \n  { \n    path: ['login', 'error'], \n    value: false \n  } \n];\n\n```", "```js\n$ npmi --save react-router@1.0.0redux-simple-router@0.0.10redux-thunk@1.0.0\n\n```", "```js\n$ cd src\n$ mkdir routes\n$ cd routes\n$ touch index.js\n\n```", "```js\nimport React  from 'react'; \nimport {Route, IndexRoute} from 'react-router'; \nimport CoreLayout  from '../layouts/CoreLayout'; \nimport PublishingApp  from '../layouts/PublishingApp'; \nimport LoginView  from '../views/LoginView'; \n\nexport default ( \n<Route component={CoreLayout} path='/'> \n<IndexRoute component={PublishingApp} name='home' /> \n<Route component={LoginView} path='login' name='login' /> \n</Route> \n);\n\n```", "```js\ncd ../layouts/ \ntouch CoreLayout.js \n\n```", "```js\nimport React from 'react'; \nimport {Link} from 'react-router'; \n\nclass CoreLayout extends React.Component { \n  static propTypes = { \n    children : React.PropTypes.element \n  } \n\n  render () { \n    return ( \n<div> \n<span> \nLinks: <Link to='/login'>Login</Link> |  \n<Link to='/'>Home Page</Link> \n</span> \n<br/> \n          {this.props.children} \n</div> \n    ); \n  } \n} \n\nexport default CoreLayout;\n\n```", "```js\n$ pwd\n$ [[[you shall be at the src folder]]]\n$ mkdir views\n$ cd views\n$ touch LoginView.js\n\n```", "```js\nimport React from 'react'; \nimport Falcor from 'falcor'; \nimport falcorModel from '../falcorModel.js'; \nimport {connect} from 'react-redux'; \nimport {bindActionCreators} from 'redux'; \n\nconst mapStateToProps = (state) => ({ \n  ...state \n}); \n\n// You can add your reducers here \nconst mapDispatchToProps = (dispatch) => ({}); \n\nclass LoginView extends React.Component { \n  render () { \n    return ( \n<div> \n<h1>Login view</h1> \n          FORM GOES HERE \n</div> \n    ); \n  } \n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginView);\n\n```", "```js\n$ pwd\n$ [[[you shall be at the src folder]]]\n$ mkdir containers\n$ cd containers\n$ touch Root.js\n\n```", "```js\nimport React  from 'react'; \nimport {Provider}  from 'react-redux'; \nimport {Router}  from 'react-router'; \nimport routes   from '../routes'; \nimport createHashHistory  from 'history/lib/createHashHistory'; \n\nconst noQueryKeyHistory = createHashHistory({ \nqueryKey: false \n}); \n\nexport default class Root extends React.Component { \n  static propTypes = { \n    history : React.PropTypes.object.isRequired, \n    store   : React.PropTypes.object.isRequired \n  } \n\n  render () { \n    return ( \n<Provider store={this.props.store}> \n<div> \n<Router history={noQueryKeyHistory}> \n            {routes} \n</Router> \n</div> \n</Provider> \n    ); \n  } \n}\n\n```", "```js\n$ pwd\n$ [[[you shall be at the src folder]]]\n$ cd reducers\n$ touch index.js\n\n```", "```js\nimport {combineReducers} from 'redux'; \nimport {routeReducer} from 'redux-simple-router'; \nimport article  from './article'; \n\nexport default combineReducers({ \n  routing: routeReducer, \n  article \n});\n\n```", "```js\n$ pwd\n$ [[[you shall be at the src folder]]]\n$ mkdir store\n$ cd store\n$ touch configureStore.js\n\n```", "```js\nimport rootReducer  from '../reducers'; \nimport thunk  from 'redux-thunk'; \nimport {applyMiddleware,compose,createStore} from 'redux'; \n\nexport default function configureStore (initialState, debug =  \nfalse) { \nlet createStoreWithMiddleware; \nconst middleware = applyMiddleware(thunk); \n\ncreateStoreWithMiddleware = compose(middleware); \n\nconst store = createStoreWithMiddleware(createStore)( \nrootReducer, initialState \n  ); \n  return store; \n}\n\n```", "```js\nlet articlesJSX = []; \n\nfor(let articleKey in this.props) { \nconst articleDetails = this.props[articleKey]; \n\nconst currentArticleJSX = ( \n<div key={articleKey}> \n<h2>{articleDetails.articleTitle}</h2> \n<h3>{articleDetails.articleContent}</h3> \n</div>); \n\narticlesJSX.push(currentArticleJSX); \n}\n\n```", "```js\nlet articlesJSX = []; \n\nfor(let articleKey in this.props.article) { \nconst articleDetails = this.props.article[articleKey]; \n\nconst currentArticleJSX = ( \n<div key={articleKey}> \n<h2>{articleDetails.articleTitle}</h2> \n<h3>{articleDetails.articleContent}</h3> \n</div>); \n\narticlesJSX.push(currentArticleJSX); \n}\n\n```", "```js\n// old codebase, to improve: \nimport React from 'react' \nimport { render } from 'react-dom' \nimport { Provider } from 'react-redux' \nimport { createStore } from 'redux' \nimport article from './reducers/article' \nimport PublishingApp from './layouts/PublishingApp' \n\nconst store = createStore(article) \n\nrender( \n<Provider store={store}> \n<PublishingApp store={store} /> \n</Provider>, \ndocument.getElementById('publishingAppRoot') \n);\n\n```", "```js\nimport React from 'react'; \nimport ReactDOM from 'react-dom'; \nimport createBrowserHistory from 'history/lib/createBrowserHistory'; \nimport {syncReduxAndRouter} from 'redux-simple-router'; \nimport Root from './containers/Root'; \nimport configureStore from './store/configureStore'; \n\nconst target  = document.getElementById('publishingAppRoot'); \nconst history = createBrowserHistory(); \n\nexport const store = configureStore(window.__INITIAL_STATE__); \n\nsyncReduxAndRouter(history, store); \n\nconst node = ( \n<Root \n      history={history} \n      store={store}  /> \n); \n\nReactDOM.render(node, target);\n\n```", "```js\n$ npm i --save material-ui@0.14.4formsy-react@0.17.0\n\n```", "```js\n$ pwd\n$ [[[you shall be at the src folder]]]\n$ mkdir components\n$ cd components\n$ touch DefaultInput.js\n\n```", "```js\nimport React from 'react'; \nimport {TextField} from 'material-ui'; \nimport {HOC} from 'formsy-react'; \n\nclass DefaultInput extends React.Component { \n  constructor(props) { \n    super(props); \n    this.changeValue = this.changeValue.bind(this); \n    this.state = {currentText: null} \n  } \n\nchangeValue(e) { \nthis.setState({currentText: e.target.value}) \nthis.props.setValue(e.target.value); \nthis.props.onChange(e); \n  } \n\n  render() { \n    return ( \n<div> \n\n<TextField \n          ref={this.props.name} \n          floatingLabelText={this.props.title} \n          name={this.props.name} \n          onChange={this.changeValue} \n          required={this.props.required} \n          type={this.props.type} \n          value={this.state.currentText ?  \n          this.state.currentText : this.props.value} \n          defaultValue={this.props.defaultValue} /> \n        {this.props.children} \n</div>); \n  } \n}; \n\nexport default HOC(DefaultInput);\n\n```", "```js\n$ pwd\n$ [[[you shall be at the components folder]]]\n$ touch LoginForm.js\n\n```", "```js\nimport React from 'react'; \nimport Formsy from 'formsy-react'; \nimport {RaisedButton, Paper} from 'material-ui'; \nimport DefaultInput from './DefaultInput'; \n\nexport class LoginForm extends React.Component { \n  constructor() { \n    super(); \n  } \n\n  render() { \n    return ( \n<Formsy.FormonSubmit={this.props.onSubmit}> \n<Paper zDepth={1} style={{padding: 32}}> \n<h3>Log in</h3> \n<DefaultInput \nonChange={(event) => {}}  \nname='username' \ntitle='Username (admin)' \nrequired /> \n\n<DefaultInput \nonChange={(event) => {}}  \ntype='password' \nname='password' \ntitle='Password (123456)' \nrequired /> \n\n<div style={{marginTop: 24}}> \n<RaisedButton \n              secondary={true} \n              type=\"submit\" \n              style={{margin: '0 auto', display: 'block', width:  \n              150}} \n              label={'Log in'} /> \n</div> \n</Paper> \n</Formsy.Form> \n    ); \n  } \n}\n\n```", "```js\nimport {LoginForm} from '../components/LoginForm.js'; \nAdd a new constructor of that component: \n constructor(props) { \n    super(props); \n    this.login = this.login.bind(this); \n    this.state = { \n      error: null \n    }; \n  }\n\n```", "```js\nasync login(credentials) { \nconsole.info('credentials', credentials); \n\n    await falcorModel \n      .call(['login'],[credentials]) \n      .then((result) =>result); \n\nconst tokenRes = await falcorModel.getValue('login.token'); \nconsole.info('tokenRes', tokenRes); \n    return; \n  }\n\n```", "```js\n render () { \n    return ( \n<div> \n<h1>Login view</h1> \n          FORM GOES HERE \n</div> \n    ); \n  }\n\n```", "```js\n render () { \n    return ( \n<div> \n<h1>Login view</h1> \n<div style={{maxWidth: 450, margin: '0 auto'}}> \n<LoginForm \nonSubmit={this.login} /> \n</div> \n</div> \n    ); \n  }\n\n```", "```js\n$ pwd \n$ [[[you shall be at the views folder]]] \n$ touch DashboardView.js\n\n```", "```js\nimport React from 'react'; \nimport Falcor from 'falcor'; \nimport falcorModel from '../falcorModel.js'; \nimport { connect } from 'react-redux'; \nimport { bindActionCreators } from 'redux'; \nimport { LoginForm } from '../components/LoginForm.js'; \n\nconst mapStateToProps = (state) => ({ \n  ...state \n}); \n\n// You can add your reducers here \nconst mapDispatchToProps = (dispatch) => ({}); \n\nclass DashboardView extends React.Component { \nrender () { \n    return ( \n<div> \n<h1>Dashboard - loggedin!</h1> \n</div> \n    ); \n  } \n} \nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardView);\n\n```", "```js\nimport DashboardView from '../views/DashboardView'; \n\nexport default ( \n<Route component={CoreLayout} path='/'> \n<IndexRoute component={PublishingApp} name='home' /> \n<Route component={LoginView} path='login' name='login' /> \n<Route component={DashboardView} path='dashboard'   name='dashboard' /> \n</Route> \n);\n\n```", "```js\nconsole.info('tokenRes', tokenRes); \n\nif(tokenRes === 'INVALID') { \n    const errorRes = await falcorModel.getValue('login.error'); \n    this.setState({error: errorRes}); \n    return; \n} \n\nreturn;\n\n```", "```js\nimport { Snackbar } from 'material-ui';\n\n```", "```js\n<Snackbar \n  autoHideDuration={4000} \n  open={!!this.state.error} \n  message={this.state.error || ''}  \n  onRequestClose={() => null} />\n\n```", "```js\nrender () { \n  return ( \n<div> \n<h1>Login view</h1> \n<div style={{maxWidth: 450, margin: '0 auto'}}> \n<LoginForm \nonSubmit={this.login} /> \n</div> \n<Snackbar autoHideDuration={4000} \n          open={!!this.state.error} \n          message={this.state.error || ''}  \nonRequestClose={() => null} /> \n</div> \n  ); \n}\n\n```", "```js\nif(tokenRes === 'INVALID') { \nconst errorRes = await falcorModel.getValue('login.error'); \nthis.setState({error: errorRes}); \n      return; \n    }\n\n```", "```js\nif(tokenRes) { \nconst username = await falcorModel.getValue('login.username'); \nconst role = await falcorModel.getValue('login.role'); \n\nlocalStorage.setItem('token', tokenRes); \nlocalStorage.setItem('username', username); \nlocalStorage.setItem('role', role); \n\nthis.props.history.pushState(null, '/dashboard'); \n}\n\n```", "```js\nlocalStorage.setItem('token', tokenRes); \nlocalStorage.setItem('username', username); \nlocalStorage.setItem('role', role);\n\n```", "```js\nconst userSchema = { \n'username' : String, \n'password' : String, \n'firstName' : String, \n'lastName' : String, \n'email' : String, \n'role' : String, \n'verified' : Boolean, \n'imageUrl' : String \n};\n\n```", "```js\nconst userSchema = { \n'username' : { type: String, index: {unique: true, dropDups: true }}, \n'password' : String, \n'firstName' : String, \n'lastName' : String, \n'email' : { type: String, index: {unique: true, dropDups: true }}, \n'role' : { type: String, default: 'editor' }, \n'verified' : Boolean, \n'imageUrl' : String \n};\n\n```", "```js\n {  \n    route: ['register'], \n    call: (callPath, args) => \n      { \n        const newUserObj = args[0]; \n        newUserObj.password = newUserObj.password+'pubApp'; \n        newUserObj.password = crypto \n          .createHash('sha256') \n          .update(newUserObj.password) \n          .digest('hex'); \n          const newUser = new User(newUserObj); \n          return newUser.save((err, data) => { if (err) return err; }) \n          .then ((newRes) => { \n            /* \n              got new obj data, now let's get count: \n             */ \n             const newUserDetail = newRes.toObject(); \n\n            if(newUserDetail._id) { \n              return null; // Mocked for now \n            } else { \n              // registration failed \n              return [ \n                { \n                  path: ['register', 'newUserId'],  \n                  value: 'INVALID' \n                }, \n                { \n                  path: ['register', 'error'],  \n                  value: 'Registration failed - no id has been                                  \n                  created' \n                } \n              ]; \n            } \n            return; \n          }).catch((reason) =>console.error(reason)); \n      } \n  }\n\n```", "```js\nnewUserObj.password = newUserObj.password+'pubApp'; \nnewUserObj.password = crypto \n  .createHash('sha256') \n  .update(newUserObj.password) \n  .digest('hex');\n\n```", "```js\nreturn newUser.save((err, data) => { if (err) return err; })\n\n```", "```js\n // registration failed \n    return [ \n      { \n        path: ['register', 'newUserId'],  \n        value: 'INVALID' \n      }, \n      { \n        path: ['register', 'error'],  \n        value: 'Registration failed - no id has been created' \n      }\n\n```", "```js\n// you shall already have this in your codebase, just a recall \nif(newUserDetail._id) { \n  return null; // Mocked for now \n} \nThe preceding code needs to be replaced with: \nif(newUserDetail._id) { \nconst newUserId = newUserDetail._id.toString(); \n\n  return [ \n    { \n      path: ['register', 'newUserId'],  \n      value: newUserId \n    }, \n    { \n      path: ['register', 'error'],  \n      value: false  \n    } \n  ]; \n}\n\n```", "```js\n$ pwd \n$ [[[you shall be at the components folder]]] \n$ touch RegisterForm.js \n\n```", "```js\nimport React from 'react'; \nimport Formsy from 'formsy-react'; \nimport {RaisedButton, Paper} from 'material-ui'; \nimport DefaultInput from './DefaultInput'; \n\nexport class RegisterForm extends React.Component { \n  constructor() { \n    super(); \n  } \n\n  render() { \n    return ( \n<Formsy.FormonSubmit={this.props.onSubmit}> \n<Paper zDepth={1} style={{padding: 32}}> \n<h3>Registration form</h3> \n<DefaultInput \n  onChange={(event) => {}}  \n  name='username' \n  title='Username' \n  required /> \n\n<DefaultInput \n  onChange={(event) => {}}  \n  name='firstName' \n  title='Firstname' \n  required /> \n\n<DefaultInput \n  onChange={(event) => {}}  \n  name='lastName' \n  title='Lastname' \n  required /> \n\n<DefaultInput \n  onChange={(event) => {}}  \n  name='email' \n  title='Email' \n  required /> \n\n<DefaultInput \n  onChange={(event) => {}}  \n  type='password' \n  name='password' \n  title='Password' \n  required /> \n\n<div style={{marginTop: 24}}> \n<RaisedButton \n              secondary={true} \n              type=\"submit\" \n              style={{margin: '0 auto', display:                      \n              'block', width: 150}} \n              label={'Register'} /> \n</div> \n</Paper> \n</Formsy.Form> \n    ); \n  } \n}\n\n```", "```js\n$ pwd \n$ [[[you shall be at the views folder]]] \n$ touch RegisterView.js\n\n```", "```js\nimport React from 'react'; \nimport falcorModel from '../falcorModel.js'; \nimport { connect } from 'react-redux'; \nimport { bindActionCreators } from 'redux'; \nimport { Snackbar } from 'material-ui'; \nimport { RegisterForm } from '../components/RegisterForm.js'; \n\nconst mapStateToProps = (state) => ({  \n  ...state  \n}); \nconst mapDispatchToProps = (dispatch) => ({});\n\n```", "```js\nconst mapDispatchToProps = (dispatch) => ({}); \n\nclass RegisterView extends React.Component { \n  constructor(props) { \n    super(props); \n    this.register = this.register.bind(this); \n    this.state = { \n      error: null \n    }; \n  } \n\n  render () { \n    return ( \n<div> \n<h1>Register</h1> \n<div style={{maxWidth: 450, margin: '0 auto'}}> \n<RegisterForm \nonSubmit={this.register} /> \n</div> \n</div> \n    ); \n  } \n} \nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterView);\n\nregister function, so between the constructor and the render function add the function, as follows:\n```", "```js\nasync register (newUserModel) {console.info(\"newUserModel\",  newUserModel); \n\n    await falcorModel \n      .call(['register'],[newUserModel]) \n      .then((result) =>result); \n\n      const newUserId = await falcorModel.getValue(['register',  \n      'newUserId']); \n\n    if(newUserId === 'INVALID') { \n      const errorRes = await falcorModel.getValue('register.error'); \n\n      this.setState({error: errorRes}); \n      return; \n    } \n\n    this.props.history.pushState(null, '/login'); \n  }\n\n```", "```js\nawait falcorModel \n      .call(['register'],[newUserModel]) \n      .then((result) => result);\n\n```", "```js\nconst newUserId = await falcorModel.getValue(['register', 'newUserId']);\n\n```", "```js\nimport RegisterView from '../views/RegisterView';\n\n```", "```js\nexport default ( \n<Route component={CoreLayout} path='/'> \n<IndexRoute component={PublishingApp} name='home' /> \n<Route component={LoginView} path='login' name='login' /> \n<Route component={DashboardView} path='dashboard'  name='dashboard' /> \n<Route component={RegisterView} path='register' name='register' /> \n</Route> \n);\n\n```", "```js\nrender () { \n    return ( \n<div> \n<span> \n   Links:<Link to='/register'>Register</Link> \n  <Link to='/login'>Login</Link> \n  <Link to='/'>Home Page</Link> \n</span> \n  <br/> \n {this.props.children} \n</div> \n    ); \n  }\n\n```"]