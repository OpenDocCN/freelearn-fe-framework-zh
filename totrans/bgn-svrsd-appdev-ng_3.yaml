- en: Chapter 3. Server-Side Rendering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 服务器端渲染
- en: How does a normal app render?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正常应用是如何渲染的？
- en: Let's first take a look at how a normal Angular application without server-side
    rendering behaves.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看一个没有服务器端渲染的正常Angular应用程序是如何表现的。
- en: When we start our server in development mode, using `ng serve,` and we use the
    **View Source** option in our browser to check the source, we see that the only
    thing that gets rendered is the output from our `src/index.html` file, with a
    few scripts appended at the bottom.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在开发模式下启动服务器，使用 `ng serve`，并在浏览器中使用**查看源代码**选项来检查源代码时，我们会看到只有来自我们的 `src/index.html`
    文件的输出被渲染，底部附加了一些脚本。
- en: 'These scripts will be downloaded by the browser and after they have been downloaded
    and executed, the application will display:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些脚本将由浏览器下载，下载并执行后，应用程序将显示：
- en: '![Server-Side Rendering](img/2.1.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![服务器端渲染](img/2.1.jpg)'
- en: While this works in some situations, in others this can become problematic.
    If the user of your app is on a slow connection or slow device, it will take time
    to load and parse the scripts, and during that waiting time, the user sees a blank
    page.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这在某些情况下是可行的，但在其他情况下可能会出现问题。如果您的应用用户处于慢速连接或慢速设备上，加载和解析脚本将需要时间，而在等待期间，用户将看到一个空白页面。
- en: Another issue is that most search engines and social media sites will only read
    the initial *payload* of our website and will not download and execute our client-side
    JavaScript files.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是最多的搜索引擎和社交媒体网站只会读取我们网站的初始**负载**，而不会下载和执行我们的客户端JavaScript文件。
- en: These are the things that will be fixed in this lesson. After we have added
    server-side rendering, we will add support for dynamic metadata and page titles.
    This makes sure that any server-side rendered page has proper metadata, which
    will make these social pages rich in content and will make sure that search engines
    can index the pages properly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在本节课中解决的问题。在我们添加了服务器端渲染之后，我们将添加对动态元数据和页面标题的支持。这确保了任何服务器端渲染的页面都有适当的元数据，这将使这些社交页面内容丰富，并确保搜索引擎可以正确索引页面。
- en: To get the actual loading times, use the status bar of the **Network** tab in
    Chrome Developer Tools.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取实际的加载时间，请使用Chrome开发者工具中**网络**标签页的状态栏。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'One way to experience a slow connection on a normal Chrome browser is to open
    Chrome Developer Tools, go to the **Network** tab, and change the network speed
    from **Online** to **Slow 3G**. When you load the page served by the server, you
    will get an idea of how long it takes for a slow connection to load the application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常Chrome浏览器上体验慢速连接的一种方法是在Chrome开发者工具中打开，转到**网络**标签页，并将网络速度从**在线**改为**慢速3G**。当您加载由服务器提供的页面时，您将了解慢速连接加载应用程序需要多长时间：
- en: '![Server-Side Rendering](img/3.21.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![服务器端渲染](img/3.21.jpg)'
- en: Lesson Objectives
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程目标
- en: 'In this lesson, you will:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节课中，您将：
- en: Add server-side rendering to the application that we built in the previous lesson
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将服务器端渲染添加到我们在上一节课中构建的应用程序中
- en: Add Angular Universal to our application and configure a second app in our Angular
    CLI config
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Angular Universal添加到我们的应用程序中，并在Angular CLI配置中配置第二个应用
- en: Implement a web server to host our app
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个网络服务器来托管我们的应用
- en: Add dynamic metadata to our application
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将动态元数据添加到我们的应用程序中
- en: Generating the Server App
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成服务器应用
- en: Since Angular CLI version 1.6, there has been a generator for adding support
    for Angular Universal. It does this by adding a second app to the Angular CLI
    config, `.angular-cli.json`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Angular CLI版本1.6以来，就有一个生成器用于添加对Angular Universal的支持。它是通过在Angular CLI配置文件`.angular-cli.json`中添加第二个应用来实现的。
- en: We will refer to this new app as our *server app*, and the one we worked with
    in the previous lesson will be called our *browser app*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个新应用称为我们的**服务器应用**，而我们在上一节课中使用的应用将被称为我们的**浏览器应用**。
- en: So, what are the differences between the browser and server apps?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，浏览器应用和服务器应用之间有什么区别呢？
- en: Both load another platform which behaves differently.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们都会加载另一个平台，该平台的行为不同。
- en: The browser app uses code splitting, which builds the app in various smaller
    files. This improves load times in the browser. The server builds the app without
    code splitting as there are no benefits to do this on the server.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器应用使用代码拆分，将应用构建成各种较小的文件。这提高了浏览器中的加载时间。服务器构建应用时不进行代码拆分，因为在服务器上这样做没有好处。
- en: The browser app loads a greater number of polyfills. These are small JavaScript
    libraries that add functionality to the browser, if the browser does not support
    them yet. This is not needed for the server.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器应用加载了更多的polyfills。这些是小型的JavaScript库，如果浏览器尚未支持它们，则可以添加功能。对于服务器来说，这不需要。
- en: 'Let''s explore in some more detail what happens when we run the generator:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探索当我们运行生成器时会发生什么：
- en: '![Generating the Server App](img/2.3.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![生成服务器应用](img/2.3.jpg)'
- en: 'Running this generator will change a few things in the current app:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此生成器将在当前应用中更改一些内容：
- en: It will add a second app to the `apps` array in `.angular-cli.json.`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在`.angular-cli.json`中的`apps`数组中添加第二个应用。
- en: It will add a dependency for the `@angular/platform-server` package.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将为`@angular/platform-server`包添加一个依赖项。
- en: It will update `AppModule` and change the `BrowserModule` import.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将更新`AppModule`并更改`BrowserModule`的导入。
- en: It will change the way the browser app gets bootstrapped in `src/main.ts.`
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将更改浏览器应用在`src/main.ts`中的引导方式。
- en: 'Additionally, it creates some new files:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还创建了一些新文件：
- en: It generates a new file `src/app/app.server.module.ts` with the `AppServerModule`
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它生成一个新文件`src/app/app.server.module.ts`，其中包含`AppServerModule`。
- en: The `src/main.server.ts` file is created, which exports the `AppServerModule`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了`src/main.server.ts`文件，该文件导出`AppServerModule`。
- en: A TypeScript config file for the server app is generated in `src/tsconfig.server.json`
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`src/tsconfig.server.json`中生成了一个服务器应用的TypeScript配置文件。
- en: As stated above, we have new dependencies in `package.json`. This means we need
    to run `npm install` to make sure the dependencies get installed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们在`package.json`中有新的依赖项。这意味着我们需要运行`npm install`以确保依赖项被安装。
- en: Generating the Angular Universal Application
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成Angular通用应用
- en: 'We will create the server app and install the missing dependencies:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建服务器应用并安装缺失的依赖项：
- en: Open the terminal in the project directory.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开终端。
- en: 'Run the generator to add the Universal app. The command is as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行生成器以添加通用应用。命令如下：
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the dependencies that were added to `package.json`:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装添加到`package.json`中的依赖项：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Making Our Apps Consistent
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使我们的应用保持一致
- en: 'We will make some small changes to both the browser app and the server app
    so that they are more consistent:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对浏览器应用和服务器应用进行一些小的修改，以便它们更加一致：
- en: Open the terminal in the project directory.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开终端。
- en: 'Run the following command to update the `outDir` of the server app:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以更新服务器应用的`outDir`：
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the following command to update the `outDir` of the browser app:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以更新浏览器应用的`outDir`：
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the following command to update the `name` of the browser app:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以更新浏览器应用的`name`：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command to update the `platform` of the browser app:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以更新浏览器应用的`platform`：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Making Our Apps Consistent](img/2.4.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使我们的应用保持一致](img/2.4.jpg)'
- en: 'The changes will be reflected in `.angular-cli.json`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改将在`.angular-cli.json`中反映出来：
- en: '![Making Our Apps Consistent](img/2.5.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使我们的应用保持一致](img/2.5.jpg)'
- en: We've now installed the required dependencies.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经安装了所需的依赖项。
- en: In this section, we have created a new server app in addition to the browser
    app we already had. Let's move on to adding support for Angular Universal in our
    application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在已有的浏览器应用之外创建了一个新的服务器应用。让我们继续在我们的应用中添加对Angular Universal的支持。
- en: Adding Dependencies for the Server App
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为服务器应用添加依赖项
- en: 'In order to get our server app working correctly, we need to make sure we load
    two of Angular''s dependencies: `zone.js` and `reflect-metadata`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的服务器应用能够正确运行，我们需要确保加载Angular的两个依赖项：`zone.js`和`reflect-metadata`。
- en: Our browser app loads these dependencies using `polyfills.ts`, and for the server
    app, we will add them to `src/main.server.ts`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的浏览器应用使用`polyfills.ts`加载这些依赖项，而对于服务器应用，我们将它们添加到`src/main.server.ts`中。
- en: Another dependency that we need to add is the `ModuleMapLoaderModule`. This
    is a third-party module that is needed to make Angular Universal apps work with
    lazy loading.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加另一个依赖项，即`ModuleMapLoaderModule`。这是一个第三方模块，它需要与Angular Universal应用配合使用懒加载功能。
- en: We will import two dependencies in `src/main.server.ts` so that they are imported
    when the `AppServerModule` is loaded.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`src/main.server.ts`中导入两个依赖项，以便在`AppServerModule`加载时导入。
- en: 'Additionally, we will enable production mode, just like it''s done for the
    browser app in `src/main.ts`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将启用生产模式，就像在`src/main.ts`中对浏览器应用所做的那样：
- en: Open the newly created file `src/main.server.ts`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新创建的文件`src/main.server.ts`。
- en: 'Add the imports at the top of the file:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加导入语句：
- en: '[PRE6]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Conditionally enable production mode, depending on the environment:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据环境条件启用生产模式：
- en: '[PRE7]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's move on to adding this new application to our Angular CLI configuration!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续将这个新应用程序添加到我们的 Angular CLI 配置中！
- en: Adding the Server App to Our Angular CLI Configuration
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将服务器应用程序添加到我们的 Angular CLI 配置中
- en: Open a terminal inside the project directory.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录内打开一个终端。
- en: 'Run the following command to install the dependency:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来安装依赖项：
- en: '[PRE8]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open the `src/app/app.server.module.ts` file in your editor.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `src/app/app.server.module.ts` 文件。
- en: 'Add the following `import` at the top of the file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下 `import`：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a reference to the imported module to the `imports` array:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对导入模块的引用添加到 `imports` 数组中：
- en: '[PRE10]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this section, we added the required dependencies and added the server app
    to our configuration. In the next section, let's explore run scripts and add them
    to our application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们添加了所需的依赖项并将服务器应用程序添加到我们的配置中。在下一节中，让我们探索运行脚本并将它们添加到我们的应用程序中。
- en: Adding Run Scripts to package.json
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将运行脚本添加到 package.json
- en: Now that we have added a second application to our Angular CLI config, we need
    to make sure we can easily build both applications without having to memorize
    the exact commands.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将第二个应用程序添加到我们的 Angular CLI 配置中，我们需要确保我们可以轻松地构建这两个应用程序，而无需记住确切的命令。
- en: In order to do so, we will leverage the so-called npm scripts. These scripts
    are used to define operations that can be performed on our application. Examples
    of these operations are building the application, running tests, and deploying
    the application to a staging or production environment.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将利用所谓的 npm 脚本。这些脚本用于定义可以在我们的应用程序上执行的操作。这些操作的例子包括构建应用程序、运行测试以及将应用程序部署到预发布或生产环境。
- en: We can define our npm scripts in the `scripts` section of the `package.json`
    file in the root of our project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在项目根目录下的 `package.json` 文件的 `scripts` 部分中定义我们的 npm 脚本，以便我们可以轻松地为我们的应用程序创建构建。
- en: Here, we will add three scripts called `build`, `build:browser`, and `build:server`,
    where the first script will invoke the other two.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将添加三个名为 `build`、`build:browser` 和 `build:server` 的脚本，其中第一个脚本将调用其他两个。
- en: This gives us the flexibility to run the two commands at once, or run them independently
    if we like.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够同时运行这两个命令，或者如果我们愿意，可以独立运行它们。
- en: 'To get an idea of how these scripts work, consider the following flow:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这些脚本的工作原理，请考虑以下流程：
- en: The `npm run build` command will first run `npm run build:browser`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`npm run build` 命令将首先运行 `npm run build:browser`。'
- en: When that command is finished, it will run `npm run build:server`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当该命令完成后，它将运行 `npm run build:server`。
- en: The order in which we run the `build:browser` and `build:server` scripts is
    irrelevant; the scripts are fully independent.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `build:browser` 和 `build:server` 脚本的顺序无关紧要；这两个脚本完全独立。
- en: Adding npm Scripts
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 npm 脚本
- en: 'We will add some npm scripts to our `package.json` so we can easily create
    builds for our application:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的 `package.json` 添加一些 npm 脚本，以便我们可以轻松地为我们的应用程序创建构建。
- en: Open the `package.json` file from the root of our project in the editor.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开项目根目录下的 `package.json` 文件。
- en: Locate the `scripts` object and remove the existing `build` property.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到 `scripts` 对象并删除现有的 `build` 属性。
- en: 'Add the following keys to the `scripts` object:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下键添加到 `scripts` 对象中：
- en: '[PRE11]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Testing the Builds of Both Apps
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试两个应用程序的构建结果
- en: 'We will test the builds of both the browser and server applications:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将测试浏览器和服务器应用程序的构建结果：
- en: Open a terminal inside the project directory.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录内打开一个终端。
- en: 'Run the following command to build the browser application:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来构建浏览器应用程序：
- en: '[PRE12]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Testing the Builds of Both Apps](img/2.6.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![测试两个应用程序的构建结果](img/2.6.jpg)'
- en: 'Run the following command to build the server application:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来构建服务器应用程序：
- en: '[PRE13]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Testing the Builds of Both Apps](img/2.7.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![测试两个应用程序的构建结果](img/2.7.jpg)'
- en: If both commands execute without any error messages, we can continue with our
    next step, which is implementing a small web server to host our application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个命令都执行而没有错误消息，我们可以继续进行下一步，即实现一个小型网络服务器来托管我们的应用程序。
- en: Implementing a Web Server
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现网络服务器
- en: Now that both our applications can be built, we can move on to creating a simple
    server to host our applications.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们两个应用程序都可以构建，我们可以继续创建一个简单的服务器来托管我们的应用程序。
- en: In order to do this, we will create a simple Node.js server based on Express.js.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将创建一个基于 Express.js 的简单 Node.js 服务器。
- en: We will define our server in a TypeScript file called `server.ts` and run this
    file using the `ts-node` binary that we will install.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一个名为 `server.ts` 的 TypeScript 文件中定义我们的服务器，并使用我们将要安装的 `ts-node` 二进制文件运行此文件。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The current implementation of Angular Universal depends on Node.js as it is
    implemented in JavaScript.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Universal 的当前实现依赖于 Node.js，因为它是用 JavaScript 实现的。
- en: It is possible to run Angular Universal apps using other servers, such as ASP.NET,
    although under the hood the ASP.NET server will invoke a Node.js process to handle
    the Angular Universal part.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用其他服务器运行 Angular Universal 应用程序，例如 ASP.NET，尽管在底层，ASP.NET 服务器将调用 Node.js 进程来处理
    Angular Universal 部分。
- en: 'An example repository of how to run Angular Universal can be found here: [https://github.com/MarkPieszak/aspnetcore-angular2-universal](https://github.com/MarkPieszak/aspnetcore-angular2-universal).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里找到一个运行 Angular Universal 的示例仓库：[https://github.com/MarkPieszak/aspnetcore-angular2-universal](https://github.com/MarkPieszak/aspnetcore-angular2-universal)。
- en: Installing Server Dependencies
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装服务器依赖项
- en: 'We will install the `ts-node` binary that we will use to execute our server
    file. Additionally, we will install the rendering engine that will be used by
    Express.js to load our Angular Universal app:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装我们将用于执行服务器文件的 `ts-node` 二进制文件。此外，我们还将安装 Express.js 将用于加载我们的 Angular Universal
    应用程序的渲染引擎：
- en: Open a terminal inside the project directory.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开终端。
- en: 'Run the following command to install `ts-node`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令安装 `ts-node`：
- en: '[PRE14]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Installing Server Dependencies](img/2.8.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![安装服务器依赖项](img/2.8.jpg)'
- en: Creating the server.ts File
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 server.ts 文件
- en: We will implement our `server.ts` file.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现我们的 `server.ts` 文件。
- en: 'In this file, we will define our Express.js server and configure it so it can
    render and serve our server app:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们将定义我们的 Express.js 服务器并配置它以渲染和提供我们的服务器应用程序：
- en: In your editor, create a new file called `server.ts` in the project root.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中，在项目根目录下创建一个名为 `server.ts` 的新文件。
- en: 'Add the following `import` statements at the top of the file:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下 `import` 语句：
- en: '[PRE15]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define the constants that we will use in the server:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义我们将在服务器中使用的常量：
- en: '[PRE16]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Define the `html` view engine. This will let Express.js know which function
    it uses to render HTML files:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `html` 视图引擎。这将让 Express.js 知道它使用哪个函数来渲染 HTML 文件：
- en: '[PRE17]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Define the rest of the Express.js defaults. We set our default view engine
    to `html`, the engine we defined in the previous step. Next, we set the root directory
    for our views to reference our `staticRoot`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 Express.js 的其余默认设置。我们将默认视图引擎设置为 `html`，我们在上一步中定义的引擎。接下来，我们将视图的根目录设置为引用我们的
    `staticRoot`：
- en: '[PRE18]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the following Express.js defaults, we define that we want to statically
    serve all other files than of type `html`, and that the default route (`*`) is
    to render the `index.html` file:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 Express.js 默认设置，我们定义了我们要静态提供所有非 `html` 类型的文件，并且默认路由（`*`）是渲染 `index.html`
    文件：
- en: '[PRE19]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Start the server and log a message with the host and port:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器并记录主机和端口号：
- en: '[PRE20]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Adding the npm Script to package.json
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 npm 脚本添加到 package.json
- en: 'We will update `package.json` and add a script to start our server:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新 `package.json` 并添加一个用于启动我们服务器的脚本：
- en: Open the `package.json` file in the root of our project in the editor.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开我们项目根目录下的 `package.json` 文件。
- en: Locate the `scripts` object and remove the existing `start` property.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到 `scripts` 对象并删除现有的 `start` 属性。
- en: 'Add the following key to the `scripts` object:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `scripts` 对象中添加以下键：
- en: '[PRE21]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Starting the Server
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动服务器
- en: We will build and start our app, and test whether it works!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建并启动我们的应用程序，并测试它是否正常工作！
- en: 'Run the complete build using the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行完整的构建：
- en: '[PRE22]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start the Node.js server using the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动 Node.js 服务器：
- en: '[PRE23]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Starting the Server](img/2.9.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![启动服务器](img/2.9.jpg)'
- en: 'Navigate to the server-side rendered build at: `http://localhost:8080`.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到服务器端渲染的构建在：`http://localhost:8080`。
- en: Verify that the application works.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证应用程序是否正常工作。
- en: From the Chrome menu, go to **View** | **Developer Tools** | **View Source**
    and verify that the application output gets rendered.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Chrome 菜单中，转到 **查看** | **开发者工具** | **查看源代码**，并验证应用程序输出是否被渲染。
- en: In this section, we ran our app on a server built using Express.js. The next
    step is to add dynamic metadata, which will help our app become more SEO-friendly.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用 Express.js 构建的服务器运行了我们的应用程序。下一步是添加动态元数据，这将帮助我们的应用程序变得更加 SEO 友好。
- en: Adding Dynamic Metadata
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加动态元数据
- en: Now that our pages can be rendered using server-side rendering, we can introduce
    new functionality to enhance the appearance of our app.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用服务器端渲染来渲染我们的页面，我们可以引入新的功能来增强我们应用的外观。
- en: At the moment, our app will still only display the default title set in `src/index.html`
    and we won't have any other HTML meta tags added.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的应用仍然只显示在 `src/index.html` 中设置的默认标题，并且不会添加任何其他 HTML 元标签。
- en: To enhance the SEO friendliness of our page, and to make sure there is valuable
    information in our social preview, we want to address this.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高我们页面的 SEO 友好性，并确保我们的社交预览中有有价值的信息，我们想要解决这个问题。
- en: Luckily, Angular comes with the `Meta` and `Title` classes, which allow us to
    add dynamic titles and metadata to our pages.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Angular 内置了 `Meta` 和 `Title` 类，允许我们向我们的页面添加动态标题和元数据。
- en: When combined with server-side rendering, the metadata and page title will make
    sure that the pages that are indexed by the search engine have the proper meta
    tags set in the document header, and thus increase findability.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当与服务器端渲染结合使用时，元数据和页面标题将确保被搜索引擎索引的页面在文档标题中设置了正确的元标签，从而提高可发现性。
- en: In this section, we will add a service that allows us to define this data, and
    we will update our container components to call in that service after the data
    is loaded from our resolvers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将添加一个服务，允许我们定义这些数据，并且在我们从解析器加载数据后，将更新我们的容器组件以调用该服务。
- en: Creating the UiService
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 UiService
- en: Open a terminal inside the project directory.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开一个终端。
- en: 'Run the following command to generate the `UiService` and register it in the
    `UiModule`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以生成 `UiService` 并将其注册到 `UiModule`：
- en: '[PRE24]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Creating the UiService](img/2.10.jpg)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 UiService](img/2.10.jpg)'
- en: Open the `src/app/ui/services/ui.service.ts` file in your editor.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `src/app/ui/services/ui.service.ts` 文件。
- en: 'Add the following lines to the class definition:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类定义中添加以下行：
- en: '[PRE25]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Import `Title` and `Meta` from `@angular/platform-browser`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `@angular/platform-browser` 中导入 `Title` 和 `Meta`：
- en: '[PRE26]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inject `private title: Title` and `private meta: Meta` in the constructor:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在构造函数中注入 `private title: Title` 和 `private meta: Meta`：'
- en: '[PRE27]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add a class method called `setMetaData` that takes in a property `config`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `setMetaData` 的类方法，该方法接受一个 `config` 属性：
- en: '[PRE28]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the following code to the body of the `setMetaData` property:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `setMetaData` 属性的主体中：
- en: '[PRE29]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Our `UiService` is now ready to be used. We will start by adding it to the components
    in our next section.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `UiService` 现在已准备好使用。我们将在下一节中将它添加到我们的组件中。
- en: Adding Metadata to PostsComponent and ProfileComponent
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将元数据添加到 PostsComponent 和 ProfileComponent
- en: 'We will add the metadata to the `PostsComponent`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将元数据添加到 `PostsComponent`：
- en: Open the `src/app/posts/container/posts/posts.component.ts` file in your editor.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `src/app/posts/container/posts/posts.component.ts` 文件。
- en: 'Import the `UiService` and the `map` operator from `rxjs`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `rxjs` 中导入 `UiService` 和 `map` 操作符：
- en: '[PRE30]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Inside the constructor, inject `private uiService: UiService`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在构造函数中注入 `private uiService: UiService`：'
- en: '[PRE31]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add a class method called `setMetadata()` that accepts a `posts` property:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `setMetadata()` 的类方法，该方法接受一个 `posts` 属性：
- en: '[PRE32]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following to the `setMetaData` method. In this method, we will construct
    the dynamic metadata that we will pass to our `setMetaData` method in the `UiService`:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `setMetaData` 方法中。在这个方法中，我们将构建动态元数据，并将其传递给 `UiService` 中的 `setMetaData`
    方法：
- en: '[PRE33]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Update the first `map` statement in the `ngOnInit` method to the following
    code. This will pass the data we get from the API through the method we defined
    above:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `ngOnInit` 方法中的第一个 `map` 语句，如下所示。这将通过我们定义的方法将我们从 API 获取的数据传递过去：
- en: '[PRE34]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we will add the metadata to the `ProfileComponent`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将元数据添加到 `ProfileComponent`：
- en: Open the `src/app/posts/container/profile/profile.component.ts` file in your
    editor.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `src/app/posts/container/profile/profile.component.ts` 文件。
- en: 'Import the `UiService` and the `map` operator from `rxjs`:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `rxjs` 中导入 `UiService` 和 `map` 操作符：
- en: '[PRE35]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Inside the constructor, inject `private uiService: UiService`:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在构造函数中注入 `private uiService: UiService`：'
- en: '[PRE36]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add a class method called `setMetadata()` that accepts a property `profile`:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `setMetadata()` 的类方法，该方法接受一个 `profile` 属性：
- en: '[PRE37]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following to the `setMetaData` method. In this method, we will construct
    the dynamic metadata that we will pass to our `setMetaData` method in the `UiService`:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `setMetaData` 方法中。在这个方法中，我们将构建动态元数据，并将其传递给 `UiService` 中的 `setMetaData`
    方法：
- en: '[PRE38]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Update the `ngOnInit` method to the following code. This will pass the data
    we get from the API through the method we defined above:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `ngOnInit` 方法，如下所示。这将通过我们定义的方法将我们从 API 获取的数据传递过去：
- en: '[PRE39]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: When you now browse through the application, you should see the title of the
    page update, depending on the page you are visiting.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在浏览应用程序时，你应该会看到页面标题根据你访问的页面进行更新。
- en: 'You can use the **Element Inspector** in Chrome Developer Tools to verify that
    the metadata is being added to the rendered components:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Chrome 开发者工具中的**元素检查器**来验证元数据是否被添加到渲染的组件中：
- en: '![Adding Metadata to PostsComponent and ProfileComponent](img/2.11.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![将元数据添加到 PostsComponent 和 ProfileComponent](img/2.11.jpg)'
- en: In this section, we have added metadata to our `PostsComponent` and `ProfileComponent`.
    We also created a UiService that allows us to define this data.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已将元数据添加到我们的 `PostsComponent` 和 `ProfileComponent`。我们还创建了一个 UiService，允许我们定义这些数据。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this lesson, we have added server-side rendering to our application. We started
    by generating the server app and adding its dependencies. We then added scripts
    to our `package.json` file, before implementing a web server in Express.js. Lastly,
    we saw how to add dynamic metadata to our pages.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，我们为我们的应用程序添加了服务器端渲染。我们首先生成了服务器应用程序并添加了其依赖项。然后我们在 `package.json` 文件中添加了脚本，在
    Express.js 中实现了一个网络服务器。最后，我们看到了如何向我们的页面添加动态元数据。
- en: In the next lesson, we'll configure service workers for our application.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一课中，我们将为我们的应用程序配置服务工作者。
