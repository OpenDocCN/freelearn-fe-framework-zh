["```js\n    sequelize migration:create --migrations-path src/server/migrations --name add-email-password-to-post\n    ```", "```js\n    'use strict';\n    module.exports = {\n      up: (queryInterface, Sequelize) => {\n        return Promise.all([\n          queryInterface.addColumn('Users',\n            'email',\n            {\n              type: Sequelize.STRING,\n              unique : true,\n            }\n          ),\n          queryInterface.addColumn('Users',\n            'password',\n            {\n              type: Sequelize.STRING, \n            }\n          ),\n        ]);\n      },\n      down: (queryInterface, Sequelize) => {\n        return Promise.all([\n          queryInterface.removeColumn('Users', 'email'),\n          queryInterface.removeColumn('Users',\n           'password'),\n        ]);\n      }\n    };\n    ```", "```js\n    password: '$2a$10$bE3ovf9/Tiy/d68bwNUQ0.zCjwtNFq9ukg9h4rhKiHCb6x5ncKife',\n    email: 'test1@example.com',\n    ```", "```js\n    email: DataTypes.STRING,\n    password: DataTypes.STRING,\n    ```", "```js\n    login (\n      email: String!\n      password: String!\n    ): Auth\n    ```", "```js\n    type Auth {\n      token: String\n    }\n    ```", "```js\n    jsonwebtoken package handles everything that's required to sign, verify, and decode JWTs.The important part is that all the passwords for our users are not saved as plain text but are first encrypted using hashing, including a random salt. This generated hash cannot be decoded or decrypted as a plain password, but the package can verify if the password that was sent with the login attempt matches the password hash that was saved on the user. \n    ```", "```js\n    import bcrypt from 'bcrypt';\n    import JWT from 'jsonwebtoken';\n    ```", "```js\n    login(root, { email, password }, context) {\n      return User.findAll({\n        where: {\n          email\n        },\n        raw: true\n      }).then(async (users) => {\n        if(users.length = 1) {\n          const user = users[0];\n          const passwordValid = await\n            bcrypt.compare(password, user.password);\n          if (!passwordValid) {\n            throw new Error('Password does not match');\n          }\n          const token = JWT.sign({ email, id: user.id },\n            JWT_SECRET, {\n            expiresIn: '1d'\n          });\n          return {\n            token\n          };\n        } else {\n          throw new Error(\"User not found\");\n        }\n      });\n    },\n    ```", "```js\n    export JWT_SECRET=\n      awv4BcIzsRysXkhoSAb8t8lNENgXSqBruVlLwd45kGdYje\n      JHLap9LUJ1t9DTdw36DvLcWs3qEkPyCY6vOyNljlh2Er952h2gDzYwG8\n      2rs1qfTzdVIg89KTaQ4SWI1YGY\n    ```", "```js\n    const { JWT_SECRET } = process.env;\n    ```", "```js\n    {\n      \"operationName\":null,\n      \"query\": \"mutation login($email : String!, $password\n        : String!) { \n       login(email: $email, password : $password) { token \n         }}\",\n      \"variables\":{\n        \"email\": \"test1@example.com\",\n        \"password\": \"123456789\"\n      }\n    }\n    ```", "```js\n    {\n      \"data\": {\n        \"login\": {\n          \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e\n            yJlbWFpbCI6InRlc3QxQGV4YW1wbGUuY29tIiwiaWQiOjE\n            sImlhdCI6MTUzNzIwNjI0MywiZXhwIjoxNTM3MjkyNjQzf\n            Q.HV4dPIBzvU1yn6REMv42N0DS0ZdgebFDXUj0MPHvlY\"\n        }\n      }\n    }\n    ```", "```js\n    import { gql, useMutation } from '@apollo/client';\n    export const LOGIN = gql'\n      mutation login($email : String!, $password : \n        String!) {\n        login(email : $email, password : $password) {\n          token\n        }\n      }\n    ';\n    export const useLoginMutation = () => useMutation(LOGIN);\n    ```", "```js\n    import React, { useState } from 'react';\n    import { useLoginMutation } from '../apollo/mutations/login';\n    import Loading from './loading';\n    import Error from './error';\n    ```", "```js\n    const LoginForm = ({ changeLoginState }) => {\n      const [email, setEmail] = useState('');\n      const [password, setPassword] = useState('');\n      const [login, { loading, error }] = \n        useLoginMutation();\n      const onSubmit = (event) => {\n        event.preventDefault();\n        login({\n          update(cache, { data: { login } }) {\n            if(login.token) {\n              localStorage.setItem('jwt', login.token);\n              changeLoginState(true);\n            }\n          }, variables: { email, password }\n        });\n      }\n      return (\n        <div className=\"login\">\n          {!loading && (\n            <form onSubmit={onSubmit}>\n              <label>Email</label>\n              <input type=\"text\" onChange={(event) => \n                setEmail(event.target.value)} />\n              <label>Password</label>\n              <input type=\"password\" onChange={(event) =>\n                setPassword(event.target.value)} />\n              <input type=\"submit\" value=\"Login\" />\n            </form>\n          )}\n          {loading && (<Loading />)}\n          {error && (\n            <Error><p>There was an error logging in!</p>\n            </Error>\n          )}\n        </div>\n      )\n    }\n    ```", "```js\n    const LoginRegisterForm = ({ changeLoginState }) => {\n      return (\n        <div className=\"authModal\">\n          <div>\n            <LoginForm changeLoginState={changeLoginState}\n            />\n          </div>\n        </div>\n      )\n    }\n    export default LoginRegisterForm\n    ```", "```js\n    import LoginRegisterForm from './components/loginregister';\n    ```", "```js\n    const [loggedIn, setLoggedIn] = useState(!!localStorage.getItem('jwt'));\n    ```", "```js\n    {loggedIn && (\n      <div>\n        <Bar changeLoginState={setLoggedIn} />\n        <Feed />\n        <Chats />\n      </div>\n    )}\n    {!loggedIn && <LoginRegisterForm changeLoginState={setLoggedIn} />}\n    ```", "```js\n    signup (\n      username: String!\n      email: String!\n      password: String!\n    ): Auth\n    ```", "```js\n    signup(root, { email, password, username }, context) {\n      return User.findAll({\n        where: {\n          [Op.or]: [{email}, {username}]\n        },\n        raw: true,\n      }).then(async (users) => {\n        if(users.length) {\n          throw new Error('User already exists');\n        } else {\n          return bcrypt.hash(password, 10).then((hash) => {\n            return User.create({\n              email,\n              password: hash,\n              username,\n              activated: 1,\n            }).then((newUser) => {\n              const token = JWT.sign({ email, id:\n                newUser.id }, JWT_SECRET, \n              {\n                expiresIn: '1d'\n              });\n              return {\n                token\n              };\n            });\n          });\n        }\n      });\n    },\n    ```", "```js\n    import { gql, useMutation } from '@apollo/client';\n    export const SIGNUP = gql'\n      mutation signup($email : String!, $password :\n        String!, $username : String!) {\n        signup(email : $email, password : $password, \n          username : $username) {\n          token\n        }\n      }\n    ';\n    export const useSignupMutation = () => useMutation(SIGNUP);\n    ```", "```js\n    import { useSignupMutation } from '../apollo/mutations/signup';\n    ```", "```js\n    const LoginRegisterForm = ({ changeLoginState }) => {\n      const [showLogin, setShowLogin] = useState(true);\n      return (\n        <div className=\"authModal\">\n          {showLogin && (\n            <div>\n              <LoginForm \n                 changeLoginState={changeLoginState} />\n              <a onClick={() => setShowLogin(false)}>\n                Want to sign up? Click here</a>\n            </div>\n          )}\n          {!showLogin && (\n            <div>\n              <RegisterForm \n                changeLoginState={changeLoginState} />\n              <a onClick={() => setShowLogin(true)}>\n                Want to login? Click here</a>\n            </div>\n          )}\n        </div>\n      )\n    }\n    ```", "```js\n    const RegisterForm = ({ changeLoginState }) => {\n      const [email, setEmail] = useState('');\n      const [password, setPassword] = useState('');\n      const [username, setUsername] = useState('');\n      const [signup, { loading, error }] =\n        useSignupMutation();\n      const onSubmit = (event) => {\n        event.preventDefault();\n        signup({\n          update(cache, { data: { login } }) {\n            if(login.token) {\n              localStorage.setItem('jwt', login.token);\n              changeLoginState(true);\n            }\n          }, variables: { email, password, username }\n        });\n      }\n      return (\n        <div className=\"login\">\n          {!loading && (\n            <form onSubmit={onSubmit}>\n              <label>Email</label>\n              <input type=\"text\" onChange={(event) =>\n                setEmail(event.target.value)} />\n              <label>Username</label>\n              <input type=\"text\" onChange={(event) =>\n                setUsername(event.target.value)} />\n              <label>Password</label>\n              <input type=\"password\" onChange={(event) =>\n                setPassword(event.target.value)} />\n              <input type=\"submit\" value=\"Sign up\" />\n            </form>\n          )}\n          {loading && (<Loading />)}\n          {error && (\n            <Error><p>There was an error logging in!</p>\n            </Error>\n          )}\n        </div>\n      )\n    }\n    ```", "```js\n    const AuthLink = (operation, next) => {\n      const token = localStorage.getItem('jwt');\n      if(token) {\n        operation.setContext(context => ({\n          ...context,\n          headers: {\n            ...context.headers,\n            Authorization: 'Bearer ${token}',\n          },\n        }));\n      }\n      return next(operation);\n    };\n    ```", "```js\n    link: from([\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors) {\n          graphQLErrors.map(({ message, locations, path })\n            => \n          console.log('[GraphQL error]: Message: \n            ${message}, Location: \n          ${locations}, Path: ${path}'));\n          if (networkError) {\n            console.log('[Network error]:\n              ${networkError}');\n          }\n        }\n      }),\n      AuthLink,\n      new HttpLink({\n        uri: 'http://localhost:8000/graphql',\n        credentials: 'same-origin',\n      }),\n    ]),\n    ```", "```js\n    npm install --save @graphql-tools/utils\n    ```", "```js\n    import { mapSchema, getDirective, MapperKind } from '@graphql-tools/utils';\n    function authDirective(directiveName) {\n      const typeDirectiveArgumentMaps = {};\n      return {\n        authDirectiveTypeDefs: 'directive \n          @${directiveName} on QUERY | FIELD_DEFINITION |\n            FIELD',\n        authDirectiveTransformer: (schema) =>\n          mapSchema(schema, {\n          [MapperKind.TYPE]: (type) => {\n            const authDirective = getDirective(schema,\n              type, directiveName)?.[0];\n            if (authDirective) {\n              typeDirectiveArgumentMaps[type.name] = \n                authDirective;\n            }\n            return undefined;\n          },\n          [MapperKind.OBJECT_FIELD]: (fieldConfig,\n            _fieldName, typeName) => {\n            const authDirective = getDirective(schema,\n              fieldConfig, directiveName)?.[0] ?? \n                typeDirectiveArgumentMaps[typeName];\n            if (authDirective) {\n              const { resolve = defaultFieldResolver } = \n                fieldConfig;\n              fieldConfig.resolve = function (source, \n                args, context, info) {\n                if (context.user) {\n                  return resolve(source, args, context, \n                    info);\n                }\n                throw new Error(\"You need to be logged  \n                                 in.\");\n              }\n              return fieldConfig;\n            }\n          }\n        }),\n      };\n    }\n    export default authDirective;\n    ```", "```js\n    import authDirective from './auth';\n    ```", "```js\n    const { authDirectiveTypeDefs, authDirectiveTransformer } = authDirective('auth');\n    let executableSchema = makeExecutableSchema({\n        typeDefs: [authDirectiveTypeDefs, Schema],\n        resolvers: Resolvers.call(utils),\n    });\n    executableSchema = authDirectiveTransformer(executableSchema);\n    ```", "```js\n    postsFeed(page: Int, limit: Int): PostFeed @auth\n    ```", "```js\n    directive @auth on QUERY | FIELD_DEFINITION | FIELD\n    ```", "```js\nimport JWT from 'jsonwebtoken';\nconst { JWT_SECRET } = process.env;\n```", "```js\ncontext: async ({ req }) => {\n  const authorization = req.headers.authorization;\n  if(typeof authorization !== typeof undefined) {\n      var search = \"Bearer\";\n      var regEx = new RegExp(search, \"ig\");\n      const token = authorization.replace(regEx,\n        '').trim();\n      return JWT.verify(token, JWT_SECRET, function(err,\n        result) {\n          if(err) {\n              return req;\n          } else {\n              return utils.db.models.User.findByPk(\n                result.id).then((user) => {\n                  return Object.assign({}, req, { user });\n              });\n          }\n      });\n  } else {\n      return req;\n  }\n},\n```", "```js\nif(err) {\n    return req;\n} else {\n    return utils.db.models.User.findByPk(result.id).then((\n      user) => {\n        return Object.assign({}, req, { user });\n    });\n}\n```", "```js\nchats(root, args, context) {\n  return Chat.findAll({\n    include: [{\n      model: User,\n      required: true,\n      through: { where: { userId: context.user.id } },\n    },\n    {\n      model: Message,\n    }],\n  });\n},\n```", "```js\ncurrentUser: User @auth\n```", "```js\ncurrentUser(root, args, context) {\n  return context.user;\n},\n```", "```js\nimport { gql, useQuery } from '@apollo/client';\nexport const GET_CURRENT_USER = gql'\n  query currentUser {\n    currentUser {\n      id\n      username\n      avatar\n    }\n  }\n';\nexport const useCurrentUserQuery = (options) => useQuery(GET_CURRENT_USER, options);\n```", "```js\nconst { data, error, loading, refetch } = useCurrentUserQuery();\nif(loading) {\n    return <Loading />;\n}\n```", "```js\nimport React from 'react';\nimport { ApolloConsumer } from '@apollo/client';\nimport { GET_CURRENT_USER } from '../../apollo/queries/currentUserQuery';\nexport const UserConsumer = ({ children }) => {\n  return (\n    <ApolloConsumer>\n      {client => {\n        const result = client.readQuery({ query:\n          GET_CURRENT_USER });\n        return React.Children.map(children,\n          function(child){\n          return React.cloneElement(child, { user:\n            result?.currentUser ? result.currentUser : null \n              });\n        });\n      }}\n    </ApolloConsumer>\n  )\n}\n```", "```js\n    import React from 'react';\n    import { withApollo } from '@apollo/client/react/hoc';\n    const Logout = ({ changeLoginState, client }) => {\n      const logout = () => {\n        localStorage.removeItem('jwt');\n        changeLoginState(false);\n        client.stop();\n        client.resetStore();\n      }\n      return (\n        <button className=\"logout\" onClick={logout}>Logout\n        </button>\n      );\n    }\n    export default withApollo(Logout);\n    ```", "```js\n    <div className=\"buttons\">\n      <Logout changeLoginState={changeLoginState}/>\n    </div>\n    ```", "```js\n    const Bar = ({ changeLoginState }) => {\n    ```", "```js\n    const handleLogin = (status) => {\n        refetch().then(() => {\n            setLoggedIn(status);\n        }).catch(() => {\n            setLoggedIn(status);\n        });\n    }\n    ```", "```js\n    <Bar changeLoginState={handleLogin} />\n    ```", "```js\n    useEffect(() => {\n      const unsubscribe = client.onClearStore(\n        () => {\n          if(loggedIn){\n            setLoggedIn(false)\n          }\n        }\n      );\n      return () => {\n        unsubscribe();\n      }\n    }, []);\n    ```", "```js\n    import { withApollo } from '@apollo/client/react/hoc';\n    ```", "```js\n    export default withApollo(App);\n    ```", "```js\n    const App = ({ client }) => {\n    ```", "```js\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path,\n          extensions }) => {\n          if(extensions.code === 'UNAUTHENTICATED') {\n            localStorage.removeItem('jwt');\n            client.clearStore()\n          }\n          console.log('[GraphQL error]: Message: \n            ${message}, Location: \n          ${locations}, Path: ${path}');\n        });\n        if (networkError) {\n          console.log('[Network error]: ${networkError}');\n        }\n      }\n    }),\n    ```"]