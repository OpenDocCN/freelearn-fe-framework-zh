["```js\n**src/app/weather/weather.service.ts**\n...\nreturn this.httpClient\n  .get<ICurrentWeatherData>(\n`api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${environment.appId}`\n  ).pipe(map(data => this.transformToICurrentWeather(data)))\n... \n```", "```js\n    Cannot GET /api.openweathermap.org/data/2.5/weather \n    ```", "```js\n    ERROR TypeError: Cannot read property 'city' of undefined \n    ```", "```js\nNetworkError: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'ng:///DynamicTestModule/AppComponent.ngfactory.js'. \n```", "```js\n[object ErrorEvent] thrown \n```", "```js\n    **package.json**\n    ...\n      \"scripts\": {\n      ...\n      \"test:debug\": \"ng test --source-map\",\n      ...\n    } \n    ```", "```js\n**src/app/home/home.component.ts**\n...\nimport { AuthService } from '../auth.service'\n...\nexport class HomeComponent implements OnInit {\n  displayLogin = true\n  constructor(private authService: AuthService) {}\n  ngOnInit() {\n    this.displayLogin = !this.authService.isAuthenticated()\n  }\n} \n```", "```js\n    > this.authService.isAuthenticated() true \n    ```", "```js\n    > this.displayLogin = false false \n    ```", "```js\n    **.vscode/launch.json**\n    {\n      \"version\": \"0.2.0\",\n      \"configurations\": [\n        {\n          \"name\": \"Debug npm start with Chrome\",\n          \"type\": \"chrome\",\n          \"request\": \"launch\",\n          \"url\": \"http://localhost:5000/#\",\n          \"webRoot\": \"${workspaceRoot}\",\n          \"runtimeArgs\": [\n            \"--remote-debugging-port=9222\"\n          ],\n          \"sourceMaps\": true,\n          \"preLaunchTask\": \"npm: start\"\n        },\n        {\n          \"name\": \"Debug npm start with Edge\",\n          \"type\": \"edge\",\n          \"request\": \"launch\",\n          \"version\": \"dev\",\n          \"url\": \"http://localhost:5000/#\",\n          \"webRoot\": \"${workspaceRoot}\",\n          \"sourceMaps\": true,\n          \"preLaunchTask\": \"npm: start\"\n        },\n        {\n          \"name\": \"Debug npm test with Chrome\",\n          \"type\": \"chrome\",\n          \"request\": \"launch\",\n          \"url\": \"http://localhost:9876/debug.html\",\n          \"webRoot\": \"${workspaceRoot}\",\n          \"runtimeArgs\": [\n            \"--remote-debugging-port=9222\"\n          ],\n          \"sourceMaps\": true,\n          \"preLaunchTask\": \"npm: test\"\n        },\n        {\n          \"name\": \"Debug npm test with Edge\",\n          \"type\": \"edge\",\n          \"request\": \"launch\",\n          \"version\": \"dev\",\n          \"url\": \"http://localhost:9876/debug.html\",\n          \"webRoot\": \"${workspaceRoot}\",\n          \"sourceMaps\": true,\n          \"preLaunchTask\": \"npm: test\"\n        },\n        {\n          \"name\": \"npm run e2e\",\n          \"type\": \"node\",\n          \"request\": \"launch\",\n          \"program\": \"${workspaceRoot}/node_modules/protractor/bin/protractor\",\n          \"protocol\": \"inspector\",\n          \"args\": [\n            \"${workspaceRoot}/protractor.conf.js\"\n          ]\n        }\n      ]\n    } \n    ```", "```js\n\"angularCompileOptions\": {\n  \"enableIvy\": false\n} \n```", "```js\n    **src/app/reducers/index.ts**\n    export function logger(reducer: ActionReducer<AppState>): ActionReducer<AppState> {\n      return (state, action) => {\n        const result = reducer(state, action)\n        console.groupCollapsed(action.type)\n        console.log('prev state', state)\n        console.log('action', action)\n        console.log('next state', result)\n        console.groupEnd()\n        return result\n      }\n    } \n    ```", "```js\n    **src/app/reducers/index.ts**\n    export const metaReducers: MetaReducer<AppState>[] =\n    !environment.production\n      ? [logger]\n      : [] \n    ```", "```js\n$ npx ng add @ngrx/store-devtools \n```", "```js\nthis.search.valueChanges \n  .pipe( \n **tap(console.log),**\n    debounceTime(1000), \n    filter(() => !this.search.invalid), \n    tap((searchValue: string) => this.doSearch(searchValue)) \n  ).subscribe() \n```", "```js\nthis.search.valueChanges \n  .pipe( \n    debounceTime(1000), \n    **tap(console.log),** \n    filter(() => !this.search.invalid), \n    tap((searchValue: string) => this.doSearch(searchValue)) \n  ).subscribe() \n```", "```js\nthis.search.valueChanges \n  .pipe( \n    debounceTime(1000), \n    filter(() => !this.search.invalid), \n    **tap(console.log),** \n    tap((searchValue: string) => this.doSearch(searchValue)) \n  ).subscribe() \n```", "```js\nthis.search.valueChanges \n  .pipe( \n    debounceTime(1000), \n    tap(debouncedData => \n      console.log('debounced: ', debouncedData)\n    ), \n    filter(() => !this.search.invalid), \n    tap(debouncedAndFilteredData => \n      console.log(\n        'debounced + filtered: ', \n        debouncedAndFilteredData\n      )\n    ), \n    tap((searchValue: string) => this.doSearch(searchValue)) \n  ).subscribe() \n```"]