- en: Classical Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经典模式
- en: TypeScript is an object-oriented programming language and, as such, we can leverage
    decades of knowledge on object-oriented architecture. In this chapter, we'll explore
    some of the most useful object-oriented design patterns and learn how to apply
    them in an Angular way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是一种面向对象的编程语言，因此我们可以利用几十年关于面向对象架构的知识。在本章中，我们将探索一些最有用的面向对象设计模式，并学习如何在Angular中应用它们。
- en: Angular is, by itself, an object-oriented framework, and it forces you to do
    most of your development in certain ways. For example, you are required to have
    components, services, pipes, and so on. Forcing these building blocks upon you
    contributes to building a good architecture, very much like what the Zend framework
    does for PHP, or Ruby on Rails for Ruby. Of course, frameworks are there to make
    your life easier and speed up development time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular本身就是一个面向对象的框架，它强制你以某种方式进行大部分开发。例如，你需要有组件、服务、管道等。强制这些构建块对你有助于构建良好的架构，就像Zend框架对PHP或Ruby
    on Rails对Ruby所做的那样。当然，框架的存在是为了让你的生活更轻松，加快开发时间。
- en: While the Angular way of designing things is way above average, we can always
    do better. I do not claim that what I present in this chapter is the ultimate
    design, or that you will be able to use it to resolve anything from bakery one-pagers
    to dashboards for the Mars One mission—such a design doesn't exist, unfortunately—but
    it'll definitively improve your toolbelt.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Angular的设计方式远远超出了平均水平，但我们总是可以做得更好。我并不是说我在本章中提出的是最终设计，或者你将能够用它来解决从面包店网页到火星一号任务的仪表板的任何问题——不幸的是，这样的设计并不存在——但它肯定会丰富你的工具库。
- en: 'In this chapter, we''ll see the following classical patterns:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到以下经典模式：
- en: Components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: Singletons
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单例
- en: Observers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者
- en: Components
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: 'In the first three chapters of this book, we saw a whole lot of Angular components.
    The Angular `Component` is one of the main building blocks of an Angular application
    with, for example, `services`, `pipes`, and so on. As a reminder, a TypeScript
    class becomes an Angular component using the following annotation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的前三章中，我们看到了大量的Angular组件。Angular `Component`是Angular应用程序的主要构建块之一，例如`services`，`pipes`等。作为提醒，TypeScript类使用以下注解成为Angular组件：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, the `AppComponent` class is supercharged with the behavior of the`selector`,
    `templateUrl`, and `styleUrls` Angular components.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`AppComponent`类通过`selector`，`templateUrl`和`styleUrls` Angular组件的行为得到了增强。
- en: Singleton
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单例模式
- en: Another handy pattern to use for frontend applications is the singleton. The
    singleton ensures that only one instance of a given object exists in your program.
    Moreover, it provides a global point of access to the object.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于前端应用程序的另一个方便的模式是单例模式。单例模式确保你的程序中只存在一个给定对象的实例。此外，它提供了对对象的全局访问点。
- en: 'Here''s what it looks like in practice:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上看起来是这样的：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have a class that has a `private static instance:MySingleton` attribute.
    Then, we have a private constructor that makes the following fail:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个具有`private static instance:MySingleton`属性的类。然后，我们有一个私有构造函数，使以下操作失败：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that it fails because your TypeScript transpiler complains about the visibility.
    However, if you transpile the `MySingleton` class to JavaScript and import it
    into another TypeScript project, you'll be able to use the *new* operator because
    the transpiled TypeScript  doesn't have any visibility.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它失败是因为你的TypeScript转译器对可见性提出了抱怨。然而，如果你将`MySingleton`类转译为JavaScript并将其导入到另一个TypeScript项目中，你将能够使用*new*运算符，因为转译后的TypeScript没有任何可见性。
- en: 'The problem with this fairly simple implementation of the singleton pattern
    is concurrency. Indeed, if two processes hit `getInstance():MySingleton` at the
    same time, then we''ll have two instances of`MySingleton` on the program. To be
    sure that doesn''t happen, we can use a technique known as early instantiation:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种相当简单的单例模式实现的问题在于并发。确实，如果两个进程同时调用`getInstance():MySingleton`，那么程序中将会有两个`MySingleton`的实例。为了确保这种情况不会发生，我们可以使用一种称为早期实例化的技术：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'While you can implement your singleton in TypeScript, you can also leverage
    the Angular way of creating a singleton: services! Indeed, in Angular, services
    are only instantiated once and injected to any components needing it. Here''s
    an example of a service and injection via the `NgModule` we have seen before in
    this book:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以在TypeScript中实现你的单例，但你也可以利用Angular创建单例的方式：服务！确实，在Angular中，服务只被实例化一次，并且被注入到任何需要它的组件中。下面是一个通过本书之前看到的`NgModule`进行服务和注入的示例：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding code, we have the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们有以下内容：
- en: '`APIService`, which displays the `@Injectable()` annotation that makes it,
    well, injectable. Also, the `APIService` has an`increment:number` attribute that
    is incremented every time a new instance is created. With `increment:number` being
    static, it''ll tell us exactly how many instances there are in our program. Finally, `APIService`
    has a `toString:string` method that returns the current instance number.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`APIService`显示了`@Injectable()`注解，使其可以被注入。此外，`APIService`有一个`increment:number`属性，每次创建新实例时都会递增。由于`increment:number`是静态的，它将准确告诉我们程序中有多少个实例。最后，`APIService`有一个`toString:string`方法，返回当前实例编号。'
- en: '`AppComponent` is a classical component that receives an injection of`APIService`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppComponent`是一个经典组件，它接收了`APIService`的注入。'
- en: '`OtherComponent` is another classical component that receives an injection
    of`APIService`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OtherComponent`是另一个经典组件，它接收了`APIService`的注入。'
- en: '`/app.module.ts` contains`NgModule`. In `NgModule`, most of the declarations
    shown here have already been discussed in this book. The novelty comes from the
    `providers: [APIService]` part. Here, we declare a provider for`APIService` itself.
    As `APIService` doesn''t do anything too crazy, it suffices itself and can be
    provided by using a reference to the class. More complex services that, for example,
    themselves require injection, need custom-tailored providers.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/app.module.ts`包含了`NgModule`。在`NgModule`中，这里显示的大部分声明已经在本书中讨论过。新颖之处来自于`providers:
    [APIService]`部分。在这里，我们为`APIService`本身声明了一个提供者。由于`APIService`并没有做什么太疯狂的事情，它本身就足够了，并且可以通过引用类来提供。而更复杂的服务，例如它们自己需要注入的服务，需要定制的提供者。'
- en: 'Now, if we navigate to these two components, the result would be the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们导航到这两个组件，结果将如下：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This proves that only an instance has been created and the same instance has
    been injected into both components. Hence, we have a singleton. However, this
    singleton, while convenient, isn''t really safe. Why you ask? Well, `APIService`
    can also be provided at the component level, like so:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明只创建了一个实例，并且相同的实例已被注入到两个组件中。因此，我们有一个单例。然而，这个单例虽然方便，但并不是真正安全的。你为什么这样问？嗯，`APIService`也可以在组件级别提供，就像这样：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In such a case, two separate instances would be created, resulting in the following
    output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将创建两个单独的实例，导致以下输出：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Consequently, using Angular services, you can't enforce the singleton pattern,
    contrary to its plain TypeScript counterpart. Also, the plain TypeScript would
    be an order of magnitude faster than the Angular services, as we skip the injection
    process altogether. The exact number depends heavily on the CPU/RAM of your machine.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用Angular服务，你无法强制使用单例模式，与其普通的TypeScript对应相反。此外，普通的TypeScript比Angular服务快上一个数量级，因为我们完全跳过了注入过程。确切的数字严重依赖于你的机器的CPU/RAM。
- en: The only questions left to answer in the case of the singleton is when to use
    it or which implementation performs the best. The singleton enforces only one
    instance of a given class in your program. Consequently, it's a very good fit
    for any communication with a backend or any hardware access. For example, in the
    case of communication with a backend, it might be desirable to have only one `APIService`
    handling API keys, API limits, and `csrf` tokens across the board without having
    to make sure we pass the same instance of the service throughout all our components,
    model, and so on. In the case of hardware access, you might want to be sure that
    you have only one connection open to the webcam or the microphone of our users
    so that you can properly release them when you are done with them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在单例的情况下，唯一剩下的问题是何时使用它或哪种实现效果最好。单例只强制在程序中给定类的一个实例。因此，它非常适合与后端的任何通信或任何硬件访问。例如，在与后端的通信的情况下，可能希望只有一个`APIService`处理API密钥、API限制和整个板块的`csrf`令牌，而无需确保我们在所有组件、模型等中传递相同的服务实例。在硬件访问的情况下，您可能希望确保您只打开一个与用户的网络摄像头或麦克风的连接，以便在完成后可以正确释放它们。
- en: 'On the performance side, here are the results, in milliseconds, for each implementation.
    I ran each version 100 times, excluded the outliers (best and worst 5%), and averaged
    the remaining 90 calls in the following table:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能方面，以下是每种实现的结果，以毫秒为单位。我运行了每个版本100次，排除了异常值（最好和最差的5%），并对剩下的90次调用进行了平均，如下表所示：
- en: '| **Singleton Lazy** | **Singleton Early** | **Service Injection** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **单例懒加载** | **单例早期加载** | **服务注入** |'
- en: '| 196ms | 183ms | 186ms |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 196毫秒 | 183毫秒 | 186毫秒 |'
- en: 'The code I ran was the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我运行的代码如下：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For the experiment with the service injection, I had to add the following line
    in `app.module.ts: providers: [SingletonService]`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '对于服务注入的实验，我不得不在`app.module.ts`中添加以下行：`providers: [SingletonService]`。'
- en: To my surprise, the results are fairly close from one approach to the other.
    The singleton implementation leveraging the early instantiation performs only
    2% better than the more practical service injection. The singleton with the lazy
    instantiation is closing the podium with 196 ms (7% worse than singleton early
    instantiation and 5% worse than service injection).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 令我惊讶的是，两种方法的结果相差不大。早期实例化的单例实现仅比更实用的服务注入好2%。懒加载的单例排名第三，用时196毫秒（比早期实例化的单例差7%，比服务注入差5%）。
- en: Factory method
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工厂方法
- en: 'Let''s assume that we have a `User` class with two private variables: `lastName:string`
    and `firstName:string`. In addition, this simple class proposes the `hello` method that
    prints `"Hi I am", this.firstName, this.lastName`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个带有两个私有变量`lastName:string`和`firstName:string`的`User`类。此外，这个简单的类提供了`hello`方法，打印出`"Hi
    I am", this.firstName, this.lastName`：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, consider that we receive users through a JSON API. It''ll more than likely
    look something like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑到我们通过JSON API接收用户。它很可能看起来像这样：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With the following snippet, we can create a `User`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下代码片段，我们可以创建一个`User`：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Until now, the TypeScript compiler doesn''t complain, and it executes smoothly.
    It works because the `parse` method returns `any` (for example, the TypeScript
    equivalent of the Java object). Sure enough, we can convert the `any` into `User`.
    However, `userFromJSONAPI.hello();` will yield the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，TypeScript编译器没有抱怨，并且执行顺利。这是因为`parse`方法返回`any`（例如，Java对象的TypeScript等价物）。当然，我们可以将`any`转换为`User`。然而，`userFromJSONAPI.hello();`将产生以下结果：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Why? Well, the left-hand side of assignation is defined as `User`, sure, but
    it'll be erased when we transpile it to JavaScript.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？好吧，赋值的左侧被定义为`User`，但当我们将其转译为JavaScript时，它将被抹去。
- en: 'The type-safe TypeScript way to do it would be as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中进行类型安全的方式如下：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Interestingly enough, the type of function won't help you either. In both cases,
    it'll display `object` instead of `User`, as the very concept of user doesn't
    exist in JavaScript.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，函数的类型也不会帮助你。在这两种情况下，它都会显示`object`而不是`User`，因为JavaScript中并不存在用户的概念。
- en: While the direct type-safe approach works, it isn't very expansible nor reusable.
    Indeed, the map callback method would have to be duplicated everywhere you receive
    a JSON user. The most convenient way to do that is through the `Factory` pattern.
    A Factory is used for objects without exposing the instantiation logic to the
    client.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直接的类型安全方法可以工作，但它并不是非常可扩展或可重用的。事实上，地图回调方法必须在接收JSON用户的任何地方重复。最方便的方法是通过`Factory`模式来做。工厂用于创建对象，而不会将实例化逻辑暴露给客户端。
- en: 'If we were to have a factory to create a user, it would look like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要创建一个用户的工厂，它会是这样的：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we have a `static` method, named `buildUser`, that receives a JSON object
    and take all the required value inside the JSON object to invoke, with the right
    attributes, a hypothetical `User` constructor. The method is static, like all
    the methods of such a factory are. Indeed, we don't need to save any states or
    instance-bound variables in a factory; we only encapsulate away the gruesome creation
    of users. Note that your factory will likely be shared with the rest of your POTOs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个名为`buildUser`的`static`方法，它接收一个JSON对象，并从JSON对象中获取所有必需的值，以调用一个假设的`User`构造函数。这个方法是静态的，就像工厂的所有方法一样。事实上，在工厂中我们不需要保存任何状态或实例绑定的变量；我们只是将用户的创建封装起来。请注意，你的工厂可能会与你的POTO的其余部分共享。
- en: Observer
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察者
- en: The observable pattern that allows an object, called the subject, to keep track
    of other objects, called observers, is interested in the subject state. When the
    subject state changes, it notifies its observers. The mechanism behind this is
    really simple.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 允许一个名为主题的对象跟踪其他对象（称为观察者）对主题状态感兴趣的可观察模式。当主题状态改变时，它会通知观察者。这背后的机制非常简单。
- en: 'Let''s take a look at the following observer/subject implementation in pure
    TypeScript (no Angular 2 or framework of any kind, just Typescript). First, I
    defined an `Observer` interface that any concrete implementation will have to
    implement:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下在纯TypeScript中（没有任何Angular 2或任何框架，只是TypeScript）实现的观察者/主题实现。首先，我定义了一个`Observer`接口，任何具体的实现都必须实现：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This interface only defines the `notify()` method. This method will be called
    by the subject (the object being observed by the observer) when its state changes.
    Then, I have an implementation of this interface, named `HumanObserver`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口只定义了`notify()`方法。当被观察对象的状态改变时，主题（观察者观察的对象）将调用这个方法。然后，我有一个这个接口的实现，名为`HumanObserver`：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This implementation leverages the TypeScript property constructor, where you
    can define the property of your class inside the constructor. This notation is
    100% equivalent to the following while being shorter:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现利用了TypeScript属性构造函数，其中你可以在构造函数内部定义类的属性。这种表示法与以下表示法完全等效，但更短：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Following the definitions of the `Observer` interface and the `HumanObserver`,
    we can move on to the subject. I defined a subject class that manages the observers.
    This class has three methods: `attachObserver`, `detachObserver`, and `notifyObservers`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了`Observer`接口和`HumanObserver`之后，我们可以继续进行主题。我定义了一个管理观察者的主题类。这个类有三个方法：`attachObserver`，`detachObserver`和`notifyObservers`：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `attachObserver` method pushes new observers into the `observers` property,
    while the `detachObserver` removes them.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`attachObserver`方法将新的观察者推入`observers`属性中，而`detachObserver`则将它们移除。'
- en: Subject implementations are often found with attach/detach, subscribe/unsubscribe,
    or add/delete prefixes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 主题实现通常以attach/detach，subscribe/unsubscribe或add/delete前缀的形式出现。
- en: 'The last method is `notifyObservers`, which iterates over the observers and
    invokes their notify method. The last class allowing us to showcase the observable
    mechanism is IMDB, which extends `subject`. It will notify observers when a movie
    gets added:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个方法是`notifyObservers`，它遍历观察者并调用它们的通知方法。允许我们展示可观察机制的最后一个类是IMDB，它扩展了`subject`。它将在添加电影时通知观察者：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To make the pieces communicate with each other, we have to: create a `Subject`,
    create an `Observer`, attach the `Observer` to the `Subject`, and change the state
    of the subject via the `addMovie` method.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些部分彼此通信，我们必须：创建一个`Subject`，创建一个`Observer`，将`Observer`附加到`Subject`，并通过`addMovie`方法改变主题的状态。
- en: 'More concretely, here''s an implementation of the previous list:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，以下是先前列表的实现：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To speed up our development process, we will install `ts-node`. This node package
    will transpile TypeScript files into JavaScript and resolve the dependencies between
    said files.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快我们的开发过程，我们将安装`ts-node`。这个node包将把TypeScript文件转译成JavaScript，并解决这些文件之间的依赖关系。
- en: 'The output is `Mathieu Notified`. We can try to detach `mathieu` and add another
    movie:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是`Mathieu Notified`。我们可以尝试分离`mathieu`并添加另一部电影：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The output is still `Mathieu Notified`, which happens after we add the `Jaws`
    movie. The second movie addition (`Die Hard`) doesn't trigger a `Mathieu Notified`
    print to the console as it has been detached.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 输出仍然是`Mathieu Notified`，这发生在我们添加`Jaws`电影之后。第二部电影（`Die Hard`）的添加并不会触发控制台打印`Mathieu
    Notified`，因为它已经被分离。
- en: TypeScript observables with parameters
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带参数的TypeScript可观察对象
- en: 'So, this is a basic implementation of the observer pattern. Nevertheless, it
    is not fully fledged as the `HumanObserver` only knows that something has changed
    in one of the subjects it observes. Consequently, it has to iterate over all of
    the subjects it observes and check their previous state against their current
    state to identify what has changed and where. A better way to go about this would
    be to modify the `notify` of the `Observer` so that it contains more information.
    For example, we could add optional parameters as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是观察者模式的一个基本实现。然而，它并不完全成熟，因为`HumanObserver`只知道它观察的主题中的某些东西发生了变化。因此，它必须遍历它观察的所有主题，并检查它们的先前状态与当前状态，以确定发生了什么变化以及在哪里发生了变化。更好的方法是修改`Observer`的`notify`，使其包含更多信息。例如，我们可以添加可选参数如下：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `notify()` method now accepts an optional value parameter, which characterizes
    the new state of the `subject` object. We can also receive a reference to the
    `Subject` object itself. This is useful in case the observer observes many subjects.
    In such a case, we need to be able to differentiate them. Accordingly, we have
    to change the Subject and IMDB a bit so that they use the new notify:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`notify()`方法现在接受一个可选的值参数，用于描述`subject`对象的新状态。我们还可以接收到`Subject`对象本身的引用。这在观察者观察多个主题时非常有用。在这种情况下，我们需要能够区分它们。因此，我们必须稍微更改Subject和IMDB，以便它们使用新的通知：'
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, the output is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输出如下：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is way more expressive than `Mathieu Notified`. Now, when we use `Observer`
    patterns for asynchronous programming, what we really mean is that we ask for
    something, and we do not want to wait to do anything during its processing. Instead,
    what we do is subscribe to the response event to be notified when the response
    comes. In the following sections, we will use the same pattern and mechanisms
    with Angular.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这比`Mathieu Notified`更具表现力。现在，当我们使用观察者模式进行异步编程时，我们真正的意思是要求某些东西，并且在其处理过程中不想等待做任何事情。相反，我们订阅响应事件以在响应到来时得到通知。在接下来的章节中，我们将使用相同的模式和机制与Angular一起使用。
- en: Observing HTTP responses
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察HTTP响应
- en: 'In this section, we will build a JSON API that returns movies according to
    search parameters. Instead of simply waiting for the HTTP query to complete, we
    will leverage the power of the observer design pattern to let the user know we
    are waiting and, if need be, execute other processes. First things first: we need
    a data source for our IMDB-like application. Building and deploying a server-side
    application that''s able to interpret an HTTP query and send results accordingly
    is relatively simple nowadays. However, this falls outside the scope of this book.
    Instead, what we will do is fetch a static JSON file hosted at [http://bit.ly/mastering-angular2-marvel](http://bit.ly/mastering-angular2-marvel).
    This file contains some of the latest movies of the Marvel Cinematic Universe.
    It contains a JSON array describing 14 movies as JSON objects. Here''s the first
    movie:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个JSON API，根据搜索参数返回电影。我们不仅仅是等待HTTP查询完成，而是利用观察者设计模式的力量，让用户知道我们正在等待，并且如果需要，执行其他进程。首先，我们需要一个数据源来构建我们的类似IMDB的应用程序。构建和部署一个能够解释HTTP查询并相应发送结果的服务器端应用程序现在相对简单。然而，这超出了本书的范围。相反，我们将获取托管在[http://bit.ly/mastering-angular2-marvel](http://bit.ly/mastering-angular2-marvel)的静态JSON文件。该文件包含漫威电影宇宙的一些最新电影。它包含一个描述14部电影的JSON数组作为JSON对象。这是第一部电影：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can find standard information that an IMDB-like application would provide,
    such as release year, running time, and so on. Our goal is to design an asynchronous
    JSON API making each field searchable.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以找到类似IMDB的应用程序提供的标准信息，例如发行年份，播放时间等。我们的目标是设计一个异步的JSON API，使每个字段都可以搜索。
- en: 'As we are fetching a static JSON file (we will not insert, update, or delete
    any elements), acceptable API calls would be as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在获取一个静态的JSON文件（我们不会插入、更新或删除任何元素），可接受的API调用如下：
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The first call simply fetches the movie with `movie_id = 1`; the second call
    is a more generic one that works in any field. To prevent the API consumer from
    requesting fields that don't exist in our movie, we restrict the field values
    using an enumerator defined inside a `Movie` class. Now, the important part here
    is the actual return of these calls. Indeed, they will trigger an observable mechanism
    wherein the caller will attach him/herself to an observable HTTP call. Then, when
    the HTTP call is complete and the results have filtered according to the query
    parameter, the callee will notify the caller about the response. Consequently,
    the caller does not have to wait for the callee (`IMDBAPI`), as they will be notified
    when the request is complete.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个调用只是获取`movie_id = 1`的电影；第二个调用是一个更通用的调用，可以在任何字段中工作。为了防止API使用者请求我们电影中不存在的字段，我们使用在`Movie`类内部定义的枚举器限制字段值。现在，这里的重要部分是这些调用的实际返回。实际上，它们将触发一个可观察机制，在这种机制中，调用者将附加到一个可观察的HTTP调用。然后，当HTTP调用完成并根据查询参数过滤结果时，被调用者将通知调用者有关响应。因此，调用者不必等待被调用者（`IMDBAPI`），因为他们将在请求完成时收到通知。
- en: Implementation
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施
- en: 'Let''s dive into the implementation. First, we will need to create a new Angular
    project using the Angular CLI:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入实现。首先，我们需要使用Angular CLI创建一个新的Angular项目：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we will need a model to represent the movie concept. We will generate
    this class using the `ng g class` models/Movie command line. Then, we can add
    a constructor defining all the private fields of the `Movie` models, which is
    the same as we did for the getters and setters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个模型来表示电影概念。我们将使用`ng g class` models/Movie命令行生成这个类。然后，我们可以添加一个构造函数，定义`Movie`模型的所有私有字段，这与我们为getter和setter所做的相同。
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, each field of the movie JSON definition is mapped into a private member
    of the `Movie` class using the constructor property declaration
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，电影JSON定义的每个字段都使用构造函数属性声明映射到`Movie`类的私有成员
- en: of TypeScript. We also override the `toString` method so that it prints every
    field. In the `toString` method, we take advantage of multi-line strings provided
    by the backtick ([PRE30]
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: of TypeScript. We also override the `toString` method so that it prints every
    field. In the `toString` method, we take advantage of multi-line strings provided
    by the backtick ([PRE30]
- en: IMDBAPI.fetchOneById(1);
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: IMDBAPI.fetchOneById(1);
- en: IMDBAPI.fetchByFields(MovieFields.release_date, 2015);
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: IMDBAPI.fetchByFields(MovieFields.release_date, 2015);
- en: '[PRE31]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: import { Injectable } from '@angular/core';
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: import { Injectable } from '@angular/core';
- en: import { Http }  from '@angular/http';
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: import { Http }  from '@angular/http';
- en: import { Movie, MovieFields } from '../models/movie';
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: import { Movie, MovieFields } from '../models/movie';
- en: import { Observable } from 'rxjs/Rx';
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: import { Observable } from 'rxjs/Rx';
- en: import 'rxjs/Rx';
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: import 'rxjs/Rx';
- en: '@Injectable()'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '@Injectable()'
- en: export class IMDBAPIService {
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: export class IMDBAPIService {
- en: private moviesUrl:string = "app/marvel-cinematic-universe.json";
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: private moviesUrl:string = "app/marvel-cinematic-universe.json";
- en: 'constructor(private http: Http) { }'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: Http) { }'
- en: /**
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Return an Observable to a Movie matching id'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '* 返回一个匹配id的Movie的Observable'
- en: '* @param  {number}           id'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param  {number}           id'
- en: '* @return {Observable<Movie>}'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {Observable<Movie>}'
- en: '*/'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public fetchOneById(id:number):Observable<Movie>{
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: public fetchOneById(id:number):Observable<Movie>{
- en: console.log('fetchOneById', id);
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('fetchOneById', id);
- en: return this.http.get(this.moviesUrl)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 返回this.http.get(this.moviesUrl)
- en: /**
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Transforms the result of the HTTP get, which is observable'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '* Transforms the result of the HTTP get, which is observable'
- en: '* into one observable by item.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '* into one observable by item.'
- en: '*/'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .flatMap(res => res.json().movies)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: .flatMap(res => res.json().movies)
- en: /**
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Filters movies by their movie_id'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '* Filters movies by their movie_id'
- en: '*/'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .filter((movie:any)=>{
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: .filter((movie:any)=>{
- en: console.log("filter", movie);
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("filter", movie);
- en: return (movie.movie_id === id)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: return (movie.movie_id === id)
- en: '})'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: /**
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie item to the Movie Model'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '* 将JSON电影项映射到Movie模型'
- en: '*/'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .map((movie:any) => {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: .map((movie:any) => {
- en: console.log("map", movie);
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("map", movie);
- en: return new Movie(
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: return new Movie(
- en: movie.movie_id,
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: movie.movie_id,
- en: movie.title,
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: movie.title,
- en: movie.phase,
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: movie.phase,
- en: movie.category_name,
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: movie.category_name,
- en: movie.release_year,
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: movie.release_year,
- en: movie.running_time,
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: movie.running_time,
- en: movie.rating_name,
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: movie.rating_name,
- en: movie.disc_format_name,
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: movie.disc_format_name,
- en: movie.number_discs,
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: movie.number_discs,
- en: movie.viewing_format_name,
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: movie.viewing_format_name,
- en: movie.aspect_ratio_name,
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: movie.aspect_ratio_name,
- en: movie.status,
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: movie.status,
- en: movie.release_date,
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: movie.release_date,
- en: movie.budget,
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: movie.budget,
- en: movie.gross,
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: movie.gross,
- en: movie.time_stamp
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: movie.time_stamp
- en: );
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '});'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE32]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: import { Injectable } from '@angular/core';
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: import { Injectable } from '@angular/core';
- en: import { Http } from '@angular/http';
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: import { Http } from '@angular/http';
- en: import { Movie, MovieFields } from '../models/movie';
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: import { Movie, MovieFields } from '../models/movie';
- en: import { Observable } from 'rxjs/Rx';
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: import { Observable } from 'rxjs/Rx';
- en: import 'rxjs/Rx';
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: import 'rxjs/Rx';
- en: '@Injectable()'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '@Injectable()'
- en: export class IMDBAPIService {
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: export class IMDBAPIService {
- en: private moviesUrl:string = "app/marvel-cinematic-universe.json";
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: private moviesUrl:string = "app/marvel-cinematic-universe.json";
- en: 'constructor(private http: Http) { }'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: Http) { }'
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'movie.movie_id(25) TypeError: movie.movie_id is not a function at Object.<anonymous>'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 'movie.movie_id(25) TypeError: movie.movie_id is not a function at Object.<anonymous>'
- en: 'movie: Movie = JSON.parse(`{'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'movie: Movie = JSON.parse(`{'
- en: '"movie_id" : 1,'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '"movie_id" : 1,'
- en: '"title" : "Iron Man",'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '"title" : "Iron Man",'
- en: '"phase" : "Phase One: Avengers Assembled",'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '"phase" : "Phase One: Avengers Assembled",'
- en: '"category_name" : "Action",'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '"category_name" : "Action",'
- en: '"release_year" : 2015,'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '"release_year" : 2015,'
- en: '"running_time" : 126,'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '"running_time" : 126,'
- en: '"rating_name" : "PG-13",'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '"rating_name" : "PG-13",'
- en: '"disc_format_name" : "Blu-ray",'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '"disc_format_name" : "Blu-ray",'
- en: '"number_discs" : 1,'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '"number_discs" : 1,'
- en: '"viewing_format_name" : "Widescreen",'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '"viewing_format_name" : "Widescreen",'
- en: '"aspect_ratio_name" : " 2.35:1",'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '"aspect_ratio_name" : " 2.35:1",'
- en: '"status" : 1,'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '"status" : 1,'
- en: '"release_date" : "May 2, 2008",'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '"release_date" : "May 2, 2008",'
- en: '"budget" : "140,000,000",'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '"budget" : "140,000,000",'
- en: '"gross" : "318,298,180",'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '"gross" : "318,298,180",'
- en: '"time_stamp" : "2015-05-03"'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '"time_stamp" : "2015-05-03"'
- en: '}`);'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '}`);'
- en: Console.log(movie.movie_id(25));
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Console.log(movie.movie_id(25));
- en: '[PRE34]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: import{ bootstrap } from '@angular/platform-browser-dynamic';
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: import{ bootstrap } from '@angular/platform-browser-dynamic';
- en: import{ enableProdMode } from '@angular/core';
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: import{ enableProdMode } from '@angular/core';
- en: import{ AngularObservableAppComponent, environment } from './app/';
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: import{ AngularObservableAppComponent, environment } from './app/';
- en: import{ IMDBAPIService } from './app/services/imdbapi.service';
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: import{ IMDBAPIService } from './app/services/imdbapi.service';
- en: import { HTTP_PROVIDERS } from '@angular/http';
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: import { HTTP_PROVIDERS } from '@angular/http';
- en: if(environment.production) {
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: if(environment.production) {
- en: enableProdMode();
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: enableProdMode();
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE35]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: bootstrap(AngularObservableAppComponent,
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap(AngularObservableAppComponent,
- en: '[IMDBAPIService , HTTP_PROVIDERS]'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[IMDBAPIService , HTTP_PROVIDERS]'
- en: );
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: import { Component } from '@angular/core';
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: import { Component } from '@angular/core';
- en: import { IMDBAPIService } from './services/imdbapi.service';
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: import { IMDBAPIService } from './services/imdbapi.service';
- en: import { Movie } from './models/movie';
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: import { Movie } from './models/movie';
- en: '@Component({'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '@Component({'
- en: 'moduleId: module.id,'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'moduleId: module.id,'
- en: 'selector: ''angular-observable-app'','
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'selector: ''angular-observable-app'','
- en: 'templateUrl: ''angular-observable.component.html'','
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'templateUrl: ''angular-observable.component.html'','
- en: 'styleUrls: [''angular-observable.component.css'']'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 'styleUrls: [''angular-observable.component.css'']'
- en: '})'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: export class AngularObservableAppComponent {
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: export class AngularObservableAppComponent {
- en: title = 'angular-observable works!';
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: title = 'angular-observable works!';
- en: private movies:Movie[] = [];
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: private movies:Movie[] = [];
- en: private error:boolean = false;
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: private error:boolean = false;
- en: private finished:boolean = false;
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: private finished:boolean = false;
- en: constructor(private IMDBAPI:IMDBAPIService){
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(private IMDBAPI:IMDBAPIService){
- en: this.IMDBAPI.fetchOneById(1).subscribe(
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchOneById(1).subscribe(
- en: value => {this.movies.push(value); console.log("Component",value)},
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: value => {this.movies.push(value); console.log("Component",value)},
- en: error => this.error = true,
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: error => this.error = true,
- en: () => this.finished =true
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: () => this.finished =true
- en: )
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE37]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: <h1>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>
- en: '{{title}}'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '{{title}}'
- en: </h1>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: </h1>
- en: <ul>
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li *ngFor = "let movie of movies">{{movie}}</li>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <li *ngFor = "let movie of movies">{{movie}}</li>
- en: </ul>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: '[PRE38]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'javascript fetchOneById 1 :4200/app/services/imdbapi.service.js:30 filter Object
    :4200/app/services/imdbapi.service.js:34 map Object :4200/app/angular-observable.component.js:21
    Component Movie_aspect_ratio_name: " 2.35:1"_budget: "140,000,000"_category_name:
    "Action"_disc_format_name: "Blu-ray"_gross: "318,298,180"_movie_id: 1_number_discs:
    1_phase: "Phase One: Avengers Assembled"_rating_name: "PG-13"_release_date: "May
    2, 2008"_release_year: 2015_running_time: 126_status: 1_time_stamp: "2015-05-03"_title:
    "Iron Man"_viewing_format_name: "Widescreen"aspect_ratio_name: (...)budget: (...)category_name:
    (...)disc_format_name: (...)gross: (...)movie_id: (...)number_discs: (...)phase:
    (...)rating_name: (...)release_date: (...)release_year: (...)running_time: (...)status:
    (...)time_stamp: (...)title: (...)toString: ()viewing_format_name: (...)__proto__:
    Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: javascript fetchOneById 1 :4200/app/services/imdbapi.service.js:30 过滤对象 :4200/app/services/imdbapi.service.js:34
    映射对象 :4200/app/angular-observable.component.js:21 组件 电影宽高比名称："2.35:1"_预算："140,000,000"_类别名称："动作"_光盘格式名称："蓝光"_总票房："318,298,180"_电影ID：1_光盘数量：1_阶段："第一阶段：复仇者联盟"_评级名称："PG-13"_上映日期："2008年5月2日"_上映年份：2015_片长：126_状态：1_时间戳："2015-05-03"_标题："钢铁侠"_观看格式名称："宽屏"宽高比名称：(...)预算：(...)类别名称：(...)光盘格式名称：(...)总票房：(...)电影ID：(...)光盘数量：(...)阶段：(...)评级名称：(...)上映日期：(...)上映年份：(...)片长：(...)状态：(...)时间戳：(...)标题：(...)toString：()观看格式名称：(...)__proto__：对象
    :4200/app/services/imdbapi.service.js:30 过滤对象 :4200/app/services/imdbapi.service.js:30
    过滤对象 :4200/app/services/imdbapi.service.js:30 过滤对象 :4200/app/services/imdbapi.service.js:30
    过滤对象 :4200/app/services/imdbapi.service.js:30 过滤对象 :4200/app/services/imdbapi.service.js:30
    过滤对象 :4200/app/services/imdbapi.service.js:30 过滤对象 :4200/app/services/imdbapi.service.js:30
    过滤对象 :4200/app/services/imdbapi.service.js:30 过滤对象 :4200/app/services/imdbapi.service.js:30
    过滤对象 :4200/app/services/imdbapi.service.js:30 过滤对象 :4200/app/services/imdbapi.service.js:30
    过滤对象 :4200/app/services/imdbapi.service.js:30 过滤对象
- en: '[PRE39]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: public fetchByField(field:MovieFields, value:any){
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: public fetchByField(field:MovieFields, value:any){
- en: console.log('fetchByField', field, value);
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台.log('fetchByField', field, value);
- en: return this.http.get (this.moviesUrl)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 返回this.http.get（this.moviesUrl）
- en: .flatMap(res => res.json().movies)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: .flatMap(res => res.json().movies)
- en: /**
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Filters movies by their field'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '* 根据字段过滤电影'
- en: '*/'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .filter((movie:any) =>{
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: .filter((电影:any) =>{
- en: console.log("filter" , movie);
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台.log("过滤"，电影);
- en: return (movie[MovieFields[field]] === value)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 返回（电影[MovieFields[field]] ===值）
- en: '})'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: /**
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie item to the Movie Model'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '* 将JSON电影项目映射到电影模型'
- en: '*/'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: '.map(( movie: any) => {'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: .map((电影:any) => {
- en: console.log ("map", movie);
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台.log（"映射"，电影）;
- en: return new Movie(
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 返回新的电影(
- en: movie.movie_id,
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 电影电影ID，
- en: movie.title,
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 电影标题，
- en: movie.phase,
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 电影.phase，
- en: movie.category_name,
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 电影类别名称，
- en: movie.release_year,
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 电影上映年份，
- en: movie.running_time,
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 电影片长，
- en: movie.rating_name,
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 电影评级名称，
- en: movie.disc_format_name,
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 电影光盘格式名称，
- en: movie.number_discs,
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 电影光盘数量，
- en: movie.viewing_format_name,
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 电影观看格式名称，
- en: movie.aspect_ratio_name,
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 电影宽高比名称，
- en: movie.status,
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 电影状态，
- en: movie.release_date,
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 电影上映日期，
- en: movie.budget,
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 电影预算，
- en: movie.gross,
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 电影总票房，
- en: movie.time_stamp
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 电影时间戳
- en: );
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}); }'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '}); }'
- en: '[PRE40]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: return (movie[MovieFields[field]] === value).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 返回（电影[MovieFields[field]] ===值）。
- en: '[PRE41]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: (function(MovieFields) {
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: (function(MovieFields) {
- en: MovieFields[MovieFields["movie_id"] = 0] = "movie_id";
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["电影ID"] = 0] = "电影ID";
- en: MovieFields[MovieFields["title"] = 1] = "title";
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["标题"] = 1] = "标题";
- en: MovieFields[MovieFields["phase"] = 2] = "phase";
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["phase"] = 2] = "phase";
- en: MovieFields[MovieFields["category_name"] = 3] = "category_name";
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["category_name"] = 3] = "category_name";
- en: MovieFields[MovieFields["release_year"] = 4] = "release_year";
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["release_year"] = 4] = "release_year";
- en: MovieFields[MovieFields["running_time"] = 5] = "running_time";
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["running_time"] = 5] = "running_time";
- en: MovieFields[MovieFields["rating_name"] = 6] = "rating_name";
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["rating_name"] = 6] = "rating_name";
- en: MovieFields[MovieFields["disc_format_name"] = 7] ="disc_format_name";
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["disc_format_name"] = 7] ="disc_format_name";
- en: MovieFields[MovieFields["number_discs"] = 8] = "number_discs";
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["number_discs"] = 8] = "number_discs";
- en: MovieFields[MovieFields["viewing_format_name"] = 9] = "viewing_format_name";
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["viewing_format_name"] = 9] = "viewing_format_name";
- en: MovieFields[MovieFields["aspect_ratio_name"] = 10] =  "aspect_ratio_name";
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["aspect_ratio_name"] = 10] =  "aspect_ratio_name";
- en: MovieFields[MovieFields["status"] = 11] = "status";
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["status"] = 11] = "status";
- en: MovieFields[MovieFields["release_date"] = 12] = "release_date";
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["release_date"] = 12] = "release_date";
- en: MovieFields[MovieFields["budget"] = 13] = "budget";
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["budget"] = 13] = "budget";
- en: MovieFields[MovieFields["gross"] = 14] = "gross";
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["gross"] = 14] = "gross";
- en: MovieFields[MovieFields["time_stamp"] = 15] = "time_stamp";
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 电影字段[电影字段["time_stamp"] = 15] = "time_stamp";
- en: '})(exports.MovieFields || (exports.MovieFields =  {}));'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '})(exports.MovieFields || (exports.MovieFields =  {}));'
- en: var MovieFields = exports.MovieFields;
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: var 电影字段 = exports.MovieFields;
- en: '[PRE42]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: fetchByField 4 2015
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: fetchByField 4 2015
- en: 'imdbapi.service.js:43 filter Object {movie_id: 1, title: "Iron Man", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 1, title: "钢铁侠", phase: "第一阶段：复仇者集结",
    category_name: "动作", release_year: 2015...}'
- en: 'imdbapi.service.js:47 map Object {movie_id: 1, title: "Iron Man", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {movie_id: 1, title: "钢铁侠", phase: "第一阶段：复仇者集结",
    category_name: "动作", release_year: 2015...}'
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 1, _title: "Iron
    Man", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件电影 {_movie_id: 1, _title: "钢铁侠", _phase:
    "第一阶段：复仇者集结", _category_name: "动作", _release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The Incredible Hulk",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2008...}'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 2, title: "无敌浩克", phase: "第一阶段：复仇者集结",
    category_name: "动作", release_year: 2008...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 3, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 3, title: "钢铁侠2", phase: "第一阶段：复仇者集结",
    category_name: "动作", release_year: 2015...}'
- en: 'imdbapi.service.js:47map Object {movie_id: 3 =, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {movie_id: 3 =, title: "钢铁侠2", phase: "第一阶段：复仇者集结",
    category_name: "动作", release_year: 2015...}'
- en: 'angular-observable.component.js:22 Component Movie{_movie_id: 3, _title: "Iron
    Man 2", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:2015...}'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件电影{_movie_id: 3, _title: "钢铁侠2", _phase:
    "第一阶段：复仇者集结", _category_name: "动作", _release_year:2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year:2011...}'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 4, title: "雷神", phase: "第一阶段：复仇者集结",
    category_name: "动作", release_year:2011...}'
- en: 'imdbapi.service.js:43filter Object {movie_id: 5, title: "Captain America",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2011...}'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 5, title: "美国队长", phase: "第一阶段：复仇者集结",
    category_name: "动作", release_year: 2011...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers, The", phase:
    "Phase One: Avengers Assembled", category_name: "Science Fiction", release_year:
    2012...}'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 6, 标题: "复仇者联盟", 阶段: "第一阶段：复仇者集结", 类别名称: "科幻",
    发行年份: 2012...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year : 2015...}'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 7, 标题: "钢铁侠3", 阶段: "第二阶段", 类别名称: "动作", 发行年份:
    2015...}'
- en: 'imdbapi.service.js:47 map Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year:2015...}'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {电影ID: 7, 标题: "钢铁侠3", 阶段: "第二阶段", 类别名称: "动作", 发行年份:
    2015...}'
- en: 'angular-observable.component.js: 22 Component Movie {_movie_id: 7, _title:
    "Iron Man 3", _phase: "Phase Two", _category_name:"Action", _release_year: 2015...}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件电影 {_movie_id: 7, _title: "钢铁侠3", _phase:
    "第二阶段", _category_name: "动作", _release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 8, title: "Thor: The Dark World",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2013...}'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 8, 标题: "雷神2：黑暗世界", 阶段: "第二阶段", 类别名称: "科幻",
    发行年份: 2013...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 9, title: "Captain America:
    The Winter Soldier", phase: "Phase Two", category_name: "Action", release_year:
    2014...}'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 9, 标题: "美国队长2：冬日战士", 阶段: "第二阶段", 类别名称: "动作",
    发行年份: 2014...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 10, title: "Guardians of the
    Galaxy", phase: "Phase Two", category_name: "Science Fiction", release_year: 2014...}'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 10, 标题: "银河护卫队", 阶段: "第二阶段", 类别名称: "科幻",
    发行年份: 2014...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 11, title: "Avengers: Age of
    Ultron", phase: "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 11, 标题: "复仇者联盟：奥创纪元", 阶段: "第二阶段", 类别名称: "科幻",
    发行年份: 2015...}'
- en: 'imdbapi.service.js:47 map Object {movie_id: 11, title: "Avengers: Age of Ultron",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {电影ID: 11, 标题: "复仇者联盟：奥创纪元", 阶段: "第二阶段", 类别名称: "科幻",
    发行年份: 2015...}'
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 11, _title:
    "Avengers: Age of Ultron", _phase: "Phase Two", _category_name: "Science Fiction",
    _release_year:2015...}'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件电影 {_movie_id: 11, _title: "复仇者联盟：奥创纪元",
    _phase: "第二阶段", _category_name: "科幻", _release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 12, title: "Ant-Man", phase:
    "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 12, 标题: "蚁人", 阶段: "第二阶段", 类别名称: "科幻", 发行年份:
    2015...}'
- en: 'imdbapi.service.js:47 map Object {movie_id: 12, title: "Ant-Man", phase: "Phase
    Two", category_name: "Science Fiction", release_year: 2015...}'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:47 映射对象 {电影ID: 12, 标题: "蚁人", 阶段: "第二阶段", 类别名称: "科幻", 发行年份:
    2015...}'
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 12, _title:
    "Ant-Man", _phase: "Phase Two", _category_name: "Science Fiction", _release_year:
    2015...}'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:22 组件电影 {_movie_id: 12, _title: "蚁人", _phase:
    "第二阶段", _category_name: "科幻", _release_year: 2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 13, title: "Captain America:
    Civil War",phase: "Phase Three", category_name: "Science Fiction", release_year:
    2016...}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 13, 标题: "美国队长3：内战", 阶段: "第三阶段", 类别名称: "科幻",
    发行年份: 2016...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 14, title: "Doctor Strange",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2016...}'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {电影ID: 14, 标题: "奇异博士", 阶段: "第二阶段", 类别名称: "科幻", 发行年份:
    2016...}'
- en: '[PRE43]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: constructor(private IMDBAPI:IMDBAPIService{ let imdbSubscription = this.IMDBAPI.fetchByField(MovieFields.release_year,
    2015).subscribe(
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(private IMDBAPI:IMDBAPIService{ let imdbSubscription = this.IMDBAPI.fetchByField(MovieFields.release_year,
    2015).subscribe(
- en: value=> {
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: value=> {
- en: this.movies.push(value);
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: this.movies.push(value);
- en: console.log("Component", value)
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Component", value)
- en: if(this.movies.length > 2){
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果(this.movies.length > 2){
- en: imdbSubscription.unsubscribe();
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: imdbSubscription.unsubscribe();
- en: '}'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: error => this.error = true,
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: error => this.error = true,
- en: () => this.finished = true
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: () => this.finished = true
- en: );
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE44]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: fetchByField 4 2015
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: fetchByField 4 2015
- en: 'imdbapi.service.js:43 filter Object {movie_id: 1, title: "Iron Man", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 1, title: "Iron Man", phase: "Phase One:
    Avengers Assembled", category_name: "Action", release_year: 2015...}'
- en: 'imdbapi.service.js:49 map Object {movie_id: 1, title: "Iron Man", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:49 映射对象 {movie_id: 1, title: "Iron Man", phase: "Phase One:
    Avengers Assembled", category_name: "Action", release_year: 2015...}'
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 1, _title: "Iron
    Man", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:24 组件电影 {_movie_id: 1, _title: "Iron Man",
    _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The Incredible Hulk",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2008...}'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 2, title: "The Incredible Hulk", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2008...}'
- en: 'imdbapi.service.js:43 filter Object { movie_id: 3, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 { movie_id: 3, title: "Iron Man 2", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
- en: 'imdbapi.service.js:49 map Object {movie_id: 3, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:49 映射对象 {movie_id: 3, title: "Iron Man 2", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 3, _title: "Iron
    Man 2", _phase: "Phase One: Avengers Assembled", _category_name: "Action",_release_year:
    2015...}'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:24 组件电影 {_movie_id: 3, _title: "Iron Man 2",
    _phase: "Phase One: Avengers Assembled", _category_name: "Action",_release_year:
    2015...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2011...}'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 4, title: "Thor", phase: "Phase One:
    Avengers Assembled", category_name: "Action", release_year: 2011...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 5, title: "Captain America",
    phase: "Phase One: Avengers Assembled", category_name: "Action",release_year:
    2011...}'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 5, title: "Captain America", phase: "Phase
    One: Avengers Assembled", category_name: "Action",release_year: 2011...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers, The", phase:
    "Phase One: Avengers Assembled", category_name: "Science Fiction", release_year:
    2012...}'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 6, title: "Avengers, The", phase: "Phase
    One: Avengers Assembled", category_name: "Science Fiction", release_year: 2012...}'
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:43 过滤对象 {movie_id: 7, title: "Iron Man 3", phase: "Phase
    Two", category_name: "Action", release_year: 2015...}'
- en: 'imdbapi.service.js:49 map Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:49 映射对象 {movie_id: 7, title: "Iron Man 3", phase: "Phase
    Two", category_name: "Action", release_year: 2015...}'
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 7, _title: "Iron
    Man 3", _phase: "Phase Two", _category_name: "Action", _release_year: 2015...}'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:24 组件电影 {_movie_id: 7, _title: "Iron Man 3",
    _phase: "Phase Two", _category_name: "Action", _release_year: 2015...}'
- en: '[PRE45]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: /**
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Return a Promise to a Movie matching id'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '* 返回一个匹配id的电影的Promise'
- en: '*@param {number} id'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '*@param {number} id'
- en: '*@return {Promise<Movie>}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '*@return {Promise<Movie>}'
- en: '*/'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: 'public fetchOneById(id:number) : Promise <Movie>{'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 'public fetchOneById(id:number) : Promise <Movie>{'
- en: console.log('fecthOneById', id);
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('fecthOneById', id);
- en: return this.http.get(this.moviesUrl)
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: return this.http.get(this.moviesUrl)
- en: /**
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Transforms the result of the HTTP get, which is observable'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '* 将HTTP获取的结果转换为可观察的'
- en: '* into one observable by item.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '* 转换为单个项目的可观察对象。'
- en: '*/'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .flatMap(res => res.json().movies)
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: .flatMap(res => res.json().movies)
- en: /**
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Filters movies by their movie_id'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '* 通过电影ID筛选电影'
- en: '*/'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .filter((movie:any) =>{
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: .filter((movie:any) =>{
- en: console.log("filter", movie);
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("过滤", 电影);
- en: return (movie.movie_id === id)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 (电影.movie_id === id)
- en: '})'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .toPromise()
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: .toPromise()
- en: /**
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie item to the Movie Model'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '* 将JSON电影项目映射到电影模型'
- en: '*/'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .then((movie:any) => {
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: .then((movie:any) => {
- en: console.log("map", movie);
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("映射", 电影);
- en: return new Movie(
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 返回新电影(
- en: movie.movie_id,
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 电影ID，
- en: movie.title,
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 电影标题，
- en: movie.phase,
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 电影阶段，
- en: movie.category_name,
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 电影类别名称，
- en: movie.release_year,
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 电影发行年份，
- en: movie.running_time,
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 电影时长，
- en: movie.rating_name,
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 电影评级名称，
- en: movie.disc_format_name,
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 电影光盘格式名称，
- en: movie.number_discs,
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 电影光盘数量，
- en: movie.viewing_format_name,
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 电影观看格式名称，
- en: movie.aspect_ratio_name,
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 电影宽高比名称，
- en: movie.status,
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 电影状态，
- en: movie.release_date,
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 电影发行日期，
- en: movie.budget,
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 电影预算，
- en: movie.gross,
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 电影总票房，
- en: movie.time_stamp
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 电影时间戳
- en: ) });
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: ) });
- en: '}'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE46]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: this.IMDBAPI.fetchOneById(1).then(
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchOneById(1).then(
- en: value => {
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 值=> {
- en: this.movies.push(value);
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: this.movies.push(value);
- en: console.log("Component", value)
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("组件", 值)
- en: '},'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: error => this.error = true
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 错误 => this.error = true
- en: );
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '[PRE47]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 2, title: "The Incredible Hulk",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2008...}'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 2, title: "无敌浩克", phase: "第一阶段：复仇者联盟",
    category_name: "动作", release_year: 2008...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 3, title: "Iron Man 2", phase
    : "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 3, title: "钢铁侠2", phase : "第一阶段：复仇者联盟",
    category_name: "动作", release_year: 2015...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 4, title: "Thor", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2011...}'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 4, title: "雷神", phase: "第一阶段：复仇者联盟",
    category_name: "动作", release_year: 2011...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 5, title: "Captain America",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2011...}'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 5, title: "美国队长", phase: "第一阶段：复仇者联盟",
    category_name: "动作", release_year: 2011...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 6, title: "Avengers, The", phase:
    "Phase One: Avengers Assembled", category_name:"Science Fiction", release_year:
    2012...}'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 6, title: "复仇者联盟", phase: "第一阶段：复仇者联盟",
    category_name:"科幻", release_year: 2012...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year: 2015...}'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 7, title: "钢铁侠3", phase: "第二阶段", category_name:
    "动作", release_year: 2015...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 8, title: "Thor: The Dark World",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2013...}'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 8, title: "雷神2：黑暗世界", phase: "第二阶段",
    category_name: "科幻", release_year: 2013...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 9, title: "Captain America:
    The Winter Soldier", phase: "Phase Two", category_name: "Action",release_year:
    2014...}'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 9, title: "美国队长：冬日战士", phase: "第二阶段",
    category_name: "动作",release_year: 2014...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 10, title: "Guardians of the
    Galaxy", phase: "Phase Two", category_name: "Science Fiction", release_year: 2014...}'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 {movie_id: 10, title: "银河护卫队", phase: "第二阶段", category_name:
    "科幻", release_year: 2014...}'
- en: 'imdbapi.service.js:30 filter Object { movie_id: 11, title: "Avengers: Age of
    Ultron", phase: "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 过滤对象 { movie_id: 11, title: "复仇者联盟：奥创纪元", phase: "第二阶段",
    category_name: "科幻", release_year: 2015...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 12, title: "Ant-Man", phase:
    "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 12, title: "Ant-Man", phase:
    "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 13, title: "Captain America:
    Civil War", phase: "Phase Three", category_name: "Science Fiction", release_year:
    2016...}'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 13, title: "Captain America:
    Civil War", phase: "Phase Three", category_name: "Science Fiction", release_year:
    2016...}'
- en: 'imdbapi.service.js:30 filter Object {movie_id: 14, title: "Doctor Strange",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2016...}'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:30 filter Object {movie_id: 14, title: "Doctor Strange",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2016...}'
- en: 'imdbapi.service.js:35 map Object {movie_id: 1, title: "Iron Man", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 'imdbapi.service.js:35 map Object {movie_id: 1, title: "Iron Man", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
- en: 'angular-observable.component.js:23 Component Movie {_movie_id: 1, _title: "Iron
    Man", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 'angular-observable.component.js:23 Component Movie {_movie_id: 1, _title: "Iron
    Man", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
- en: '[PRE48]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'public fetchByField(field: MovieFields, value: any) :Promise<Movie[]>{'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 'public fetchByField(field: MovieFields, value: any) :Promise<Movie[]>{'
- en: console.log('fetchByField', field, value);
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('fetchByField', field, value);
- en: return this.http.get(this.moviesUrl)
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: return this.http.get(this.moviesUrl)
- en: .map(res => res.json().movies.filter(
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: .map(res => res.json().movies.filter(
- en: (movie)=>{
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: (movie)=>{
- en: return (movie[MovieFields[field]] === value)
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: return (movie[MovieFields[field]] === value)
- en: '})'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: )
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .toPromise()
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: .toPromise()
- en: /**
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Map the JSON movie items to the Movie Model'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '* Map the JSON movie items to the Movie Model'
- en: '*/'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: .then((jsonMovies:any[]) => {
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: .then((jsonMovies:any[]) => {
- en: console.log("map",jsonMovies);
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("map",jsonMovies);
- en: let movies:Movie[] = [];
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: let movies:Movie[] = [];
- en: for (var i = 0; i < jsonMovies.length; i++) {
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: for (var i = 0; i < jsonMovies.length; i++) {
- en: movies.push(
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: movies.push(
- en: new Movie(
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: new Movie(
- en: jsonMovies[i].movie_id,
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].movie_id,
- en: jsonMovies[i].title,
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].title,
- en: jsonMovies[i].phase,
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].phase,
- en: jsonMovies[i].category_name,
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].category_name,
- en: jsonMovies[i].release_year,
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].release_year,
- en: jsonMovies[i].running_time,
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].running_time,
- en: jsonMovies[i].rating_name,
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].rating_name,
- en: jsonMovies[i].disc_format_name,
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].disc_format_name,
- en: jsonMovies[i].number_discs,
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].number_discs,
- en: jsonMovies[i].viewing_format_name,
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].viewing_format_name,
- en: jsonMovies[i].aspect_ratio_name,
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].aspect_ratio_name,
- en: jsonMovies[i].status,
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].status,
- en: jsonMovies[i].release_date,
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].release_date,
- en: jsonMovies[i].budget,
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].budget,
- en: jsonMovies[i].gross,
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].gross,
- en: jsonMovies[i].time_stamp
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: jsonMovies[i].time_stamp
- en: )
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: )
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return movies;
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: return movies;
- en: '});'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE49]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).then(
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).then(
- en: value => {
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: value => {
- en: this.movies = value;
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: this.movies = value;
- en: console.log("Component", value)
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Component", value)
- en: '},'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: error => this.error = true
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: error => this.error = true
- en: )
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE50]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: /**
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Private member storing pending promises'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '* Private member storing pending promises'
- en: '*/'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: private promises:Promise<Movie[]>[] = [];
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: private promises:Promise<Movie[]>[] = [];
- en: /**
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Register one promise for field/value. Returns this'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '* Register one promise for field/value. Returns this'
- en: '* for chaining i.e.'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '* for chaining i.e.'
- en: '*'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* byField(Y, X)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '* byField(Y, X)'
- en: '* .or(...)'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '* .or(...)'
- en: '* .fetch()'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '* .fetch()'
- en: '*'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* @param {MovieFields} field'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param {MovieFields} field'
- en: '* @param {any}  value'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param {any}  value'
- en: '* @return {IMDBAPIService}'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {IMDBAPIService}'
- en: '*/'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public byField(field:MovieFields, value:any):IMDBAPIService{
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: public byField(field:MovieFields, value:any):IMDBAPIService{
- en: this.promises.push(this.fetchByField(field, value));
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: this.promises.push(this.fetchByField(field, value));
- en: return this;
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: return this;
- en: '}'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: /**
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Convenient method to make the calls more readable, i.e.'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '* Convenient method to make the calls more readable, i.e.'
- en: '*'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* byField(Y, X)'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '* byField(Y, X)'
- en: '* .or(...)'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '* .or(...)'
- en: '* .fetch()'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '* .fetch()'
- en: '*'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* instead of'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '* instead of'
- en: '*'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* byField(Y, X)'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '* byField(Y, X)'
- en: '* .byField(...)'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '* .byField(...)'
- en: '* .fetch()'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '* .fetch()'
- en: '*'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* @param {MovieFields} field'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param {MovieFields} field'
- en: '* @param {any}  value'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '* @param {any}  value'
- en: '* @return {IMDBAPIService}'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '* @return {IMDBAPIService}'
- en: '*/ public or(field:MovieFields, value:any):IMDBAPIService{'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '*/ public or(field:MovieFields, value:any):IMDBAPIService{'
- en: return this.byField(field, value);
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: return this.byField(field, value);
- en: '}'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: /**
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: '* Join all the promises and return the aggregated result.'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '* Join all the promises and return the aggregated result.'
- en: '*'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*@return {Promise<Movie[]>}'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '*@return {Promise<Movie[]>}'
- en: '*/'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: public fetch():Promise<Movie[]>{
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: public fetch():Promise<Movie[]>{
- en: return Promise.all(this.promises).then((results:any) => {
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: return Promise.all(this.promises).then((results:any) => {
- en: //result is an array of movie arrays. One array per
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: //result is an array of movie arrays. One array per
- en: //promise. We need to flatten it.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: //promise. We need to flatten it.
- en: return [].concat.apply([], results);
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: return [].concat.apply([], results);
- en: '});'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE51]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: this.IMDBAPI.byField(MovieFields.release_year, 2015)
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: this.IMDBAPI.byField(MovieFields.release_year, 2015)
- en: .or(MovieFields.release_year, 2014)
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: .or(MovieFields.release_year, 2014)
- en: .or(MovieFields.phase, "Phase Two")
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: .or(MovieFields.phase, "Phase Two")
- en: .fetch()
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: .fetch()
- en: .then (
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: .then (
- en: value => {
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: value => {
- en: this.movies = value;
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: this.movies = value;
- en: console.log("Component", value)
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Component", value)
- en: '},'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: error => this.error = true
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: error => this.error = true
- en: );
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This is very simple to read and understand while keeping all the asynchronism
    capabilities of Angular 2.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易阅读和理解，同时保持了Angular 2的所有异步能力。
- en: Summary
  id: totrans-535
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned how to use some of the most useful classical patterns:
    component, singleton, and observer. We learned how to do it in pure TypeScript
    as well as by using Angular 2 building blocks. The code for this chapter can be
    found here: [https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices/tree/master/chap4](https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices/tree/master/chap4).'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用一些最有用的经典模式：组件、单例和观察者。我们学会了如何在纯TypeScript中以及使用Angular 2构建块来实现。本章的代码可以在这里找到：[https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices/tree/master/chap4](https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices/tree/master/chap4)。
- en: In the next chapter, we'll focus on patterns, aiming to ease and organize navigation
    in our Angular 2 application.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于模式，旨在简化和组织我们的Angular 2应用程序中的导航。
