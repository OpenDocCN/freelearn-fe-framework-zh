["```js\nimport configMongoose from './configMongoose'; \nconst Article = configMongoose.Article; \n\nexport default () => { \n  return Article.find({}, function(err, articlesDocs) { \n    return articlesDocs; \n  }).then ((articlesArrayFromDB) => { \n    return articlesArrayFromDB; \n  }); \n}\n\nArticle.find (the find function comes from Mongoose). You can also find that we are returning an array of articles that are fetched from our MongoDB.\n```", "```js\n// te following code should already be in your codebase: \nlet handleServerSideRender = (req, res, next) => { \ntry { \n    let initMOCKstore = fetchServerSide(); // mocked for now \n\n    // Create a new Redux store instance \n    const store = createStore(rootReducer, initMOCKstore) \n    const location = hist.createLocation(req.path);\n\n```", "```js\n// this is an improved version: \nlet handleServerSideRender = async (req, res, next) => { \n  try { \n    let articlesArray = await fetchServerSide(); \n    let initMOCKstore = { \n      article: articlesArray \n    } \n\n  // Create a new Redux store instance \n  const store = createStore(rootReducer, initMOCKstore) \n  const location = hist.createLocation(req.path);\n\n```", "```js\nroute: 'articles[{integers}][\"id\",\"articleTitle\",\"articleContent\"]',\n\n```", "```js\nroute: 'articles[{integers}][\"_id\",\"articleTitle\",\"articleContent\"]',\n\n```", "```js\nget(['articles', {from: 0, to: articlesLength-1}, ['id','articleTitle', 'articleContent']]).\n\n```", "```js\nget(['articles', {from: 0, to: articlesLength-1}, ['_id','articleTitle', 'articleContent']]).\n\n```", "```js\n<h1>Server side publishing app</h1>\n\n```", "```js\n<h1>Our publishing app</h1>\n\n```", "```js\n<h1>Login view</h1>\n\n```", "```js\n<h1>Register</h1>\n\n```", "```js\nimport AppBar from 'material-ui/lib/app-bar'; \nimport RaisedButton from 'material-ui/lib/raised-button'; \nimport ActionHome from 'material-ui/lib/svg-icons/action/home';\n\n```", "```js\n render () { \n    const buttonStyle = { \n      margin: 5 \n    }; \n    const homeIconStyle = { \n      margin: 5, \n      paddingTop: 5 \n    }; \n\n    let menuLinksJSX = ( \n    <span> \n        <Link to='/register'> \n       <RaisedButton label='Register' style={buttonStyle}  /> \n     </Link>  \n        <Link to='/login'> \n       <RaisedButton label='Login' style={buttonStyle}  /> \n     </Link>  \n      </span>); \n\n    let homePageButtonJSX = ( \n     <Link to='/'> \n          <RaisedButton label={<ActionHome />} \n           style={homeIconStyle}  /> \n        </Link>); \n\n    return ( \n      <div> \n        <AppBar \n          title='Publishing App' \n          iconElementLeft={homePageButtonJSX} \n          iconElementRight={menuLinksJSX} /> \n          <br/> \n          {this.props.children} \n      </div> \n    ); \n  }\n\n```", "```js\n$ [[you are in the src/components/ directory of your project]]\n$ touch ArticleCard.js\n\n```", "```js\nimport React from 'react'; \nimport {  \n  Card,  \n  CardHeader,  \n  CardMedia,  \n  CardTitle,  \n  CardText  \n} from 'material-ui/lib/card'; \nimport {Paper} from 'material-ui'; \n\nclass ArticleCard extends React.Component { \n  constructor(props) { \n    super(props); \n  } \n\n  render() { \n    return <h1>here goes the article card</h1>; \n  } \n}; \nexport default ArticleCard;\n\n```", "```js\nrender() { \n  let title = this.props.title || 'no title provided'; \n  let content = this.props.content || 'no content provided'; \n\n  const paperStyle = { \n    padding: 10,  \n    width: '100%',  \n    height: 300 \n  }; \n\n  const leftDivStyle = { \n    width: '30%',  \n    float: 'left' \n  }; \n\n  const rightDivStyle = { \n    width: '60%',  \n    float: 'left',  \n    padding: '10px 10px 10px 10px' \n  }; \n\n  return ( \n    <Paper style={paperStyle}> \n      <CardHeader \n        title={this.props.title} \n        subtitle='Subtitle' \n        avatar='/static/avatar.png' \n      /> \n\n      <div style={leftDivStyle}> \n        <Card > \n          <CardMedia \n            overlay={<CardTitle title={title} \n             subtitle='Overlay subtitle' />}> \n            <img src='/static/placeholder.png' height=\"190\" /> \n          </CardMedia> \n        </Card> \n      </div> \n      <div style={rightDivStyle}> \n        {content} \n      </div> \n    </Paper>); \n}\n\n```", "```js\nimport ArticleCard from '../components/ArticleCard';\n\n```", "```js\nrender () { \n\n  let articlesJSX = []; \n  for(let articleKey in this.props.article) { \n    const articleDetails = this.props.article[articleKey]; \n\n    const currentArticleJSX = ( \n      <div key={articleKey}> \n        <ArticleCard  \n          title={articleDetails.articleTitle} \n          content={articleDetails.articleContent} /> \n      </div> \n    ); \n\n    articlesJSX.push(currentArticleJSX); \n  } \n  return ( \n    <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        {articlesJSX} \n    </div> \n  ); \n}\n\n```", "```js\n<ArticleCard  \n  title={articleDetails.articleTitle} \n  content={articleDetails.articleContent} />\n\n```", "```js\n$ [[you are in the src/components/ directory of your project]]\n$ mkdir articles\n$ cd articles\n$ touch WYSIWYGeditor.js\n\n```", "```js\nimport React from 'react'; \n\nclass WYSIWYGeditor extends React.Component { \n  constructor(props) { \n    super(props); \n  } \n\n  render() { \n    return <h1>WYSIWYGeditor</h1>; \n  } \n}; \nexport default WYSIWYGeditor;\n\n```", "```js\n$ [[you should be at src/views/ directory of your project]]\n$ touch LogoutView.js\n\n```", "```js\nimport React from 'react'; \nimport {Paper} from 'material-ui'; \n\nclass LogoutView extends React.Component { \n  constructor(props) { \n    super(props); \n  } \n\n  componentWillMount() { \n    if (typeof localStorage !== 'undefined' && localStorage.token) { \n      delete localStorage.token; \n      delete localStorage.username; \n      delete localStorage.role; \n    } \n  } \n\n  render () { \n    return ( \n      <div style={{width: 400, margin: 'auto'}}> \n        <Paper zDepth={3} style={{padding: 32, margin: 32}}> \n          Logout successful. \n        </Paper> \n      </div> \n    ); \n  } \n} \nexport default LogoutView;\n\n```", "```js\n$ [[you are in the src/views/ directory of your project]]\n$ mkdir articles\n$ cd articles\n$ touch AddArticleView.js\n\n```", "```js\nimport React from 'react'; \nimport {connect} from 'react-redux'; \nimport WYSIWYGeditor from '../../components/articles/WYSIWYGeditor.js'; \n\nconst mapStateToProps = (state) => ({ \n  ...state \n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n\n}); \n\nclass AddArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n  } \n\n  render () { \n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Add Article</h1> \n        <WYSIWYGeditor /> \n      </div> \n    ); \n  } \n} \nexport default connect(mapStateToProps, mapDispatchToProps)(AddArticleView);\n\n```", "```js\nimport React from 'react'; \nimport {Route, IndexRoute} from 'react-router'; \nimport CoreLayout from '../layouts/CoreLayout'; \nimport PublishingApp from '../layouts/PublishingApp'; \nimport LoginView from '../views/LoginView'; \nimport LogoutView from '../views/LogoutView'; \nimport RegisterView from '../views/RegisterView'; \nimport DashboardView from '../views/DashboardView'; \nimport AddArticleView from '../views/articles/AddArticleView'; \n\nexport default ( \n  <Route component={CoreLayout} path='/'> \n    <IndexRoute component={PublishingApp} name='home' /> \n    <Route component={LoginView} path='login' name='login' /> \n    <Route component={LogoutView} path='logout' name='logout' /> \n    <Route component={RegisterView} path='register' \n       name='register' /> \n    <Route component={DashboardView} path='dashboard' \n       name='dashboard' /> \n    <Route component={AddArticleView} path='add-article' \n       name='add-article' /> \n  </Route> \n);\n\n```", "```js\nimport LogoutView from '../views/LogoutView'; \nimport AddArticleView from '../views/articles/AddArticleView';\n\n```", "```js\n  render () { \n    const buttonStyle = { \n      margin: 5 \n    }; \n    const homeIconStyle = { \n      margin: 5, \n      paddingTop: 5 \n    }; \n\n    let menuLinksJSX; \n    let userIsLoggedIn = typeof localStorage !== 'undefined' &&  \n     localStorage.token && this.props.routes[1].name !== 'logout'; \n\n    if (userIsLoggedIn) { \n      menuLinksJSX = ( \n     <span> \n          <Link to='/dashboard'> \n      <RaisedButton label='Dashboard' style={buttonStyle}  /> \n    </Link>  \n          <Link to='/logout'> \n      <RaisedButton label='Logout' style={buttonStyle}  /> \n    </Link>  \n      </span>); \n    } else { \n      menuLinksJSX = ( \n     <span> \n         <Link to='/register'> \n      <RaisedButton label='Register' style={buttonStyle}  /> \n    </Link>  \n           <Link to='/login'> \n       <RaisedButton label='Login' style={buttonStyle}  /> \n     </Link>  \n       </span>); \n    } \n\n    let homePageButtonJSX = ( \n      <Link to='/'> \n        <RaisedButton label={<ActionHome />} style={homeIconStyle}  \n         /> \n      </Link>); \n\n    return ( \n      <div> \n        <AppBar \n          title='Publishing App' \n          iconElementLeft={homePageButtonJSX} \n          iconElementRight={menuLinksJSX} /> \n          <br/> \n          {this.props.children} \n      </div> \n    ); \n  }\n\n```", "```js\n  let menuLinksJSX; \n  let userIsLoggedIn = typeof localStorage !== \n  'undefined' && localStorage.token && this.props.routes[1].name \n   !== 'logout'; \n\n  if (userIsLoggedIn) { \n    menuLinksJSX = ( \n  <span> \n        <Link to='/dashboard'> \n    <RaisedButton label='Dashboard' style={buttonStyle}  /> \n  </Link>  \n        <Link to='/logout'> \n    <RaisedButton label='Logout'style={buttonStyle}  /> \n  </Link>  \n      </span>); \n  } else { \n    menuLinksJSX = ( \n  <span> \n        <Link to='/register'> \n    <RaisedButton label='Register' style={buttonStyle}  /> \n  </Link>  \n        <Link to='/login'> \n    <RaisedButton label='Login' style={buttonStyle}  /> \n  </Link>  \n      </span>); \n  }\n\n```", "```js\nimport {Link} from 'react-router'; \nimport List from 'material-ui/lib/lists/list'; \nimport ListItem from 'material-ui/lib/lists/list-item'; \nimport Avatar from 'material-ui/lib/avatar'; \nimport ActionInfo from 'material-ui/lib/svg-icons/action/info'; \nimport FileFolder from 'material-ui/lib/svg-icons/file/folder'; \nimport RaisedButton from 'material-ui/lib/raised-button'; \nimport Divider from 'material-ui/lib/divider';\n\n```", "```js\nrender () { \n\n    let articlesJSX = []; \n    for(let articleKey in this.props.article) { \n      const articleDetails = this.props.article[articleKey]; \n      const currentArticleJSX = ( \n        <ListItem \n          key={articleKey} \n          leftAvatar={<img  \n          src='/static/placeholder.png'  \n          width='50'  \n          height='50' />} \n          primaryText={articleDetails.articleTitle} \n          secondaryText={articleDetails.articleContent} \n        /> \n      ); \n\n      articlesJSX.push(currentArticleJSX); \n    } \n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <Link to='/add-article'> \n          <RaisedButton  \n            label='Create an article'  \n            secondary={true}  \n            style={{margin: '20px 20px 20px 20px'}} /> \n        </Link> \n\n        <List> \n          {articlesJSX} \n        </List> \n      </div> \n    ); \n  }\n\n```", "```js\nnpm i --save draft-js@0.5.0\n\n```", "```js\nnpm i --save falcor-json-graph@1.1.7\n\n```", "```js\n.RichEditor-root { \n  background: #fff; \n  border: 1px solid #ddd; \n  font-family: 'Georgia', serif; \n  font-size: 14px; \n  padding: 15px; \n} \n\n.RichEditor-editor { \n  border-top: 1px solid #ddd; \n  cursor: text; \n  font-size: 16px; \n  margin-top: 10px; \n  min-height: 100px; \n} \n\n.RichEditor-editor .RichEditor-blockquote { \n  border-left: 5px solid #eee; \n  color: #666; \n  font-family: 'Hoefler Text', 'Georgia', serif; \n  font-style: italic; \n  margin: 16px 0; \n  padding: 10px 20px; \n} \n\n.RichEditor-controls { \n  font-family: 'Helvetica', sans-serif; \n  font-size: 14px; \n  margin-bottom: 5px; \n  user-select: none; \n} \n\n.RichEditor-styleButton { \n  color: #999; \n  cursor: pointer; \n  margin-right: 16px; \n  padding: 2px 0; \n} \n\n.RichEditor-activeButton { \n  color: #5890ff; \n}\n\n```", "```js\nlet renderFullPage = (html, initialState) => \n{ \n  return &grave; \n    <!doctype html> \n    <html> \n      <head> \n        <title>Publishing App Server Side Rendering</title> \n        <link rel=\"stylesheet\" type=\"text/css\" \n         href=\"/static/styles-draft-js.css\" /> \n      </head> \n      <body> \n        <div id=\"publishingAppRoot\">${html}</div> \n        <script> \n          window.__INITIAL_STATE__ = \n           ${JSON.stringify(initialState)} \n        </script> \n        <script src=\"img/app.js\"></script> \n      </body> \n    </html> \n    &grave; \n};\n\n```", "```js\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/static/styles-draft- \n js.css\" />\n\n```", "```js\nimport React from 'react'; \nimport { \n  Editor,  \n  EditorState,  \n  ContentState,  \n  RichUtils,  \n  convertToRaw, \n  convertFromRaw \n} from 'draft-js'; \n\nexport default class   WYSIWYGeditor extends React.Component { \n  constructor(props) { \n    super(props); \n\n    let initialEditorFromProps = \n     EditorState.createWithContent \n     (ContentState.createFromText('')); \n\n    this.state = { \n      editorState: initialEditorFromProps \n    }; \n\n    this.onChange = (editorState) => {  \n      var contentState = editorState.getCurrentContent(); \n\n      let contentJSON = convertToRaw(contentState); \n      props.onChangeTextJSON(contentJSON, contentState); \n      this.setState({editorState})  \n    }; \n  } \n\n  render() { \n    return <h1>WYSIWYGeditor</h1>; \n  } \n}\n\n```", "```js\nthis.focus = () => this.refs['refWYSIWYGeditor'].focus(); \nthis.handleKeyCommand = (command) => this._handleKeyCommand(command);\n\n```", "```js\n_handleKeyCommand(command) { \n   const {editorState} = this.state; \n   const newState = RichUtils.handleKeyCommand(editorState, \n    command); \n\n   if (newState) { \n     this.onChange(newState); \n     return true; \n   } \n   return false; \n }\n\n```", "```js\nexport default class   WYSIWYGeditor extends React.Component { \n  constructor(props) { \n    super(props); \n\n    let initialEditorFromProps = \n     EditorState.createWithContent \n     (ContentState.createFromText('')); \n\n    this.state = { \n      editorState: initialEditorFromProps \n    }; \n\n    this.onChange = (editorState) => {  \n      var contentState = editorState.getCurrentContent(); \n\n      let contentJSON = convertToRaw(contentState); \n      props.onChangeTextJSON(contentJSON, contentState); \n      this.setState({editorState}); \n    }; \n\n    this.focus = () => this.refs['refWYSIWYGeditor'].focus(); \n    this.handleKeyCommand = (command) => \n     this._handleKeyCommand(command); \n  }\n\n```", "```js\n  _handleKeyCommand(command) { \n    const {editorState} = this.state; \n    const newState = RichUtils.handleKeyCommand(editorState, \n     command); \n\n    if (newState) { \n      this.onChange(newState); \n      return true; \n    } \n    return false; \n  } \n\n  render() { \n    return <h1> WYSIWYGeditor</h1>; \n  } \n}\n\n```", "```js\n render() { \n    const { editorState } = this.state; \n    let className = 'RichEditor-editor'; \n    var contentState = editorState.getCurrentContent(); \n\n    return ( \n      <div> \n        <h4>{this.props.title}</h4> \n        <div className='RichEditor-root'> \n          <div className={className} onClick={this.focus}> \n            <Editor \n              editorState={editorState} \n              handleKeyCommand={this.handleKeyCommand} \n              onChange={this.onChange} \n              ref='refWYSIWYGeditor' /> \n          </div> \n        </div> \n      </div> \n    ); \n  }\n\n```", "```js\nnpm i --save draft-js-export-html@0.1.13\n\n```", "```js\nimport { stateToHTML } from 'draft-js-export-html';\n\n```", "```js\nclass AddArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n\n    this.state = { \n      contentJSON: {}, \n      htmlContent: '' \n    }; \n  } \n\n  _onDraftJSChange(contentJSON, contentState) { \n    let htmlContent = stateToHTML(contentState); \n    this.setState({contentJSON, htmlContent}); \n  }\n\n```", "```js\nrender () { \n   return ( \n     <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n       <h1>Add Article</h1> \n       <WYSIWYGeditor \n         initialValue='' \n         title='Create an article' \n         onChangeTextJSON={this._onDraftJSChange} /> \n     </div> \n   ); \n }\n\n```", "```js\n// don't write it, this is only an example:\nimport { BlockStyleControls, InlineStyleControls } from \n './wysiwyg/WYSIWY\n    Gbuttons';\n\n```", "```js\n$ [[you are in the src/components/articles directory of your project]]\n$ mkdir wysiwyg\n$ cd wysiwyg\n$ touch  WYSIWYGbuttons.js\n\n```", "```js\nimport React from 'react'; \n\nclass StyleButton extends React.Component { \n  constructor() { \n    super(); \n    this.onToggle = (e) => { \n      e.preventDefault(); \n      this.props.onToggle(this.props.style); \n    }; \n  } \n\n  render() { \n    let className = 'RichEditor-styleButton'; \n    if (this.props.active) { \n      className += ' RichEditor-activeButton'; \n    } \n\n    return ( \n      <span className={className} onMouseDown={this.onToggle}> \n        {this.props.label} \n      </span> \n    ); \n  } \n}\n\n```", "```js\nconst BLOCK_TYPES = [ \n  {label: 'H1', style: 'header-one'}, \n  {label: 'H2', style: 'header-two'}, \n  {label: 'Blockquote', style: 'blockquote'}, \n  {label: 'UL', style: 'unordered-list-item'}, \n  {label: 'OL', style: 'ordered-list-item'} \n];\n\n```", "```js\nexport const BlockStyleControls = (props) => { \n  const {editorState} = props; \n  const selection = editorState.getSelection(); \n  const blockType = editorState \n    .getCurrentContent() \n    .getBlockForKey(selection.getStartKey()) \n    .getType(); \n\n  return ( \n    <div className='RichEditor-controls'> \n      {BLOCK_TYPES.map((type) => \n        <StyleButton \n          key={type.label} \n          active={type.style === blockType} \n          label={type.label} \n          onToggle={props.onToggle} \n          style={type.style} \n        /> \n      )} \n    </div> \n  ); \n};\n\n```", "```js\nvar INLINE_STYLES = [ \n  {label: 'Bold', style: 'BOLD'}, \n  {label: 'Italic', style: 'ITALIC'}, \n  {label: 'Underline', style: 'UNDERLINE'} \n];\n\n```", "```js\nexport const InlineStyleControls = (props) => { \n  var currentStyle = props.editorState.getCurrentInlineStyle(); \n  return ( \n    <div className='RichEditor-controls'> \n      {INLINE_STYLES.map(type => \n        <StyleButton \n          key={type.label} \n          active={currentStyle.has(type.style)} \n          label={type.label} \n          onToggle={props.onToggle} \n          style={type.style} \n        /> \n      )} \n    </div> \n  ); \n};\n\n```", "```js\nimport { BlockStyleControls, InlineStyleControls } from './wysiwyg/WYSIWYGbuttons';\n\n```", "```js\nthis.toggleInlineStyle = (style) => \nthis._toggleInlineStyle(style); \nthis.toggleBlockType = (type) => this._toggleBlockType(type);\n\n```", "```js\n _toggleBlockType(blockType) {this.onChange( \n      RichUtils.toggleBlockType( \n        this.state.editorState, \n        blockType \n      ) \n    ); \n  } \n\n  _toggleInlineStyle(inlineStyle) { \n    this.onChange( \n      RichUtils.toggleInlineStyle( \n        this.state.editorState, \n        inlineStyle \n      ) \n    ); \n  }\n\n```", "```js\n render() { \n    const { editorState } = this.state; \n    let className = 'RichEditor-editor'; \n    var contentState = editorState.getCurrentContent(); \n\n    return ( \n      <div> \n        <h4>{this.props.title}</h4> \n        <div className='RichEditor-root'> \n          <BlockStyleControls \n            editorState={editorState} \n            onToggle={this.toggleBlockType} /> \n\n          <InlineStyleControls \n            editorState={editorState} \n            onToggle={this.toggleInlineStyle} /> \n\n          <div className={className} onClick={this.focus}> \n            <Editor \n              editorState={editorState} \n              handleKeyCommand={this.handleKeyCommand} \n              onChange={this.onChange} \n              ref='refWYSIWYGeditor' /> \n          </div> \n        </div> \n      </div> \n    ); \n  }\n\n```", "```js\nexport default { \n  articlesList: (response) => { \n    return { \n      type: 'ARTICLES_LIST_ADD', \n      payload: { response: response } \n    } \n  }, \n  pushNewArticle: (response) => { \n    return { \n      type: 'PUSH_NEW_ARTICLE', \n      payload: { response: response } \n    } \n  } \n}\n\n```", "```js\nreturn ( \n   <Paper style={paperStyle}> \n     <CardHeader \n       title={this.props.title} \n       subtitle='Subtitle' \n       avatar='/static/avatar.png' \n     /> \n\n     <div style={leftDivStyle}> \n       <Card > \n         <CardMedia \n           overlay={<CardTitle title={title} subtitle='Overlay \n            subtitle' />}> \n           <img src='/static/placeholder.png' height='190' /> \n         </CardMedia> \n       </Card> \n     </div> \n     <div style={rightDivStyle}> \n       <div dangerouslySetInnerHTML={{__html: content}} /> \n     </div> \n   </Paper>); \n}\n\n```", "```js\n<div dangerouslySetInnerHTML={{__html: content}} />\n\n```", "```js\n// this already exsits in your codebasecase 'ARTICLES_LIST_ADD': \nlet articlesList = action.payload.response; \nreturn Object.assign({}, articlesList);\n\n```", "```js\ncase 'ARTICLES_LIST_ADD': \n  let articlesList = action.payload.response; \n  return mapHelpers.addMultipleItems(state, articlesList);\n\n```", "```js\n$ [[you are in the src/ directory of your project]]\n$ mkdir utils\n$ cd utils\n$ touch mapHelpers.js\n\n```", "```js\nconst duplicate = (map) => { \n  const newMap = new Map(); \n  map.forEach((item, key) => { \n    if (item['_id']) { \n      newMap.set(item['_id'], item); \n    } \n  }); \n  return newMap; \n}; \n\nconst addMultipleItems = (map, items) => { \n  const newMap = duplicate(map); \n\n  Object.keys(items).map((itemIndex) => { \n    let item = items[itemIndex]; \n    if (item['_id']) { \n      newMap.set(item['_id'], item); \n    } \n  }); \n\n  return newMap; \n};\n\n```", "```js\nconst addItem = (map, newKey, newItem) => { \n  const newMap = duplicate(map); \n  newMap.set(newKey, newItem); \n  return newMap; \n}; \n\nconst deleteItem = (map, key) => { \n  const newMap = duplicate(map); \n  newMap.delete(key); \n\n  return newMap; \n}; \n\nexport default { \n  addItem, \n  deleteItem, \n  addMultipleItems \n};\n\n```", "```js\nimport mapHelpers from '../utils/mapHelpers'; \n\nconst article = (state = {}, action) => { \n  switch (action.type) { \n    case 'ARTICLES_LIST_ADD': \n      let articlesList = action.payload.response; \n      return mapHelpers.addMultipleItems(state, articlesList); \n    case 'PUSH_NEW_ARTICLE': \n      let newArticleObject = action.payload.response; \n      return mapHelpers.addItem(state, newArticleObject['_id'], \n       newArticleObject); \n    default: \n      return state; \n  } \n} \nexport default article\n\n```", "```js\n// The following is old codebase: \nimport React from 'react'; \nimport { Link } from 'react-router'; \nimport themeDecorator from 'material-ui/lib/styles/theme- \n decorator'; \nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \nimport RaisedButton from 'material-ui/lib/raised-button'; \nimport AppBar from 'material-ui/lib/app-bar'; \nimport ActionHome from 'material-ui/lib/svg-icons/action/home';\n\nCoreLayout component:\n```", "```js\nimport React from 'react'; \nimport {Link} from 'react-router'; \nimport themeDecorator from 'material-ui/lib/styles/theme- \n decorator'; \nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \nimport RaisedButton from 'material-ui/lib/raised-button'; \nimport AppBar from 'material-ui/lib/app-bar'; \nimport ActionHome from 'material-ui/lib/svg-icons/action/home'; \nimport {connect} from 'react-redux'; \nimport {bindActionCreators} from 'redux'; \nimport articleActions from '../actions/article.js'; \n\nconst mapStateToProps = (state) => ({ \n  ...state \n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n  articleActions: bindActionCreators(articleActions, dispatch) \n});\n\n```", "```js\n  componentWillMount() { \n    if (typeof window !== 'undefined' && !this.props.article.get) \n     { \n      this.props.articleActions.articlesList(this.props.article); \n    } \n  }\n\n```", "```js\nconst muiCoreLayout = themeDecorator(getMuiTheme(null, { \n userAgent: 'all' }))(CoreLayout); \n export default connect(mapStateToProps, \n mapDispatchToProps)(muiCoreLayout);\n\n```", "```js\nrender () { \n\n  let articlesJSX = []; \n\n  this.props.article.forEach((articleDetails, articleKey) => { \n    const currentArticleJSX = ( \n      <div key={articleKey}> \n        <ArticleCard  \n          title={articleDetails.articleTitle} \n          content={articleDetails.articleContent} /> \n      </div> \n    ); \n\n    articlesJSX.push(currentArticleJSX); \n  }); \n\n  return ( \n    <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        {articlesJSX} \n    </div> \n  ); \n}\n\n```", "```js\nrender () { \n\n  let articlesJSX = []; \n  this.props.article.forEach((articleDetails, articleKey) => { \n    const currentArticleJSX = ( \n      <ListItem \n        key={articleKey} \n        leftAvatar={<img src='/static/placeholder.png'  \n    width='50'  \n    height='50' />} \n        primaryText={articleDetails.articleTitle} \n        secondaryText={articleDetails.articleContent} \n      /> \n    ); \n\n    articlesJSX.push(currentArticleJSX); \n  }); \n\n  return ( \n    <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n      <Link to='/add-article'> \n        <RaisedButton  \n          label='Create an article'  \n          secondary={true}  \n          style={{margin: '20px 20px 20px 20px'}} /> \n      </Link> \n\n      <List> \n        {articlesJSX} \n      </List> \n    </div> \n  ); \n}\n\n```", "```js\nthis.props.article.forEach((articleDetails, articleKey) => {\n\n```", "```js\nimport {bindActionCreators} from 'redux'; \nimport {Link} from 'react-router'; \nimport articleActions from '../../actions/article.js'; \nimport RaisedButton from 'material-ui/lib/raised-button';\n\n```", "```js\n// this is old code, you shall have it already \nconst mapDispatchToProps = (dispatch) => ({ \n});\n\n```", "```js\nconst mapDispatchToProps = (dispatch) => ({ \n  articleActions: bindActionCreators(articleActions, dispatch) \n});\n\n```", "```js\n constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n    this._articleSubmit = this._articleSubmit.bind(this); \n\n    this.state = { \n      title: 'test', \n      contentJSON: {}, \n      htmlContent: '', \n      newArticleID: null \n    }; \n  }\n\n```", "```js\n _articleSubmit() { \n    let newArticle = { \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    } \n\n    let newArticleID = 'MOCKEDRandomid' + Math.floor(Math.random() \n     * 10000); \n\n    newArticle['_id'] = newArticleID; \n    this.props.articleActions.pushNewArticle(newArticle); \n    this.setState({ newArticleID: newArticleID}); \n  }\n\n```", "```js\nlet newArticle = { \n  articleTitle: this.state.title, \n  articleContent: this.state.htmlContent, \n  articleContentJSON: this.state.contentJSON \n}\n\n```", "```js\n render () { \n    if (this.state.newArticleID) { \n      return ( \n        <div style={{height: '100%', width: '75%', margin: \n         'auto'}}> \n          <h3>Your new article ID is \n           {this.state.newArticleID}</h3> \n          <Link to='/dashboard'> \n            <RaisedButton \n              secondary={true} \n              type='submit' \n              style={{margin: '10px auto', display: 'block', \n               width: 150}} \n              label='Done' /> \n          </Link> \n        </div> \n      ); \n    } \n\n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Add Article</h1> \n        <WYSIWYGeditor \n          name='addarticle' \n\n          onChangeTextJSON={this._onDraftJSChange} /> \n          <RaisedButton \n            onClick={this._articleSubmit} \n            secondary={true} \n            type='submit' \n            style={{margin: '10px auto', display: 'block', width: \n             150}} \n            label={'Submit Article'} /> \n      </div> \n    ); \n  }\n\n```", "```js\nimport EditArticleView from '../views/articles/EditArticleView';\n\n```", "```js\nexport default ( \n  <Route component={CoreLayout} path='/'> \n    <IndexRoute component={PublishingApp} name='home' /> \n    <Route component={LoginView} path='login' name='login' /> \n    <Route component={LogoutView} path='logout' name='logout' /> \n    <Route component={RegisterView} path='register' \n     name='register' /> \n    <Route component={DashboardView} \n    path='dashboard' name='dashboard' /> \n    <Route component={AddArticleView} \n    path='add-article' name='add-article' /> \n    <Route component={EditArticleView} \n  path='/edit-article/:articleID' name='edit-article' /> \n  </Route> \n);\n\n```", "```js\nimport React from 'react'; \nimport Falcor from 'falcor'; \nimport {Link} from 'react-router'; \nimport falcorModel from '../../falcorModel.js'; \nimport {connect} from 'react-redux'; \nimport {bindActionCreators} from 'redux'; \nimport articleActions from '../../actions/article.js'; \nimport WYSIWYGeditor from '../../components/articles/WYSIWYGeditor'; \nimport {stateToHTML} from 'draft-js-export-html'; \nimport RaisedButton from 'material-ui/lib/raised-button'; \n\nconst mapStateToProps = (state) => ({ \n  ...state \n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n  articleActions: bindActionCreators(articleActions, dispatch) \n}); \n\nclass EditArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n  } \n\n  render () { \n    return <h1>An edit article MOCK</h1> \n  } \n} \nexport default connect(mapStateToProps, \n mapDispatchToProps)(EditArticleView);\n\n```", "```js\n let articlesJSX = []; \n  this.props.article.forEach((articleDetails, articleKey) => { \n    let currentArticleJSX = ( \n      <Link to={&grave;/edit-article/${articleDetails['_id']}&grave;} \n       key={articleKey}> \n        <ListItem \n          leftAvatar={<img  \n          src='/static/placeholder.png' \n          width='50' \n          height='50' />} \n          primaryText={articleDetails.articleTitle} \n          secondaryText={articleDetails.articleContent} \n        /> \n      </Link> \n    ); \n\n    articlesJSX.push(currentArticleJSX); \n  });\n\n```", "```js\nexport default { \n  articlesList: (response) => { \n    return { \n      type: 'ARTICLES_LIST_ADD', \n      payload: { response: response } \n    } \n  }, \n  pushNewArticle: (response) => { \n    return { \n      type: 'PUSH_NEW_ARTICLE', \n      payload: { response: response } \n    } \n  }, \n  editArticle: (response) => { \n    return { \n      type: 'EDIT_ARTICLE', \n      payload: { response: response } \n    } \n  } \n}\n\n```", "```js\nimport mapHelpers from '../utils/mapHelpers'; \n\nconst article = (state = {}, action) => { \n  switch (action.type) { \n    case 'ARTICLES_LIST_ADD': \n      let articlesList = action.payload.response; \n      return mapHelpers.addMultipleItems(state, articlesList); \n    case 'PUSH_NEW_ARTICLE': \n      let newArticleObject = action.payload.response; \n      return mapHelpers.addItem(state, newArticleObject['_id'], \n       newArticleObject); \n    case 'EDIT_ARTICLE': \n      let editedArticleObject = action.payload.response; \n      return mapHelpers.addItem(state, editedArticleObject['_id'], \n       editedArticleObject); \n    default: \n      return state; \n  } \n};export default article;\n\n```", "```js\nexport default class  WYSIWYGeditor extends React.Component { \n  constructor(props) { \n    super(props); \n\n    let initialEditorFromProps; \n\n    if (typeof props.initialValue === 'undefined' || typeof \n     props.initialValue !== 'object') { \n      initialEditorFromProps = \n       EditorState.createWithContent \n       (ContentState.createFromText('')); \n    } else { \n      let isInvalidObject = typeof props.initialValue.entityMap \n       === 'undefined' || typeof props.initialValue.blocks === \n       'undefined'; \n\n      if (isInvalidObject) { \n        alert('Invalid article-edit error provided, exit'); \n        return; \n      } \n      let draftBlocks = convertFromRaw(props.initialValue); \n      let contentToConsume = \n       ContentState.createFromBlockArray(draftBlocks); \n\n      initialEditorFromProps = \n       EditorState.createWithContent(contentToConsume); \n    } \n\n    this.state = { \n      editorState: initialEditorFromProps \n    }; \n\n    this.focus = () => this.refs['refWYSIWYGeditor'].focus(); \n    this.onChange = (editorState) => {  \n      var contentState = editorState.getCurrentContent(); \n\n      let contentJSON = convertToRaw(contentState); \n      props.onChangeTextJSON(contentJSON, contentState); \n      this.setState({editorState})  \n    }; \n\n    this.handleKeyCommand = (command) => \n     this._handleKeyCommand(command); \n      this.toggleInlineStyle = (style) => \n       this._toggleInlineStyle(style); \n      this.toggleBlockType = (type) => \n       this._toggleBlockType(type); \n  }\n\n```", "```js\nlet isInvalidObject = typeof props.initialValue.entityMap === \n 'undefined' || typeof blocks === 'undefined'; \nif (isInvalidObject) { \n  alert('Error: Invalid article-edit object provided, exit'); \n  return; \n} \nlet draftBlocks = convertFromRaw(props.initialValue); \nlet contentToConsume = \n ContentState.createFromBlockArray(draftBlocks); \n initialEditorFromProps = \n EditorState.createWithContent(contentToConsume);\n\n```", "```js\nclass EditArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n    this._articleEditSubmit = this._articleEditSubmit.bind(this); \n    this._fetchArticleData = this._fetchArticleData.bind(this); \n\n    this.state = { \n      articleFetchError: null, \n      articleEditSuccess: null, \n      editedArticleID: null, \n      articleDetails: null, \n      title: 'test', \n      contentJSON: {}, \n      htmlContent: '' \n    }; \n  }\n\n```", "```js\n componentWillMount() { \n    this._fetchArticleData(); \n  } \n\n  _fetchArticleData() { \n    let articleID = this.props.params.articleID; \n    if (typeof window !== 'undefined' && articleID) { \n        let articleDetails = this.props.article.get(articleID); \n        if(articleDetails) { \n          this.setState({  \n            editedArticleID: articleID,  \n            articleDetails: articleDetails \n          }); \n        } else { \n          this.setState({ \n            articleFetchError: true \n          }) \n        } \n    } \n  } \n\n  onDraftJSChange(contentJSON, contentState) { \n    let htmlContent = stateToHTML(contentState); \n    this.setState({contentJSON, htmlContent}); \n  } \n\n  _articleEditSubmit() { \n    let currentArticleID = this.state.editedArticleID; \n    let editedArticle = { \n      _id: currentArticleID, \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    } \n\n    this.props.articleActions.editArticle(editedArticle); \n    this.setState({ articleEditSuccess: true }); \n  }\n\n```", "```js\nif (articleDetails) { \n  this.setState({  \n    editedArticleID: articleID,  \n    articleDetails: articleDetails \n  }); \n} else { \n  this.setState({ \n    articleFetchError: true \n  }) \n}\n\n```", "```js\nrender () { \n    if (this.state.articleFetchError) { \n      return <h1>Article not found (invalid article's ID \n       {this.props.params.articleID})</h1>; \n    } else if (!this.state.editedArticleID) { \n        return <h1>Loading article details</h1>; \n    } else if (this.state.articleEditSuccess) { \n      return ( \n        <div style={{height: '100%', width: '75%', margin: \n         'auto'}}> \n          <h3>Your article has been edited successfully</h3> \n          <Link to='/dashboard'> \n            <RaisedButton \n              secondary={true} \n              type='submit' \n              style={{margin: '10px auto', display: 'block', \n               width: 150}} \n              label='Done' /> \n          </Link> \n        </div> \n      ); \n    } \n\n    let initialWYSIWYGValue = \n     this.state.articleDetails.articleContentJSON; \n\n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Edit an existing article</h1> \n        <WYSIWYGeditor \n          initialValue={initialWYSIWYGValue} \n          name='editarticle' \n          title='Edit an article' \n          onChangeTextJSON={this._onDraftJSChange} /> \n          <RaisedButton \n            onClick={this._articleEditSubmit} \n            secondary={true} \n            type='submit' \n            style={{margin: '10px auto', display: 'block', \n             width: 150}} \n            label={'Submit Edition'} /> \n      </div> \n    ); \n  }\n\n```", "```js\n<WYSIWYGeditor \n  initialValue={initialWYSIWYGValue} \n  name='editarticle' \n  title='Edit an article' \n  onChangeTextJSON={this._onDraftJSChange} />\n\n```", "```js\ndeleteArticle: (response) => { \n  return { \n    type: 'DELETE_ARTICLE', \n    payload: { response: response } \n  } \n}\n\n```", "```js\nimport mapHelpers from '../utils/mapHelpers'; \n\nconst article = (state = {}, action) => { \n  switch (action.type) { \n    case 'ARTICLES_LIST_ADD': \n      let articlesList = action.payload.response; \n      return mapHelpers.addMultipleItems(state, articlesList); \n    case 'PUSH_NEW_ARTICLE': \n      let newArticleObject = action.payload.response; \n      return mapHelpers.addItem(state, newArticleObject['_id'], \n       newArticleObject); \n    case 'EDIT_ARTICLE': \n      let editedArticleObject = action.payload.response; \n      return mapHelpers.addItem(state, editedArticleObject['_id'], \n       editedArticleObject); \n    case 'DELETE_ARTICLE': \n      let deleteArticleId = action.payload.response; \n      return mapHelpers.deleteItem(state, deleteArticleId); \n    default: \n      return state; \n  } \nexport default article\n\n```", "```js\nimport Popover from 'material-ui/lib/popover/popover'; \nImprove the constructor of EditArticleView: \nclass EditArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n    this._articleEditSubmit = this._articleEditSubmit.bind(this); \n    this._fetchArticleData = this._fetchArticleData.bind(this); \n    this._handleDeleteTap = this._handleDeleteTap.bind(this); \n    this._handleDeletion = this._handleDeletion.bind(this); \n    this._handleClosePopover = \n     this._handleClosePopover.bind(this); \n\n    this.state = { \n      articleFetchError: null, \n      articleEditSuccess: null, \n      editedArticleID: null, \n      articleDetails: null, \n      title: 'test', \n      contentJSON: {}, \n      htmlContent: '', \n      openDelete: false, \n      deleteAnchorEl: null \n    }; \n  }\n\n```", "```js\n _handleDeleteTap(event) { \n    this.setState({ \n      openDelete: true, \n      deleteAnchorEl: event.currentTarget \n    }); \n  } \n\n  _handleDeletion() { \n    let articleID = this.state.editedArticleID; \n    this.props.articleActions.deleteArticle(articleID); \n\n    this.setState({ \n      openDelete: false \n    }); \n    this.props.history.pushState(null, '/dashboard'); \n  } \n\n  _handleClosePopover() { \n    this.setState({ \n      openDelete: false \n    }); \n  }\n\n```", "```js\nlet initialWYSIWYGValue = \n this.state.articleDetails.articleContentJSON; \n\n return ( \n   <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n     <h1>Edit an exisitng article</h1> \n     <WYSIWYGeditor \n       initialValue={initialWYSIWYGValue} \n       name='editarticle' \n       title='Edit an article' \n       onChangeTextJSON={this._onDraftJSChange} /> \n       <RaisedButton \n         onClick={this._articleEditSubmit} \n         secondary={true} \n         type='submit' \n         style={{margin: '10px auto', display: 'block', \n          width: 150}} \n         label={'Submit Edition'} /> \n     <hr /> \n     <h1>Delete permanently this article</h1> \n       <RaisedButton \n         onClick={this._handleDeleteTap} \n         label='Delete' /> \n       <Popover \n         open={this.state.openDelete} \n         anchorEl={this.state.deleteAnchorEl} \n         anchorOrigin={{horizontal: 'left', vertical: \n          'bottom'}} \n         targetOrigin={{horizontal: 'left', vertical: 'top'}} \n         onRequestClose={this._handleClosePopover}> \n         <div style={{padding: 20}}> \n           <RaisedButton  \n             onClick={this._handleDeletion}  \n             primary={true}  \n             label=\"Permanent delete, click here\"/> \n         </div> \n       </Popover> \n   </div> \n );\n\n```"]