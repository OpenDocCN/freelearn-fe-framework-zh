["```js\nnpx relay-compiler\n```", "```js\n    import {\n      fetchResponseOk,\n      fetchResponseError\n    } from \"./builders/fetch\";\n    import {\n      performFetch\n    } from \"../src/relayEnvironment\";\n    describe(\"performFetch\", () => {\n      let response = { data: { id: 123 } };\n      const text = \"test\";\n      const variables = { a: 123 };\n      beforeEach(() => {\n        jest\n          .spyOn(global, \"fetch\")\n          .mockResolvedValue(fetchResponseOk(response));\n      });\n    });\n    ```", "```js\n    it(\"sends HTTP request to POST /graphql\", () => {\n      performFetch({ text }, variables);\n      expect(global.fetch).toBeCalledWith(\n        \"/graphql\",\n        expect.objectContaining({\n          method: \"POST\",\n        })\n      );\n    });\n    ```", "```js\n    export const performFetch = (operation, variables) =>\n      global\n        .fetch(\"/graphql\", {\n          method: \"POST\",\n        });\n    ```", "```js\n    it(\"calls fetch with the correct configuration\", () => {\n      performFetch({ text }, variables);\n      expect(global.fetch).toBeCalledWith(\n        \"/graphql\",\n        expect.objectContaining({\n          credentials: \"same-origin\",\n          headers: { \"Content-Type\": \"application/json\" },\n        })\n      );\n    });\n    ```", "```js\n    export const performFetch = (operation, variables) =>\n      global\n        .fetch(\"/graphql\", {\n          method: \"POST\",\n          credentials: \"same-origin\",\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n    ```", "```js\n    it(\"calls fetch with query and variables as request body\", async () => {\n      performFetch({ text }, variables);\n      expect(global.fetch).toBeCalledWith(\n        \"/graphql\",\n        expect.objectContaining({\n          body: JSON.stringify({\n            query: text,\n            variables,\n          }),\n        })\n      );\n    });\n    ```", "```js\n    export const performFetch = (operation, variables) =>\n      global\n        .fetch(\"/graphql\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            query: operation.text,\n            variables\n          })\n        });\n    ```", "```js\n    it(\"returns the request data\", async () => {\n      const result = await performFetch(\n         { text }, variables\n      );\n      expect(result).toEqual(response);\n    });\n    ```", "```js\n    export const performFetch = (operation, variables) =>\n      global\n      .fetch(\"/graphql\", ...)\n      .then(result => result.json());\n    ```", "```js\n    it(\"rejects when the request fails\", () => {\n      global.fetch.mockResolvedValue(\n        fetchResponseError(500)\n      );\n      return expect(\n        performFetch({ text }, variables)\n      ).rejects.toEqual(new Error(500));\n    });\n    ```", "```js\n    const verifyStatusOk = result => {\n      if (!result.ok) {\n        return Promise.reject(new Error(500));\n      } else {\n        return result;\n      }\n    };\n    ```", "```js\n    export const performFetch = (operation, variables) =>\n      global\n        .fetch(\"/graphql\", ...)\n        .then(verifyStatusOk)\n        .then(result => result.json());\n    ```", "```js\n    import {\n      performFetch,\n      buildEnvironment\n    } from \"../src/relayEnvironment\";\n    ```", "```js\n    import {\n      Environment,\n      Network,\n      Store,\n      RecordSource\n    } from \"relay-runtime\";\n    jest.mock(\"relay-runtime\");\n    ```", "```js\n    describe(\"buildEnvironment\", () => {\n      const environment = { a: 123 };\n      beforeEach(() => {\n        Environment.mockImplementation(() => environment);\n      });\n      it(\"returns environment\", () => {\n        expect(buildEnvironment()).toEqual(environment);\n      });\n    });\n    ```", "```js\n    import {\n      Environment,\n      Network,\n      RecordSource,\n      Store\n    } from \"relay-runtime\";\n    ```", "```js\n    export const buildEnvironment = () =>\n        new Environment();\n    ```", "```js\n    describe(\"buildEnvironment\", () => {\n      const environment = { a: 123 };\n      const network = { b: 234 };\n      const store = { c: 345 };\n      beforeEach(() => {\n        Environment.mockImplementation(() => environment);\n        Network.create.mockReturnValue(network);\n        Store.mockImplementation(() => store);\n      });\n      it(\"returns environment\", () => {\n        expect(buildEnvironment()).toEqual(environment);\n      });\n      it(\"calls Environment with network and store\", () => {\n        expect(Environment).toBeCalledWith({\n          network,\n          store\n        });\n    });\n    });\n    ```", "```js\n    export const buildEnvironment = () =>\n      new Environment({\n        network: Network.create(),\n        store: new Store()\n      });\n    ```", "```js\n    it(\"calls Network.create with performFetch\", () => {\n      expect(Network.create).toBeCalledWith(performFetch);\n    });\n    ```", "```js\n    export const buildEnvironment = () =>\n      new Environment({\n        network: Network.create(performFetch),\n        store: new Store()\n      });\n    ```", "```js\n    describe(\"buildEnvironment\", () => {\n      ...\n      const recordSource = { d: 456 };\n      beforeEach(() => {\n        ...\n        RecordSource.mockImplementation(\n          () => recordSource\n        );\n      });\n      ...\n    });\n    ```", "```js\n    it(\"calls Store with RecordSource\", () => {\n      expect(Store).toBeCalledWith(recordSource);\n    });\n    ```", "```js\n    export const buildEnvironment = () =>\n      new Environment({\n        network: Network.create(performFetch),\n        store: new Store(new RecordSource())\n      });\n    ```", "```js\n    import {\n      performFetch,\n      buildEnvironment,\n      getEnvironment\n    } from \"../src/relayEnvironment\";\n    ```", "```js\n    describe(\"getEnvironment\", () => {\n      it(\"constructs the object only once\", () => {\n        getEnvironment();\n        getEnvironment();\n        expect(Environment.mock.calls.length).toEqual(1);\n      });\n    });\n    ```", "```js\n    let environment = null;\n    export const getEnvironment = () =>\n      environment || (environment = buildEnvironment());\n    ```", "```js\ncustomer(id: $id) {\n  id\n  firstName\n  lastName\n  phoneNumber\n  appointments {\n    startsAt\n    stylist\n    service\n    notes\n  }\n}\n```", "```js\n    import React from \"react\";\n    import { act } from \"react-dom/test-utils\";\n    import {\n      initializeReactContainer,\n      render,\n      renderAndWait,\n      container,\n      element,\n      elements,\n      textOf,\n    } from \"./reactTestExtensions\";\n    import { fetchQuery } from \"relay-runtime\";\n    import {\n      CustomerHistory,\n      query\n    } from \"../src/CustomerHistory\";\n    import {\n      getEnvironment\n    } from \"../src/relayEnvironment\";\n    jest.mock(\"relay-runtime\");\n    jest.mock(\"../src/relayEnvironment\");\n    ```", "```js\n    const date = new Date(\"February 16, 2019\");\n    const appointments = [\n      {\n        startsAt: date.setHours(9, 0, 0, 0),\n        stylist: \"Jo\",\n        service: \"Cut\",\n        notes: \"Note one\"\n      },\n      {\n        startsAt: date.setHours(10, 0, 0, 0),\n        stylist: \"Stevie\",\n        service: \"Cut & color\",\n        notes: \"Note two\"\n      }\n    ];\n    const customer = {\n      firstName: \"Ashley\",\n      lastName: \"Jones\",\n      phoneNumber: \"123\",\n      appointments\n    };\n    ```", "```js\n    describe(\"CustomerHistory\", () => {\n      let unsubscribeSpy = jest.fn();\n      const sendCustomer = ({ next }) => {\n        act(() => next({ customer }));\n        return { unsubscribe: unsubscribeSpy };\n      };\n      beforeEach(() => {\n        initializeReactContainer();\n        fetchQuery.mockReturnValue(\n          { subscribe: sendCustomer }\n        );\n      });\n    });\n    ```", "```js\n    it(\"calls fetchQuery\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      expect(fetchQuery).toBeCalledWith(\n        getEnvironment(), query, { id: 123 }\n      );\n    });\n    ```", "```js\n    import React, { useEffect } from \"react\";\n    import { fetchQuery, graphql } from \"relay-runtime\";\n    import { getEnvironment } from \"./relayEnvironment\";\n    export const query = graphql`\n      query CustomerHistoryQuery($id: ID!) {\n        customer(id: $id) {\n          id\n          firstName\n          lastName\n          phoneNumber\n          appointments {\n            startsAt\n            stylist\n            service\n            notes\n          }\n        }\n      }\n    `;\n    ```", "```js\n    export const CustomerHistory = ({ id }) => {\n      useEffect(() => {\n        fetchQuery(getEnvironment(), query, { id });\n      }, [id]);\n      return null;\n    };\n    ```", "```js\n        Cannot find module './__generated__/CustomerHistoryQuery.graphql' from 'src/CustomerHistory.js'\n    ```", "```js\nnpx relay-compiler\n```", "```js\n    it(\"unsubscribes when id changes\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      await renderAndWait(<CustomerHistory id={234} />);\n      expect(unsubscribeSpy).toBeCalled();\n    });\n    ```", "```js\n    useEffect(() => {\n      const subscription = fetchQuery(\n        getEnvironment(), query, { id }\n      );\n      return subscription.unsubscribe;\n    }, [id]);\n    ```", "```js\n    it(\"renders the first name and last name together in a h2\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      await new Promise(setTimeout);\n      expect(element(\"h2\")).toContainText(\"Ashley Jones\");\n    });\n    ```", "```js\n    export const CustomerHistory = ({ id }) => {\n      const [customer, setCustomer] = useState(null);\n      useEffect(() => {\n        const subscription = fetchQuery(\n          getEnvironment(), query, { id }\n        ).subscribe({\n          next: ({ customer }) => setCustomer(customer),\n        });\n        return subscription.unsubscribe;\n      }, [id]);\n    ```", "```js\n    const { firstName, lastName } = customer;\n    return (\n      <>\n        <h2>\n          {firstName} {lastName}\n        </h2>\n      </>\n    );\n    ```", "```js\n    it(\"renders the phone number\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      expect(document.body).toContainText(\"123\");\n    });\n    ```", "```js\n    const { firstName, lastName, phoneNumber } = customer;\n    return (\n      <>\n        <h2>\n          {firstName} {lastName}\n        </h2>\n        <p>{phoneNumber}</p>\n      </>\n    );\n    ```", "```js\n    it(\"renders a Booked appointments heading\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      expect(element(\"h3\")).not.toBeNull();\n      expect(element(\"h3\")).toContainText(\n        \"Booked appointments\"\n      );\n    });\n    ```", "```js\n    const { firstName, lastName, phoneNumber } = customer;\n    return (\n      <>\n        <h2>\n          {firstName} {lastName}\n        </h2>\n        <p>{phoneNumber}</p>\n        <h3>Booked appointments</h3>\n      </>\n    );\n    ```", "```js\n    it(\"renders a table with four column headings\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      const headings = elements(\n        \"table > thead > tr > th\"\n      );\n      expect(textOf(headings)).toEqual([\n        \"When\",\n        \"Stylist\",\n        \"Service\",\n        \"Notes\",\n      ]);\n    });\n    ```", "```js\n    const { firstName, lastName, phoneNumber } = customer;\n    return (\n      <>\n        <h2>\n          {firstName} {lastName}\n        </h2>\n        <p>{phoneNumber}</p>\n        <h3>Booked appointments</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>When</th>\n              <th>Stylist</th>\n              <th>Service</th>\n              <th>Notes</th>\n            </tr>\n          </thead>\n        </table>\n      </>\n    );\n    ```", "```js\n    const columnValues = (columnNumber) =>\n      elements(\"tbody > tr\").map(\n        (tr) => tr.childNodes[columnNumber]\n      );\n    it(\"renders the start time of each appointment in the correct format\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      expect(textOf(columnValues(0))).toEqual([\n        \"Sat Feb 16 2019 09:00\",\n        \"Sat Feb 16 2019 10:00\",\n      ]);\n    });\n    ```", "```js\n    <table>\n      <thead>\n        ...\n      </thead>\n      <tbody>\n        {customer.appointments.map((appointment, i) => (\n          <AppointmentRow\n            appointment={appointment}\n            key={i}\n          />\n        ))}\n      </tbody>\n    </table>\n    ```", "```js\n    const toTimeString = (startsAt) =>\n      new Date(Number(startsAt))\n        .toString()\n        .substring(0, 21);\n    const AppointmentRow = ({ appointment }) => (\n      <tr>\n        <td>{toTimeString(appointment.startsAt)}</td>\n      </tr>\n    );\n    ```", "```js\n    it(\"renders the stylist\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      expect(textOf(columnValues(1))).toEqual([\n        \"Jo\", \"Stevie\"\n      ]);\n    });\n    ```", "```js\n    const AppointmentRow = ({ appointment }) => (\n      <tr>\n        <td>{toTimeString(appointment.startsAt)}</td>\n        <td>{appointment.stylist}</td>\n      </tr>\n    );\n    ```", "```js\n    it(\"renders the service\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      expect(textOf(columnValues(2))).toEqual([\n        \"Cut\",\n        \"Cut & color\",\n      ]);\n    });\n    ```", "```js\n    const AppointmentRow = ({ appointment }) => (\n      <tr>\n        <td>{toTimeString(appointment.startsAt)}</td>\n        <td>{appointment.stylist}</td>\n        <td>{appointment.service}</td>\n      </tr>\n    );\n    ```", "```js\n    it(\"renders notes\", async () => {\n      await renderAndWait(<CustomerHistory id={123} />);\n      expect(textOf(columnValues(3))).toEqual([\n        \"Note one\",\n        \"Note two\",\n      ]);\n    });\n    ```", "```js\n    const AppointmentRow = ({ appointment }) => (\n      <tr>\n        <td>{toTimeString(appointment.startsAt)}</td>\n        <td>{appointment.stylist}</td>\n        <td>{appointment.service}</td>\n        <td>{appointment.notes}</td>\n      </tr>\n    );\n    ```", "```js\n    describe(\"submitting\", () => {\n      const noSend = () => unsubscribeSpy;\n      beforeEach(() => {\n        fetchQuery.mockReturnValue({ subscribe: noSend });\n      });\n      it(\"displays a loading message\", async () => {\n        await renderAndWait(<CustomerHistory id={123} />);\n        expect(element(\"[role=alert]\")).toContainText(\n          \"Loading\"\n        );\n      });\n    });\n    ```", "```js\n    export const CustomerHistory = ({ id }) => {\n      const [customer, setCustomer] = useState(null);\n      useEffect(() => {\n        ...\n      }, [id]);\n      if (!customer) {\n        return <p role=\"alert\">Loading</p>;\n      }\n      ...\n    };\n    ```", "```js\n    describe(\"when there is an error fetching data\", () => {\n      const errorSend = ({ error }) => {\n        act(() => error());\n        return { unsubscribe: unsubscribeSpy };\n      };\n      beforeEach(() => {\n        fetchQuery.mockReturnValue(\n          { subscribe: errorSend }\n        );\n      });\n      it(\"displays an error message\", async () => {\n        await renderAndWait(<CustomerHistory />);\n        expect(element(\"[role=alert]\")).toContainText(\n          \"Sorry, an error occurred while pulling data from the server.\"\n        );\n      });\n    });\n    ```", "```js\n    const [customer, setCustomer] = useState(null);\n    const [status, setStatus] = useState(\"loading\");\n    useEffect(() => {\n      const subscription = fetchQuery(\n        getEnvironment(), query, { id }\n      ).subscribe({\n        next: ({ customer }) => {\n          setCustomer(customer);\n          setStatus(\"loaded\");\n        },\n        error: (_) => setStatus(\"failed\"),\n      })\n      return subscription.unsubscribe;\n    }, [id]);\n    if (status === \"loading\") {\n      return <p role=\"alert\">Loading</p>;\n    }\n    if (status === \"failed\") {\n      return (\n        <p role=\"alert\">\n          Sorry, an error occurred while pulling data from\n    the server.\n        </p>\n      );\n    }\n    const { firstName, lastName, phoneNumber } = customer;\n    ...\n    ```"]