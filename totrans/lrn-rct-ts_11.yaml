- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reusable Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a checklist component and use various patterns
    to make it highly reusable but still strongly typed.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by using TypeScript **generics** to strongly type the data passed
    to the component. Then, we will use the **props spreading** pattern to make the
    component API-flexible, and allow consumers of the component to custom render
    parts of the component using the **render props** pattern. After that, we will
    learn how to make custom hooks and use this to extract logic for checked items
    and how to make the state within a component controllable to change the component’s
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using generic props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using props spreading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using render props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding checked functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing the internal state to be controlled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: You can install them here: [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: You can install it here: [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create the project for the app we will build and its
    folder structure. The folder structure will be straightforward because it contains
    a single page with the checklist component we will build.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will develop the app using Visual Studio Code as in previous chapters, so
    open Visual Studio Code and carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the project using Create React App. See [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting up React and TypeScript*, if you can’t remember the steps for this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will style the app with Tailwind CSS, so install this into the project and
    configure it. See [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127), *Approaches
    to Styling Frontends*, if you can’t remember the steps for this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That completes the project setup.
  prefs: []
  type: TYPE_NORMAL
- en: Using generic props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll take some time to understand how to create our own generic
    types and also learn about the `keyof` TypeScript feature, which is useful for
    generic types. We will use this knowledge to build the first iteration of the
    checklist component with a generic type for its props.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding generics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used generics throughout this book. For example, the `useState` hook
    has an optional generic parameter for the type of state variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Generic parameters in a function allow that function to be reusable with different
    types and be strongly typed. The following function returns the first element
    in an array, or `null` if the array is empty. However, the function only works
    with a `string` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generics allows us to make this function usable with any type of array.
  prefs: []
  type: TYPE_NORMAL
- en: Generic functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Although we have used generic functions throughout this book, we haven’t created
    our own generic function yet. Generic type parameters are defined in angled brackets
    before the function’s parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The name of a generic type can be anything you like, but it should be meaningful
    so that it is easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a generic version of the function we saw earlier. Now, it can work
    with arrays containing any type of element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The function has a single generic parameter called `Item`, which is used in
    the type of the `array` function parameter, as well as the function’s return type.
  prefs: []
  type: TYPE_NORMAL
- en: Generic types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Custom types can be generic as well. For a `type` alias, its generic parameters
    are defined in angled brackets after the type name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, the props of a React component can be generic. An example of a
    generic props type is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `Props` type has a single generic parameter called `Item`, which is used
    in the type of the `items` prop.
  prefs: []
  type: TYPE_NORMAL
- en: Generic React components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Generic props can be integrated into a generic function to produce a generic
    React component. Here’s an example of a generic `List` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `items` prop in the `List` component can now have any type, making the component
    flexible and reusable.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to create a component with generic props, we will
    create the first iteration of the checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic list component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now start to create our reusable component. In this iteration, it will
    be a basic list containing some primary and secondary text obtained from an array
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a folder for the component called `Checklist` in the `src`
    folder. Then, create a file called `Checklist.tsx` in this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Checklist.tsx` and add the following `Props` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an explanation of each prop:'
  prefs: []
  type: TYPE_NORMAL
- en: The `data` prop is the data that drives the items in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `id` prop is the property’s name in each data item that uniquely identifies
    the item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `primary` prop is the property’s name in each data item that contains the
    main text to render in each item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `secondary` prop is the property’s name in each data item that includes
    the supplementary text to render in each item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the first time we have encountered the `keyof` operator in a type annotation.
    It queries the type specified after it for the property names and constructs a
    union type from them, so the type for `id`, `primary`, and `secondary` will be
    a union type of all the property names for each data item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, start to implement the component function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component renders a gray, unordered list element with rounded corners. We
    also map over the data items where we will eventually render each item.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by implementing the function inside `data.map`. The function
    checks whether the unique identifier (`idValue`) is a string or number, and if
    not, it won’t render anything. The function also checks that the primary text
    property (`primaryText`) is a string, and again, if not, doesn’t render anything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finish the implementation by rendering the list item as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The list items are rendered with a white background and rounded corners. The
    primary text is rendered as large, gray text with the secondary text rendered
    much smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file in the `Checklist` folder called `index.ts` and export the
    `Checklist` component into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file will simplify `import` statements for the `Checklist` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step before seeing the component in action is to add it to the component
    tree in the app. Open `App.tsx` and replace the content within it with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We reference the `Checklist` component and pass some data into it. Notice how
    type-safe the `id`, `primary`, and `secondary` attributes are – we are forced
    to enter a valid property name with the data items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app by entering `npm start` in the terminal. The checklist component
    appears as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Our basic checklist component](img/B19051_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Our basic checklist component
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the component renders a basic list – we will add the checked functionality
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: That completes this section on generic props.
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap, here are some key points:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript generics allow reusable code to be strongly typed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions can have generic parameters that are referenced within the implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types can also have generic parameters that are referenced within the implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A React component can be made generic by feeding a generic props type into a
    generic function component. The component implementation will then be based on
    generic props.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will learn about a pattern that allows the prop type to inherit props
    from an HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: Using props spreading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll learn about a pattern called `ul` element. This will
    allow consumers of the component to specify props, such as the height and width
    of the checklist.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Checklist.tsx` and import the following type from React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This type allows us to reference the props of an HTML element such as `ul`.
    It is a generic type that takes the HTML element name as a generic parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the props from the `ul` element to the component props type as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `ulProps` to collect all the props for the `ul` element into a single
    `ulProps` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the first time we have used rest parameters in this book. They collect
    multiple arguments that are passed into the function into an array, so any props
    that aren’t called `data`, `id`, `primary`, or `secondary` will be collected into
    the `ulProps` array. For more information on rest parameters, see [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can spread `ulProps` onto the `ul` element using the spread syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use this new feature of `Checklist` to specify the list height and width.
    Open `App.tsx` and add the following `style` attribute, as well as more data items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component appears sized as we expect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The sized checklist component](img/B19051_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – The sized checklist component
  prefs: []
  type: TYPE_NORMAL
- en: The component now has a fixed height with a vertical scrollbar as a result of
    the style we passed into the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'That completes our use of the props spreading pattern. Here’s a recap of the
    key points:'
  prefs: []
  type: TYPE_NORMAL
- en: We intersect the props type with `ComponentPropsWithoutRef` to add props for
    the HTML element we want to spread onto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use a rest parameter in the component props to collect all the HTML element
    props into an array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can then spread the rest parameter onto the HTML element in the JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will learn about a pattern that allows consumers to render parts of
    a component.
  prefs: []
  type: TYPE_NORMAL
- en: Using render props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about the **render props** pattern and use it
    to allow the consumer of the component to render items within the checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the render props pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A way of making a component highly reusable is to allow the consumer to render
    internal elements within it. The `children` prop on a `button` element is an example
    of this because it allows us to specify any button content we like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'The render props pattern allows us to use a prop other than `children` to provide
    this capability. This is useful when the `children` prop is already used for something
    else, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Here, `heading` is a render prop in a `Modal` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Render props are useful when allowing the consumer to render elements associated
    with the data passed into the component because the render prop can be a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example has a render prop called `renderItem` that renders each
    list item in a `List` component. The data item is passed into it so it can include
    its properties in the list item. This is similar to what we will implement next
    for our checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a renderItem prop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a prop called `renderItem` to the checklist that allows consumers
    to take control of the rendering of the list items. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Checklist.tsx` and add the `ReactNode` type to the React `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ReactNode` represents an element that React can render. Therefore, we will
    use `ReactNode` as the return type for our render prop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a render prop called `renderItem` to the `Props` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The prop is a function that takes in the data item and returns what needs rendering.
    We have made the prop optional because we will provide a default implementation
    for list items but also allow consumers to override it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `renderItem` to the component function parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSX, at the top of the mapping function, add an `if` statement to check
    whether the `renderItem` prop has been specified. If `renderItem` has been specified,
    call it with the data item, and return its result from the mapping function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, if `renderItem` has been specified, it will be called to get the element
    to render as the list item. If `renderItem` hasn’t been specified, it will render
    the list item as it previously did.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try the new prop out, open `App.tsx` and add the following `renderItem`
    attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The list items are now rendered as flat, white items with a border between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component appears with the overridden list items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Overridden list items](img/B19051_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Overridden list items
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing to the next section, remove the use of `renderItem` in the
    `Checklist` element in `App.tsx`. The default rendering of list items should then
    appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes this section on the render props pattern. To recap, here are
    some key points:'
  prefs: []
  type: TYPE_NORMAL
- en: The render props pattern allows a component consumer to override the rendering
    of parts of the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A render prop can either be an element or a function that returns an element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A common use case for a render prop is a data-driven list in which the rendering
    of list items can be overridden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will add checked functionality to our checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding checked functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, our checklist component doesn’t contain the ability to check items,
    so we will now add checkboxes to the list of items, giving users the ability to
    check them. We will track the checked items using a React state.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, carry out the following steps to add this functionality to our component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Checklist.tsx` and add `useState` to the React `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use the state to store the IDs of the checked items.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the component implementation, add the state for the IDs of the
    checked items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have referenced an `IdValue` type that we haven’t defined yet – we’ll define
    this after we have finished the component implementation in *step 6*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add checkboxes to the list of items as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `checkedIds` state powers the `checked` attribute of the checkbox by checking
    whether the list item’s ID is contained within it.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement the referenced `handleCheckChange` function in the next step.
    Notice that the reference calls the function passing the ID of the list item that
    has been checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start to implement the `handleCheckChange` function in the component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is a function that returns the handler function. This complexity is because
    a basic checked handler doesn’t pass in the list item’s ID. This approach is called
    **currying**, and more information on it can be found at the following link: [https://javascript.info/currying-partials](https://javascript.info/currying-partials).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the handler implementation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The implementation updates the list item’s ID to the `checkedIds` state if the
    list item has been checked and removes it if it is unchecked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s define the `IdValue` type. Create a new file in the `Checklist`
    folder called `types.ts` with the definition of `IdValue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the list item’s ID can be a `string` or `number` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move back to `Checklist.tsx` and import `IdValue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The compilation errors should now be resolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component appears with checkboxes for each list item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Checkboxes for list items](img/B19051_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Checkboxes for list items
  prefs: []
  type: TYPE_NORMAL
- en: The checklist component now includes checkboxes. However, there is an opportunity
    to make the checked logic reusable – we’ll cover this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll learn about custom React hooks. Then, we will use this
    knowledge to extract the checked logic from the checklist component into a reusable
    custom hook.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding custom hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As well as standard hooks such as `useState`, React allows us to create our
    own custom hooks. Custom hooks allow logic to be isolated and reused across multiple
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 'A custom hook is defined using a function with a name that starts with the
    word *use*. This naming convention helps ESLint check for problems with the use
    of the custom hook. Here’s a custom hook that provides toggling logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: The custom hook contains the state of the current toggle value, which is either
    `true` or `false`. It also includes a function called `toggle`, which toggles
    the current value. The current toggle value and the `toggle` function are returned
    from the custom hook in an object structure.
  prefs: []
  type: TYPE_NORMAL
- en: Note that an object structure doesn’t have to be returned. If the custom hook
    only returns a single item, then that item can be returned directly. If the custom
    hook returns two things (as in the preceding example), it can return a tuple (as
    `useState` does). An object structure is better for more than two items because
    the object keys make it clear what each item is.
  prefs: []
  type: TYPE_NORMAL
- en: Another trait of a custom hook is that it uses other standard React hooks. For
    example, the `useToggle` custom hook uses `useState`. If the custom hook doesn’t
    call a React hook or another custom hook, it’s just a regular function rather
    than a custom hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'This custom hook can then be used in the implementation of a component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: The toggle value (`toggleValue`) and the `toggle` function are destructured
    from the return value of the custom hook. The toggle value is used to render text
    `true` or `false`. The `toggle` function is also assigned to the click handler
    of the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom hooks can take in parameters as well. In the example here, we have added
    a default value in the `useToggle` hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the parameters are in an object structure. An object
    structure is nice when there are multiple parameters and nothing breaks when new
    parameters are added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arguments are passed into the custom hook in an object. Here’s an example of
    using `useToggle` with its value initially being `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Now that we understand how to create and use custom hooks, we will put this
    into practice in our checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting checked logic into a custom hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will extract the logic for checked items into a custom hook. This will allow
    potential future components to use the logic and clean up the code a little.
  prefs: []
  type: TYPE_NORMAL
- en: The custom hook will be called `useChecked` and will contain the state for the
    checked list item IDs. The hook will also include a handler that can be attached
    to the checkboxes, updating the checked list item ID’s state.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Checklist` folder, create a file for the custom hook called `useChecked.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `useChecked.ts` and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The hook will use React state that is typed using `IdValue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start to implement the function for the custom hook by initializing the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The hook doesn’t have any parameters. The `useState` call is exactly the same
    as the one currently in the `Checklist` component – this could be copied and pasted
    into the custom hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a checked handler to the custom hook. This can be copied from the implementation
    of the `Checklist` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last task in the custom hook implementation is to return the checked IDs
    and the handler function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, open `Checklist.tsx` and remove the state definition and the `handleCheckChange`
    handler function. Also, remove `useState` and `IdValue` from the `import` statements,
    as they are redundant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Still in `Checklist.tsx`, import the `useChecked` hook we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a call to `useChecked` and destructure the checked IDs and the handler
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the app isn’t running, run it by entering `npm start` in the terminal. The
    checklist component will appear and behave as it did before we made these changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes the implementation and use of the custom hook. To recap, here
    are some key points:'
  prefs: []
  type: TYPE_NORMAL
- en: Custom hooks make code a little cleaner and are reusable because they isolate
    logic, which can be complex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom hooks must start with `use`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom hooks must use a standard React hook or another custom hook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A custom hook is just a function that returns useful things for components to
    use. Using an object structure for the returned items is ideal when returning
    many items because the object keys make it clear what each item is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A custom hook can have parameters. Using an object structure for the parameters
    is ideal for many items and doesn’t break anything when new parameters are added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will cover a pattern that will allow the consumer of a component to
    control some of its behavior with the state.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing the internal state to be controlled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll learn how to allow consumers of a component to control
    its internal state. We will use this pattern in the checklist component so that
    users can check just a single item.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how the internal state can be controlled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Allowing consumers of a component to control the state allows the behavior of
    a component to be tweaked if that behavior is driven by the state. Let’s go through
    an example using the `useToggle` custom hook we covered in the last section when
    learning about custom hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two additional props are required to allow the internal state to be controlled
    – one for the current state value and one for a change handler. These additional
    props are `toggleValue` and `onToggleValueChange` in `useToggle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: These props are marked as optional because this pattern doesn’t force the consumer
    of the component to control the state – it’s a feature they can opt in to.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The consumer of the component will never specify both `defaultToggleValue` and
    `toggleValue`. `defaultToggleValue` should only be used when the consumer doesn’t
    want to control `toggleValue` with the state. When the consumer does want to control
    `toggleValue` with the state, they can set the initial value of their state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `toggleValue` prop now clashes with the `toggleValue` state because they
    have the same name, so the state needs to be renamed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: 'The default value of the internal state now needs to consider that there might
    be a prop controlling the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: 'When the state is changed, the change handler is called, if it has been defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Again, it’s important that we still update the internal state in case the consumer
    isn’t controlling the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step in implementing this pattern is to update the internal state
    when the controlled state is updated. We can do this with `useEffect` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: The effect is triggered when the state prop changes. We check whether the state
    prop is being controlled; if so, the internal state is updated with its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of controlling `toggleValue` in `useToggle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: This example stores the toggle value in its own state and passes it to `useToggle`.
    `onToggleValueChange` is handled by updating the state value. The logic for setting
    the state value only allows it to be `true` up to three times.
  prefs: []
  type: TYPE_NORMAL
- en: So, this use case has overridden the default behavior of the toggle so that
    it can only be set to `true` up to three times.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to allow the internal state to be controlled, we
    will use it in our checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing checkedIds to be controlled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the moment, our checklist component allows many items to be selected. If
    we allow the `checkedIds` state to be controlled by the consumer, they can change
    the checklist component so that they can select just a single item.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start in `useChecked.ts`. Add `useEffect` to the React `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add new parameters for the controlled checked IDs and the change handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the internal state name to `resolvedCheckedIds` and default it to the
    passed-in `checkedIds` parameter if defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `handleCheckChange` handler to call the passed-in change handler
    if defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last task in `useCheck.ts` is to synchronize the controlled checked IDs
    with the internal state. Add the following `useEffect` hook to achieve this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `Checklist.tsx` and import the `IdValue` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new props for the controlled checked IDs and the change handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass these props to `useChecked` and rename the destructured `checkedIds` variable
    `resolvedCheckedIds`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `index.ts` in the `Checklist` folder. Export the `IdValue` type because
    consumers of the component can now pass in `checkedIds`, which is an array of
    this type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `type` keyword after the `export` statement is required by TypeScript when
    exporting a named type already exported from the referenced file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `App.tsx` and import `useState` from React, as well as the `IdValue`
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the state in the `App` component for the single checked ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The state is `null` when there is no checked item. This can’t be set to `undefined`
    because `Checklist` will think `checkedIds` is uncontrolled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a handler for when an item is checked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The handler stores the checked ID in the state or sets the state to `null` if
    the checked item has been unchecked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass the checked ID and the change handler to the `Checklist` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s give this a try. If the app isn’t running, run it by entering `npm start`
    in the terminal. You will find that only a single list item can be checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes this section on allowing the internal state to be controlled.
    Here’s a recap:'
  prefs: []
  type: TYPE_NORMAL
- en: This pattern is useful because it changes the component’s behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component must expose a prop to control the state value and another for
    its change handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internally, the component still manages the state and synchronizes it with the
    consumer’s using `useEffect`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the state is controlled, the consumer’s change handler is called in the internal
    change handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a reusable checklist component and used many useful
    patterns along the way.
  prefs: []
  type: TYPE_NORMAL
- en: We started by learning how to implement generic props, which allow a component
    to be used with varying data types but still be strongly typed. We used this to
    allow varying data to be passed into the checklist component without sacrificing
    type safety.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to allow consumers of a component to spread props onto an internal
    element. A common use case is spreading props onto the internal container element
    to allow the consumer to size it, which is what we did with the checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: The render prop pattern is one of the most useful patterns when developing reusable
    components. We learned that it allows the consumer to take responsibility for
    rendering parts of the component. We used this pattern to override the rendering
    of list items in our checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: Custom hooks isolate logic and are useful for sharing logic across components
    and keeping the code within a component clean. Custom hooks must call a standard
    React hook directly or indirectly. We extracted the checked logic from our checklist
    component into a custom hook.
  prefs: []
  type: TYPE_NORMAL
- en: The last pattern we learned about was allowing a component’s internal state
    to be controlled. This powerful pattern allows the consumer of the component to
    tweak its behavior. We used this to only allow a single list item to be checked
    in our checklist component.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to write automated tests for React components.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to check what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The snippet of the following component renders options and one can be selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following TypeScript error is raised on the component props parameter though:
    **Cannot find name ‘TOption’**. What is the problem?'
  prefs: []
  type: TYPE_NORMAL
- en: The `value` and `label` props from the component in *question 1* should only
    be set to a property name in the `options` value. What type can we give `value`
    and `label` so that TypeScript includes them in its type checking?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A prop called `option` has been added to the `Select` component from the previous
    question as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`option` is supposed to allow the consumer of the component to override the
    rendering of the options. Can you spot the flaw in the implementation?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a `Field` component that renders a `label` element and an
    `input` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is a problem with the implementation though – can you spot it?
  prefs: []
  type: TYPE_NORMAL
- en: How could the consumer specify props to spread onto the `label` element in the
    `Field` component from the previous question? Note that we still want the consumer
    to spread props onto the `input` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A custom hook has been added to the `Field` component from the previous question.
    The custom hook is called `useValid`, which validates that the field has been
    filled in with something:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What is wrong with the implementation?
  prefs: []
  type: TYPE_NORMAL
- en: How many render props can a function component have?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The generic type must be defined in the component function as well as the prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `keyof` operator can be used to ensure `value` and `label` are keys in
    `options`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The consumer is likely to need the data for the option, so the prop should
    be a function containing the data as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There is a syntax error because the rest parameter is the first parameter.
    The rest parameter must be the last one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A `labelProps` prop could be added using the `ComponentPropsWithoutRef` type.
    This could then be spread onto the `label` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`useValid` doesn’t call a standard React hook. A better implementation would
    be to extract the state into the custom hook as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is no limit on the number of render props a component can have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
