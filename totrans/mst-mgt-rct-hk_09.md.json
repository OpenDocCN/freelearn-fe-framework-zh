["```js\n    let globalVariable = {\n      a: 1,\n      b: {\n        c: 2,\n        d: 3,\n      },\n      e: [4, 5, 6],\n    };\n    globalVariable.b.d = 9;\n    ```", "```js\nconst createContainer = () => {\n  let state = { a: 1, b: 2 };\n  const geState = () => state;\n  const setState = (...) => { ...  };\n  return { getState, setState };\n};\nconst globalContainer = createContainer();\nglobalContainer.setState(...);\n```", "```js\nlet state = {\n  a: 1,\n  b: { c: 2, d: 3 },\n  e: { f: 4, g: 5 },\n};\n```", "```js\nconst ComponentA = () => {\n  return <>value: {state.b.c}</>;\n};\nconst ComponentB = () => {\n  return <>value: {state.e.g}</>;\n};\n```", "```js\n++state.a;\n```", "```js\nconst Component = () => {\n  const value = useSelector((state) => state.b.c);\n  return <>{value}</>;\n};\n```", "```js\nconst Component = () => {\n  const value = useSelector((state) => state.b.c * 2);\n  return <>{value}</>;\n};\n```", "```js\nconst Component = () => {\n  const trackedState = useTrackedState();\n  return <p>{trackedState.b.c}</p>;\n};\n```", "```js\nconst Component = () => {\n  const trackedState = useTrackedState();\n  return (\n    <>\n      <p>{trackedState.b.c}</p>\n      <p>{trackedState.e.g}</p>\n    </>\n  );\n};\n```", "```js\nconst Component = () => {\n  const isSmall = useSelector((state) => state.a < 10);\n  return <>{isSmall ? 'small' : 'big'}</>;\n};\n```", "```js\nconst Component = () => {\n  const isSmall = useTrackedState().a < 10;\n  return <>{isSmall ? 'small' : 'big'}</>;\n};\n```", "```js\nconst globalState = {\n  a: atom(1),\n  b: atom(2),\n  e: atom(3),\n};\nconst Component = () => {\n  const value = useAtom(globalState.a);\n  return <>{value}</>;\n};\n```", "```js\nconst sum = globalState.a + globalState.b + globalState.c;\n```"]